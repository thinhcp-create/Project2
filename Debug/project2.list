
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005158  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08005264  08005264  00006264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f0  080054f0  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  080054f0  080054f0  000064f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f8  080054f8  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f8  080054f8  000064f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054fc  080054fc  000064fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005500  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000064  08005564  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08005564  000073b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd23  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229d  00000000  00000000  00012db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00015050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000851  00000000  00000000  00015b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c23  00000000  00000000  00016361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f01b  00000000  00000000  0002df84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f87  00000000  00000000  0003cf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1f26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003124  00000000  00000000  000c1f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000c5090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800524c 	.word	0x0800524c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800524c 	.word	0x0800524c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <DS1307_GetRegByte>:
 *      Author: Salmon1611
 */
#include "ds1307.h"
extern I2C_HandleTypeDef hi2c1;

uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af02      	add	r7, sp, #8
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
    uint8_t val=0;
 800017a:	2300      	movs	r3, #0
 800017c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 800017e:	1dfa      	adds	r2, r7, #7
 8000180:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000184:	9300      	str	r3, [sp, #0]
 8000186:	2301      	movs	r3, #1
 8000188:	21d0      	movs	r1, #208	@ 0xd0
 800018a:	4809      	ldr	r0, [pc, #36]	@ (80001b0 <DS1307_GetRegByte+0x40>)
 800018c:	f002 f98a 	bl	80024a4 <HAL_I2C_Master_Transmit>
//    HAL_Delay(5);
    HAL_I2C_Master_Receive(&hi2c1, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8000190:	f107 020f 	add.w	r2, r7, #15
 8000194:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000198:	9300      	str	r3, [sp, #0]
 800019a:	2301      	movs	r3, #1
 800019c:	21d0      	movs	r1, #208	@ 0xd0
 800019e:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <DS1307_GetRegByte+0x40>)
 80001a0:	f002 fa7e 	bl	80026a0 <HAL_I2C_Master_Receive>
    return val;
 80001a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	200001a8 	.word	0x200001a8

080001b4 <DS1307_DecodeBCD>:
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
    return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	091b      	lsrs	r3, r3, #4
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	461a      	mov	r2, r3
 80001c6:	0092      	lsls	r2, r2, #2
 80001c8:	4413      	add	r3, r2
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	f003 030f 	and.w	r3, r3, #15
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	4413      	add	r3, r2
 80001d8:	b2db      	uxtb	r3, r3
}
 80001da:	4618      	mov	r0, r3
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <DS1307_EncodeBCD>:
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
    return (dec % 10 + ((dec / 10) << 4));
 80001ee:	79fa      	ldrb	r2, [r7, #7]
 80001f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000224 <DS1307_EncodeBCD+0x40>)
 80001f2:	fba3 1302 	umull	r1, r3, r3, r2
 80001f6:	08d9      	lsrs	r1, r3, #3
 80001f8:	460b      	mov	r3, r1
 80001fa:	009b      	lsls	r3, r3, #2
 80001fc:	440b      	add	r3, r1
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	1ad3      	subs	r3, r2, r3
 8000202:	b2da      	uxtb	r2, r3
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	4907      	ldr	r1, [pc, #28]	@ (8000224 <DS1307_EncodeBCD+0x40>)
 8000208:	fba1 1303 	umull	r1, r3, r1, r3
 800020c:	08db      	lsrs	r3, r3, #3
 800020e:	b2db      	uxtb	r3, r3
 8000210:	011b      	lsls	r3, r3, #4
 8000212:	b2db      	uxtb	r3, r3
 8000214:	4413      	add	r3, r2
 8000216:	b2db      	uxtb	r3, r3
}
 8000218:	4618      	mov	r0, r3
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	cccccccd 	.word	0xcccccccd

08000228 <DS1307_gettime>:
void DS1307_gettime(DS1307_STRUCT *ds1307){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
    uint16_t cen;
    ds1307->sec=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8000230:	2000      	movs	r0, #0
 8000232:	f7ff ff9d 	bl	8000170 <DS1307_GetRegByte>
 8000236:	4603      	mov	r3, r0
 8000238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800023c:	b2db      	uxtb	r3, r3
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ffb8 	bl	80001b4 <DS1307_DecodeBCD>
 8000244:	4603      	mov	r3, r0
 8000246:	461a      	mov	r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	701a      	strb	r2, [r3, #0]
    ds1307->min=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 800024c:	2001      	movs	r0, #1
 800024e:	f7ff ff8f 	bl	8000170 <DS1307_GetRegByte>
 8000252:	4603      	mov	r3, r0
 8000254:	4618      	mov	r0, r3
 8000256:	f7ff ffad 	bl	80001b4 <DS1307_DecodeBCD>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	705a      	strb	r2, [r3, #1]
    ds1307->hour=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8000262:	2002      	movs	r0, #2
 8000264:	f7ff ff84 	bl	8000170 <DS1307_GetRegByte>
 8000268:	4603      	mov	r3, r0
 800026a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800026e:	b2db      	uxtb	r3, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ff9f 	bl	80001b4 <DS1307_DecodeBCD>
 8000276:	4603      	mov	r3, r0
 8000278:	461a      	mov	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	709a      	strb	r2, [r3, #2]
//    ds1307->dow=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
    ds1307->date=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 800027e:	2004      	movs	r0, #4
 8000280:	f7ff ff76 	bl	8000170 <DS1307_GetRegByte>
 8000284:	4603      	mov	r3, r0
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ff94 	bl	80001b4 <DS1307_DecodeBCD>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	711a      	strb	r2, [r3, #4]
    ds1307->month=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8000294:	2005      	movs	r0, #5
 8000296:	f7ff ff6b 	bl	8000170 <DS1307_GetRegByte>
 800029a:	4603      	mov	r3, r0
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff89 	bl	80001b4 <DS1307_DecodeBCD>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	715a      	strb	r2, [r3, #5]
    cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 80002aa:	2010      	movs	r0, #16
 80002ac:	f7ff ff60 	bl	8000170 <DS1307_GetRegByte>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	0092      	lsls	r2, r2, #2
 80002b6:	4413      	add	r3, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	0091      	lsls	r1, r2, #2
 80002bc:	461a      	mov	r2, r3
 80002be:	460b      	mov	r3, r1
 80002c0:	4413      	add	r3, r2
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	81fb      	strh	r3, [r7, #14]
    ds1307->year=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80002c6:	2006      	movs	r0, #6
 80002c8:	f7ff ff52 	bl	8000170 <DS1307_GetRegByte>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ff70 	bl	80001b4 <DS1307_DecodeBCD>
 80002d4:	4603      	mov	r3, r0
 80002d6:	461a      	mov	r2, r3
 80002d8:	89fb      	ldrh	r3, [r7, #14]
 80002da:	4413      	add	r3, r2
 80002dc:	b29a      	uxth	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	80da      	strh	r2, [r3, #6]
}
 80002e2:	bf00      	nop
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <DS1307_SetRegByte>:
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af02      	add	r7, sp, #8
 80002f2:	4603      	mov	r3, r0
 80002f4:	460a      	mov	r2, r1
 80002f6:	71fb      	strb	r3, [r7, #7]
 80002f8:	4613      	mov	r3, r2
 80002fa:	71bb      	strb	r3, [r7, #6]
    uint8_t bytes[2] = { regAddr, val };
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	733b      	strb	r3, [r7, #12]
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8000304:	f107 020c 	add.w	r2, r7, #12
 8000308:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2302      	movs	r3, #2
 8000310:	21d0      	movs	r1, #208	@ 0xd0
 8000312:	4803      	ldr	r0, [pc, #12]	@ (8000320 <DS1307_SetRegByte+0x34>)
 8000314:	f002 f8c6 	bl	80024a4 <HAL_I2C_Master_Transmit>
}
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200001a8 	.word	0x200001a8

08000324 <DS1307_GetClockHalt>:
uint8_t DS1307_GetClockHalt(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8000328:	2000      	movs	r0, #0
 800032a:	f7ff ff21 	bl	8000170 <DS1307_GetRegByte>
 800032e:	4603      	mov	r3, r0
 8000330:	11db      	asrs	r3, r3, #7
 8000332:	b2db      	uxtb	r3, r3
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	b2db      	uxtb	r3, r3
}
 800033a:	4618      	mov	r0, r3
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <DS1307_settime>:
void DS1307_settime(DS1307_STRUCT *ds1307){
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
    DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(ds1307->sec | DS1307_GetClockHalt()));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781c      	ldrb	r4, [r3, #0]
 800034c:	f7ff ffea 	bl	8000324 <DS1307_GetClockHalt>
 8000350:	4603      	mov	r3, r0
 8000352:	4323      	orrs	r3, r4
 8000354:	b2db      	uxtb	r3, r3
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff44 	bl	80001e4 <DS1307_EncodeBCD>
 800035c:	4603      	mov	r3, r0
 800035e:	4619      	mov	r1, r3
 8000360:	2000      	movs	r0, #0
 8000362:	f7ff ffc3 	bl	80002ec <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(ds1307->min));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	785b      	ldrb	r3, [r3, #1]
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff3a 	bl	80001e4 <DS1307_EncodeBCD>
 8000370:	4603      	mov	r3, r0
 8000372:	4619      	mov	r1, r3
 8000374:	2001      	movs	r0, #1
 8000376:	f7ff ffb9 	bl	80002ec <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(ds1307->hour & 0x3f));//hour_24mode Hour in 24h format, 0 to 23.
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	789b      	ldrb	r3, [r3, #2]
 800037e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000382:	b2db      	uxtb	r3, r3
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ff2d 	bl	80001e4 <DS1307_EncodeBCD>
 800038a:	4603      	mov	r3, r0
 800038c:	4619      	mov	r1, r3
 800038e:	2002      	movs	r0, #2
 8000390:	f7ff ffac 	bl	80002ec <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(ds1307->dow));//dayOfWeek Days since last Sunday, 0 to 6.
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	78db      	ldrb	r3, [r3, #3]
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff23 	bl	80001e4 <DS1307_EncodeBCD>
 800039e:	4603      	mov	r3, r0
 80003a0:	4619      	mov	r1, r3
 80003a2:	2003      	movs	r0, #3
 80003a4:	f7ff ffa2 	bl	80002ec <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(ds1307->date));//date Day of month, 1 to 31.
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	791b      	ldrb	r3, [r3, #4]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff19 	bl	80001e4 <DS1307_EncodeBCD>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4619      	mov	r1, r3
 80003b6:	2004      	movs	r0, #4
 80003b8:	f7ff ff98 	bl	80002ec <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(ds1307->month));//month Month, 1 to 12.
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	795b      	ldrb	r3, [r3, #5]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff0f 	bl	80001e4 <DS1307_EncodeBCD>
 80003c6:	4603      	mov	r3, r0
 80003c8:	4619      	mov	r1, r3
 80003ca:	2005      	movs	r0, #5
 80003cc:	f7ff ff8e 	bl	80002ec <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_CENT, ds1307->year / 100);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	88db      	ldrh	r3, [r3, #6]
 80003d4:	4a10      	ldr	r2, [pc, #64]	@ (8000418 <DS1307_settime+0xd8>)
 80003d6:	fba2 2303 	umull	r2, r3, r2, r3
 80003da:	095b      	lsrs	r3, r3, #5
 80003dc:	b29b      	uxth	r3, r3
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4619      	mov	r1, r3
 80003e2:	2010      	movs	r0, #16
 80003e4:	f7ff ff82 	bl	80002ec <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(ds1307->year % 100));//2000 to 2099.
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	88db      	ldrh	r3, [r3, #6]
 80003ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000418 <DS1307_settime+0xd8>)
 80003ee:	fba2 1203 	umull	r1, r2, r2, r3
 80003f2:	0952      	lsrs	r2, r2, #5
 80003f4:	2164      	movs	r1, #100	@ 0x64
 80003f6:	fb01 f202 	mul.w	r2, r1, r2
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff feef 	bl	80001e4 <DS1307_EncodeBCD>
 8000406:	4603      	mov	r3, r0
 8000408:	4619      	mov	r1, r3
 800040a:	2006      	movs	r0, #6
 800040c:	f7ff ff6e 	bl	80002ec <DS1307_SetRegByte>
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bd90      	pop	{r4, r7, pc}
 8000418:	51eb851f 	.word	0x51eb851f

0800041c <dayOfWeek>:
void DS1307_config(){
    DS1307_SetClockHalt(0);
    DS1307_SetTimeZone(+8, 00);
}

uint8_t dayOfWeek(uint8_t day, uint8_t month, uint16_t year) {
 800041c:	b4b0      	push	{r4, r5, r7}
 800041e:	b095      	sub	sp, #84	@ 0x54
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
 8000426:	460b      	mov	r3, r1
 8000428:	71bb      	strb	r3, [r7, #6]
 800042a:	4613      	mov	r3, r2
 800042c:	80bb      	strh	r3, [r7, #4]
    // M?ng luu tr? s? ngày c?a các tháng
    int daysInMonth[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800042e:	4b46      	ldr	r3, [pc, #280]	@ (8000548 <dayOfWeek+0x12c>)
 8000430:	f107 040c 	add.w	r4, r7, #12
 8000434:	461d      	mov	r5, r3
 8000436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800043a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800043c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800043e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000442:	682b      	ldr	r3, [r5, #0]
 8000444:	6023      	str	r3, [r4, #0]

    // Ki?m tra nam nhu?n và c?p nh?t s? ngày c?a tháng 2
    if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
 8000446:	88bb      	ldrh	r3, [r7, #4]
 8000448:	f003 0303 	and.w	r3, r3, #3
 800044c:	b29b      	uxth	r3, r3
 800044e:	2b00      	cmp	r3, #0
 8000450:	d10b      	bne.n	800046a <dayOfWeek+0x4e>
 8000452:	88bb      	ldrh	r3, [r7, #4]
 8000454:	4a3d      	ldr	r2, [pc, #244]	@ (800054c <dayOfWeek+0x130>)
 8000456:	fba2 1203 	umull	r1, r2, r2, r3
 800045a:	0952      	lsrs	r2, r2, #5
 800045c:	2164      	movs	r1, #100	@ 0x64
 800045e:	fb01 f202 	mul.w	r2, r1, r2
 8000462:	1a9b      	subs	r3, r3, r2
 8000464:	b29b      	uxth	r3, r3
 8000466:	2b00      	cmp	r3, #0
 8000468:	d10c      	bne.n	8000484 <dayOfWeek+0x68>
 800046a:	88bb      	ldrh	r3, [r7, #4]
 800046c:	4a37      	ldr	r2, [pc, #220]	@ (800054c <dayOfWeek+0x130>)
 800046e:	fba2 1203 	umull	r1, r2, r2, r3
 8000472:	09d2      	lsrs	r2, r2, #7
 8000474:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000478:	fb01 f202 	mul.w	r2, r1, r2
 800047c:	1a9b      	subs	r3, r3, r2
 800047e:	b29b      	uxth	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d101      	bne.n	8000488 <dayOfWeek+0x6c>
        daysInMonth[2] = 29;
 8000484:	231d      	movs	r3, #29
 8000486:	617b      	str	r3, [r7, #20]
    }

    // Tính s? ngày tính t? ngày 1/1/1 d?n ngày c?n ki?m tra
    int totalDays = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int y = 1; y < year; y++) {
 800048c:	2301      	movs	r3, #1
 800048e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000490:	e02b      	b.n	80004ea <dayOfWeek+0xce>
        if ((y % 4 == 0 && y % 100 != 0) || y % 400 == 0) {
 8000492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000494:	f003 0303 	and.w	r3, r3, #3
 8000498:	2b00      	cmp	r3, #0
 800049a:	d10c      	bne.n	80004b6 <dayOfWeek+0x9a>
 800049c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800049e:	4b2b      	ldr	r3, [pc, #172]	@ (800054c <dayOfWeek+0x130>)
 80004a0:	fb83 1302 	smull	r1, r3, r3, r2
 80004a4:	1159      	asrs	r1, r3, #5
 80004a6:	17d3      	asrs	r3, r2, #31
 80004a8:	1acb      	subs	r3, r1, r3
 80004aa:	2164      	movs	r1, #100	@ 0x64
 80004ac:	fb01 f303 	mul.w	r3, r1, r3
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d10d      	bne.n	80004d2 <dayOfWeek+0xb6>
 80004b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80004b8:	4b24      	ldr	r3, [pc, #144]	@ (800054c <dayOfWeek+0x130>)
 80004ba:	fb83 1302 	smull	r1, r3, r3, r2
 80004be:	11d9      	asrs	r1, r3, #7
 80004c0:	17d3      	asrs	r3, r2, #31
 80004c2:	1acb      	subs	r3, r1, r3
 80004c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80004c8:	fb01 f303 	mul.w	r3, r1, r3
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d104      	bne.n	80004dc <dayOfWeek+0xc0>
            totalDays += 366;
 80004d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80004d4:	f503 73b7 	add.w	r3, r3, #366	@ 0x16e
 80004d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80004da:	e003      	b.n	80004e4 <dayOfWeek+0xc8>
        } else {
            totalDays += 365;
 80004dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80004de:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 80004e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int y = 1; y < year; y++) {
 80004e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80004e6:	3301      	adds	r3, #1
 80004e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80004ea:	88bb      	ldrh	r3, [r7, #4]
 80004ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80004ee:	429a      	cmp	r2, r3
 80004f0:	dbcf      	blt.n	8000492 <dayOfWeek+0x76>
        }
    }

    for (int m = 1; m < month; m++) {
 80004f2:	2301      	movs	r3, #1
 80004f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80004f6:	e00b      	b.n	8000510 <dayOfWeek+0xf4>
        totalDays += daysInMonth[m];
 80004f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	3350      	adds	r3, #80	@ 0x50
 80004fe:	443b      	add	r3, r7
 8000500:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000504:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000506:	4413      	add	r3, r2
 8000508:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int m = 1; m < month; m++) {
 800050a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800050c:	3301      	adds	r3, #1
 800050e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000514:	429a      	cmp	r2, r3
 8000516:	dbef      	blt.n	80004f8 <dayOfWeek+0xdc>
    }

    totalDays += day;
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800051c:	4413      	add	r3, r2
 800051e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Tính th? trong tu?n
    int dayOfWeek = totalDays % 7;
 8000520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <dayOfWeek+0x134>)
 8000524:	fb83 1302 	smull	r1, r3, r3, r2
 8000528:	4413      	add	r3, r2
 800052a:	1099      	asrs	r1, r3, #2
 800052c:	17d3      	asrs	r3, r2, #31
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	460b      	mov	r3, r1
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	1a5b      	subs	r3, r3, r1
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	643b      	str	r3, [r7, #64]	@ 0x40

    return dayOfWeek;
 800053a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800053c:	b2db      	uxtb	r3, r3
}
 800053e:	4618      	mov	r0, r3
 8000540:	3754      	adds	r7, #84	@ 0x54
 8000542:	46bd      	mov	sp, r7
 8000544:	bcb0      	pop	{r4, r5, r7}
 8000546:	4770      	bx	lr
 8000548:	08005264 	.word	0x08005264
 800054c:	51eb851f 	.word	0x51eb851f
 8000550:	92492493 	.word	0x92492493

08000554 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f023 030f 	bic.w	r3, r3, #15
 8000564:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	f043 030c 	orr.w	r3, r3, #12
 8000572:	b2db      	uxtb	r3, r3
 8000574:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	b2db      	uxtb	r3, r3
 800057e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	f043 030c 	orr.w	r3, r3, #12
 8000586:	b2db      	uxtb	r3, r3
 8000588:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800058a:	7bbb      	ldrb	r3, [r7, #14]
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	b2db      	uxtb	r3, r3
 8000592:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000594:	f107 0208 	add.w	r2, r7, #8
 8000598:	2364      	movs	r3, #100	@ 0x64
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2304      	movs	r3, #4
 800059e:	214e      	movs	r1, #78	@ 0x4e
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <lcd_send_cmd+0x5c>)
 80005a2:	f001 ff7f 	bl	80024a4 <HAL_I2C_Master_Transmit>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200001a8 	.word	0x200001a8

080005b4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f023 030f 	bic.w	r3, r3, #15
 80005c4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	f043 030d 	orr.w	r3, r3, #13
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	f043 0309 	orr.w	r3, r3, #9
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	f043 030d 	orr.w	r3, r3, #13
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	f043 0309 	orr.w	r3, r3, #9
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005f4:	f107 0208 	add.w	r2, r7, #8
 80005f8:	2364      	movs	r3, #100	@ 0x64
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2304      	movs	r3, #4
 80005fe:	214e      	movs	r1, #78	@ 0x4e
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <lcd_send_data+0x5c>)
 8000602:	f001 ff4f 	bl	80024a4 <HAL_I2C_Master_Transmit>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200001a8 	.word	0x200001a8

08000614 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    switch (row)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d003      	beq.n	800062c <lcd_put_cur+0x18>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d005      	beq.n	8000636 <lcd_put_cur+0x22>
 800062a:	e009      	b.n	8000640 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000632:	603b      	str	r3, [r7, #0]
            break;
 8000634:	e004      	b.n	8000640 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800063c:	603b      	str	r3, [r7, #0]
            break;
 800063e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff85 	bl	8000554 <lcd_send_cmd>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <lcd_init>:


void lcd_init (void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000656:	2032      	movs	r0, #50	@ 0x32
 8000658:	f001 fa48 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x30);
 800065c:	2030      	movs	r0, #48	@ 0x30
 800065e:	f7ff ff79 	bl	8000554 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000662:	2005      	movs	r0, #5
 8000664:	f001 fa42 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000668:	2030      	movs	r0, #48	@ 0x30
 800066a:	f7ff ff73 	bl	8000554 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800066e:	2001      	movs	r0, #1
 8000670:	f001 fa3c 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000674:	2030      	movs	r0, #48	@ 0x30
 8000676:	f7ff ff6d 	bl	8000554 <lcd_send_cmd>
	HAL_Delay(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f001 fa36 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000680:	2020      	movs	r0, #32
 8000682:	f7ff ff67 	bl	8000554 <lcd_send_cmd>
	HAL_Delay(10);
 8000686:	200a      	movs	r0, #10
 8000688:	f001 fa30 	bl	8001aec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800068c:	2028      	movs	r0, #40	@ 0x28
 800068e:	f7ff ff61 	bl	8000554 <lcd_send_cmd>
	HAL_Delay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f001 fa2a 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000698:	2008      	movs	r0, #8
 800069a:	f7ff ff5b 	bl	8000554 <lcd_send_cmd>
	HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f001 fa24 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff ff55 	bl	8000554 <lcd_send_cmd>
	HAL_Delay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f001 fa1e 	bl	8001aec <HAL_Delay>
	HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f001 fa1b 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006b6:	2006      	movs	r0, #6
 80006b8:	f7ff ff4c 	bl	8000554 <lcd_send_cmd>
	HAL_Delay(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f001 fa15 	bl	8001aec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006c2:	200c      	movs	r0, #12
 80006c4:	f7ff ff46 	bl	8000554 <lcd_send_cmd>

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006d4:	e006      	b.n	80006e4 <lcd_send_string+0x18>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff68 	bl	80005b4 <lcd_send_data>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f4      	bne.n	80006d6 <lcd_send_string+0xa>
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <display_digit>:


#include "led7seg.h"

// Hàm hiển thị số từ 0 đến 9 trên LED 7 thanh
void display_digit(uint8_t digit) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
    // Đảm bảo chỉ hiển thị các số từ 0 đến 9
    if (digit > 9) return;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b09      	cmp	r3, #9
 8000706:	f200 81cd 	bhi.w	8000aa4 <display_digit+0x3ac>

    // Xuất mức tín hiệu tương ứng cho các số từ 0 đến 9
    switch (digit) {
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b09      	cmp	r3, #9
 800070e:	f200 81ca 	bhi.w	8000aa6 <display_digit+0x3ae>
 8000712:	a201      	add	r2, pc, #4	@ (adr r2, 8000718 <display_digit+0x20>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000741 	.word	0x08000741
 800071c:	08000797 	.word	0x08000797
 8000720:	080007ed 	.word	0x080007ed
 8000724:	08000843 	.word	0x08000843
 8000728:	08000899 	.word	0x08000899
 800072c:	080008ef 	.word	0x080008ef
 8000730:	08000945 	.word	0x08000945
 8000734:	0800099b 	.word	0x0800099b
 8000738:	080009f1 	.word	0x080009f1
 800073c:	08000a47 	.word	0x08000a47
        case 0:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000746:	48d5      	ldr	r0, [pc, #852]	@ (8000a9c <display_digit+0x3a4>)
 8000748:	f001 fd4f 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000752:	48d2      	ldr	r0, [pc, #840]	@ (8000a9c <display_digit+0x3a4>)
 8000754:	f001 fd49 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800075e:	48d0      	ldr	r0, [pc, #832]	@ (8000aa0 <display_digit+0x3a8>)
 8000760:	f001 fd43 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800076a:	48cd      	ldr	r0, [pc, #820]	@ (8000aa0 <display_digit+0x3a8>)
 800076c:	f001 fd3d 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000776:	48ca      	ldr	r0, [pc, #808]	@ (8000aa0 <display_digit+0x3a8>)
 8000778:	f001 fd37 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000782:	48c6      	ldr	r0, [pc, #792]	@ (8000a9c <display_digit+0x3a4>)
 8000784:	f001 fd31 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800078e:	48c3      	ldr	r0, [pc, #780]	@ (8000a9c <display_digit+0x3a4>)
 8000790:	f001 fd2b 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000794:	e187      	b.n	8000aa6 <display_digit+0x3ae>
        case 1:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800079c:	48bf      	ldr	r0, [pc, #764]	@ (8000a9c <display_digit+0x3a4>)
 800079e:	f001 fd24 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a8:	48bc      	ldr	r0, [pc, #752]	@ (8000a9c <display_digit+0x3a4>)
 80007aa:	f001 fd1e 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b4:	48ba      	ldr	r0, [pc, #744]	@ (8000aa0 <display_digit+0x3a8>)
 80007b6:	f001 fd18 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c0:	48b7      	ldr	r0, [pc, #732]	@ (8000aa0 <display_digit+0x3a8>)
 80007c2:	f001 fd12 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007cc:	48b4      	ldr	r0, [pc, #720]	@ (8000aa0 <display_digit+0x3a8>)
 80007ce:	f001 fd0c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d8:	48b0      	ldr	r0, [pc, #704]	@ (8000a9c <display_digit+0x3a4>)
 80007da:	f001 fd06 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e4:	48ad      	ldr	r0, [pc, #692]	@ (8000a9c <display_digit+0x3a4>)
 80007e6:	f001 fd00 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80007ea:	e15c      	b.n	8000aa6 <display_digit+0x3ae>
        case 2:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f2:	48aa      	ldr	r0, [pc, #680]	@ (8000a9c <display_digit+0x3a4>)
 80007f4:	f001 fcf9 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007fe:	48a7      	ldr	r0, [pc, #668]	@ (8000a9c <display_digit+0x3a4>)
 8000800:	f001 fcf3 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080a:	48a5      	ldr	r0, [pc, #660]	@ (8000aa0 <display_digit+0x3a8>)
 800080c:	f001 fced 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000816:	48a2      	ldr	r0, [pc, #648]	@ (8000aa0 <display_digit+0x3a8>)
 8000818:	f001 fce7 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	489f      	ldr	r0, [pc, #636]	@ (8000aa0 <display_digit+0x3a8>)
 8000824:	f001 fce1 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800082e:	489b      	ldr	r0, [pc, #620]	@ (8000a9c <display_digit+0x3a4>)
 8000830:	f001 fcdb 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	4898      	ldr	r0, [pc, #608]	@ (8000a9c <display_digit+0x3a4>)
 800083c:	f001 fcd5 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000840:	e131      	b.n	8000aa6 <display_digit+0x3ae>
        case 3:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000848:	4894      	ldr	r0, [pc, #592]	@ (8000a9c <display_digit+0x3a4>)
 800084a:	f001 fcce 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000854:	4891      	ldr	r0, [pc, #580]	@ (8000a9c <display_digit+0x3a4>)
 8000856:	f001 fcc8 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000860:	488f      	ldr	r0, [pc, #572]	@ (8000aa0 <display_digit+0x3a8>)
 8000862:	f001 fcc2 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800086c:	488c      	ldr	r0, [pc, #560]	@ (8000aa0 <display_digit+0x3a8>)
 800086e:	f001 fcbc 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000878:	4889      	ldr	r0, [pc, #548]	@ (8000aa0 <display_digit+0x3a8>)
 800087a:	f001 fcb6 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000884:	4885      	ldr	r0, [pc, #532]	@ (8000a9c <display_digit+0x3a4>)
 8000886:	f001 fcb0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000890:	4882      	ldr	r0, [pc, #520]	@ (8000a9c <display_digit+0x3a4>)
 8000892:	f001 fcaa 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000896:	e106      	b.n	8000aa6 <display_digit+0x3ae>
        case 4:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800089e:	487f      	ldr	r0, [pc, #508]	@ (8000a9c <display_digit+0x3a4>)
 80008a0:	f001 fca3 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008aa:	487c      	ldr	r0, [pc, #496]	@ (8000a9c <display_digit+0x3a4>)
 80008ac:	f001 fc9d 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b6:	487a      	ldr	r0, [pc, #488]	@ (8000aa0 <display_digit+0x3a8>)
 80008b8:	f001 fc97 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c2:	4877      	ldr	r0, [pc, #476]	@ (8000aa0 <display_digit+0x3a8>)
 80008c4:	f001 fc91 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ce:	4874      	ldr	r0, [pc, #464]	@ (8000aa0 <display_digit+0x3a8>)
 80008d0:	f001 fc8b 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008da:	4870      	ldr	r0, [pc, #448]	@ (8000a9c <display_digit+0x3a4>)
 80008dc:	f001 fc85 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e6:	486d      	ldr	r0, [pc, #436]	@ (8000a9c <display_digit+0x3a4>)
 80008e8:	f001 fc7f 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80008ec:	e0db      	b.n	8000aa6 <display_digit+0x3ae>
        case 5:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f4:	4869      	ldr	r0, [pc, #420]	@ (8000a9c <display_digit+0x3a4>)
 80008f6:	f001 fc78 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000900:	4866      	ldr	r0, [pc, #408]	@ (8000a9c <display_digit+0x3a4>)
 8000902:	f001 fc72 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800090c:	4864      	ldr	r0, [pc, #400]	@ (8000aa0 <display_digit+0x3a8>)
 800090e:	f001 fc6c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000918:	4861      	ldr	r0, [pc, #388]	@ (8000aa0 <display_digit+0x3a8>)
 800091a:	f001 fc66 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000924:	485e      	ldr	r0, [pc, #376]	@ (8000aa0 <display_digit+0x3a8>)
 8000926:	f001 fc60 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000930:	485a      	ldr	r0, [pc, #360]	@ (8000a9c <display_digit+0x3a4>)
 8000932:	f001 fc5a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800093c:	4857      	ldr	r0, [pc, #348]	@ (8000a9c <display_digit+0x3a4>)
 800093e:	f001 fc54 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000942:	e0b0      	b.n	8000aa6 <display_digit+0x3ae>
        case 6:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800094a:	4854      	ldr	r0, [pc, #336]	@ (8000a9c <display_digit+0x3a4>)
 800094c:	f001 fc4d 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000956:	4851      	ldr	r0, [pc, #324]	@ (8000a9c <display_digit+0x3a4>)
 8000958:	f001 fc47 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000962:	484f      	ldr	r0, [pc, #316]	@ (8000aa0 <display_digit+0x3a8>)
 8000964:	f001 fc41 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800096e:	484c      	ldr	r0, [pc, #304]	@ (8000aa0 <display_digit+0x3a8>)
 8000970:	f001 fc3b 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097a:	4849      	ldr	r0, [pc, #292]	@ (8000aa0 <display_digit+0x3a8>)
 800097c:	f001 fc35 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000986:	4845      	ldr	r0, [pc, #276]	@ (8000a9c <display_digit+0x3a4>)
 8000988:	f001 fc2f 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000992:	4842      	ldr	r0, [pc, #264]	@ (8000a9c <display_digit+0x3a4>)
 8000994:	f001 fc29 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000998:	e085      	b.n	8000aa6 <display_digit+0x3ae>
        case 7:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a0:	483e      	ldr	r0, [pc, #248]	@ (8000a9c <display_digit+0x3a4>)
 80009a2:	f001 fc22 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009ac:	483b      	ldr	r0, [pc, #236]	@ (8000a9c <display_digit+0x3a4>)
 80009ae:	f001 fc1c 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009b8:	4839      	ldr	r0, [pc, #228]	@ (8000aa0 <display_digit+0x3a8>)
 80009ba:	f001 fc16 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009c4:	4836      	ldr	r0, [pc, #216]	@ (8000aa0 <display_digit+0x3a8>)
 80009c6:	f001 fc10 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	4833      	ldr	r0, [pc, #204]	@ (8000aa0 <display_digit+0x3a8>)
 80009d2:	f001 fc0a 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009dc:	482f      	ldr	r0, [pc, #188]	@ (8000a9c <display_digit+0x3a4>)
 80009de:	f001 fc04 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e8:	482c      	ldr	r0, [pc, #176]	@ (8000a9c <display_digit+0x3a4>)
 80009ea:	f001 fbfe 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 80009ee:	e05a      	b.n	8000aa6 <display_digit+0x3ae>
        case 8:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f6:	4829      	ldr	r0, [pc, #164]	@ (8000a9c <display_digit+0x3a4>)
 80009f8:	f001 fbf7 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a02:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <display_digit+0x3a4>)
 8000a04:	f001 fbf1 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a0e:	4824      	ldr	r0, [pc, #144]	@ (8000aa0 <display_digit+0x3a8>)
 8000a10:	f001 fbeb 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a1a:	4821      	ldr	r0, [pc, #132]	@ (8000aa0 <display_digit+0x3a8>)
 8000a1c:	f001 fbe5 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a26:	481e      	ldr	r0, [pc, #120]	@ (8000aa0 <display_digit+0x3a8>)
 8000a28:	f001 fbdf 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a32:	481a      	ldr	r0, [pc, #104]	@ (8000a9c <display_digit+0x3a4>)
 8000a34:	f001 fbd9 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a3e:	4817      	ldr	r0, [pc, #92]	@ (8000a9c <display_digit+0x3a4>)
 8000a40:	f001 fbd3 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000a44:	e02f      	b.n	8000aa6 <display_digit+0x3ae>
        case 9:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a4c:	4813      	ldr	r0, [pc, #76]	@ (8000a9c <display_digit+0x3a4>)
 8000a4e:	f001 fbcc 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a58:	4810      	ldr	r0, [pc, #64]	@ (8000a9c <display_digit+0x3a4>)
 8000a5a:	f001 fbc6 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a64:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <display_digit+0x3a8>)
 8000a66:	f001 fbc0 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a70:	480b      	ldr	r0, [pc, #44]	@ (8000aa0 <display_digit+0x3a8>)
 8000a72:	f001 fbba 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a7c:	4808      	ldr	r0, [pc, #32]	@ (8000aa0 <display_digit+0x3a8>)
 8000a7e:	f001 fbb4 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <display_digit+0x3a4>)
 8000a8a:	f001 fbae 	bl	80021ea <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a94:	4801      	ldr	r0, [pc, #4]	@ (8000a9c <display_digit+0x3a4>)
 8000a96:	f001 fba8 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000a9a:	e004      	b.n	8000aa6 <display_digit+0x3ae>
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	40010c00 	.word	0x40010c00
    if (digit > 9) return;
 8000aa4:	bf00      	nop
    }
}
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <controlLED>:
#include "led_control.h"
extern UART_HandleTypeDef huart1;
char g_led_status[16];
// Hàm điều khiển LED
void controlLED(uint8_t ledIndex, uint8_t state)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
    switch (ledIndex) {
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	d875      	bhi.n	8000bae <controlLED+0x102>
 8000ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac8 <controlLED+0x1c>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000ae9 	.word	0x08000ae9
 8000acc:	08000b01 	.word	0x08000b01
 8000ad0:	08000b19 	.word	0x08000b19
 8000ad4:	08000b31 	.word	0x08000b31
 8000ad8:	08000b49 	.word	0x08000b49
 8000adc:	08000b61 	.word	0x08000b61
 8000ae0:	08000b7b 	.word	0x08000b7b
 8000ae4:	08000b95 	.word	0x08000b95
        case 0:
            HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf0c      	ite	eq
 8000aee:	2301      	moveq	r3, #1
 8000af0:	2300      	movne	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	2120      	movs	r1, #32
 8000af8:	482f      	ldr	r0, [pc, #188]	@ (8000bb8 <controlLED+0x10c>)
 8000afa:	f001 fb76 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000afe:	e057      	b.n	8000bb0 <controlLED+0x104>
        case 1:
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bf0c      	ite	eq
 8000b06:	2301      	moveq	r3, #1
 8000b08:	2300      	movne	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	2140      	movs	r1, #64	@ 0x40
 8000b10:	4829      	ldr	r0, [pc, #164]	@ (8000bb8 <controlLED+0x10c>)
 8000b12:	f001 fb6a 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000b16:	e04b      	b.n	8000bb0 <controlLED+0x104>
        case 2:
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bf0c      	ite	eq
 8000b1e:	2301      	moveq	r3, #1
 8000b20:	2300      	movne	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	4823      	ldr	r0, [pc, #140]	@ (8000bb8 <controlLED+0x10c>)
 8000b2a:	f001 fb5e 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000b2e:	e03f      	b.n	8000bb0 <controlLED+0x104>
        case 3:
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf0c      	ite	eq
 8000b36:	2301      	moveq	r3, #1
 8000b38:	2300      	movne	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	2101      	movs	r1, #1
 8000b40:	481e      	ldr	r0, [pc, #120]	@ (8000bbc <controlLED+0x110>)
 8000b42:	f001 fb52 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000b46:	e033      	b.n	8000bb0 <controlLED+0x104>
        case 4:
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2301      	moveq	r3, #1
 8000b50:	2300      	movne	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	2102      	movs	r1, #2
 8000b58:	4818      	ldr	r0, [pc, #96]	@ (8000bbc <controlLED+0x110>)
 8000b5a:	f001 fb46 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000b5e:	e027      	b.n	8000bb0 <controlLED+0x104>
        case 5:
            HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bf0c      	ite	eq
 8000b66:	2301      	moveq	r3, #1
 8000b68:	2300      	movne	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b72:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <controlLED+0x110>)
 8000b74:	f001 fb39 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000b78:	e01a      	b.n	8000bb0 <controlLED+0x104>
        case 6:
            HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	bf0c      	ite	eq
 8000b80:	2301      	moveq	r3, #1
 8000b82:	2300      	movne	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b8c:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <controlLED+0x110>)
 8000b8e:	f001 fb2c 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000b92:	e00d      	b.n	8000bb0 <controlLED+0x104>
        case 7:
            HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <controlLED+0x110>)
 8000ba8:	f001 fb1f 	bl	80021ea <HAL_GPIO_WritePin>
            break;
 8000bac:	e000      	b.n	8000bb0 <controlLED+0x104>
        default:
            // Không làm gì nếu chỉ số LED không hợp lệ
            break;
 8000bae:	bf00      	nop
    }
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <LED_status_update>:
void LED_status_update()
{
 8000bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc4:	b089      	sub	sp, #36	@ 0x24
 8000bc6:	af06      	add	r7, sp, #24
	memset(g_led_status,0,16);
 8000bc8:	2210      	movs	r2, #16
 8000bca:	2100      	movs	r1, #0
 8000bcc:	483e      	ldr	r0, [pc, #248]	@ (8000cc8 <LED_status_update+0x108>)
 8000bce:	f003 fe9b 	bl	8004908 <memset>
	sprintf(g_led_status,"%01d %01d %01d %01d %01d %01d %01d %01d",!HAL_GPIO_ReadPin(LED0_GPIO_Port, LED0_Pin),!HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin),!HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin),!HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin),!HAL_GPIO_ReadPin(LED4_GPIO_Port, LED4_Pin),!HAL_GPIO_ReadPin(LED5_GPIO_Port, LED5_Pin),!HAL_GPIO_ReadPin(LED6_GPIO_Port, LED6_Pin),!HAL_GPIO_ReadPin(LED7_GPIO_Port, LED7_Pin));
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	483d      	ldr	r0, [pc, #244]	@ (8000ccc <LED_status_update+0x10c>)
 8000bd6:	f001 faf1 	bl	80021bc <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf0c      	ite	eq
 8000be0:	2301      	moveq	r3, #1
 8000be2:	2300      	movne	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4698      	mov	r8, r3
 8000be8:	2140      	movs	r1, #64	@ 0x40
 8000bea:	4838      	ldr	r0, [pc, #224]	@ (8000ccc <LED_status_update+0x10c>)
 8000bec:	f001 fae6 	bl	80021bc <HAL_GPIO_ReadPin>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf0c      	ite	eq
 8000bf6:	2301      	moveq	r3, #1
 8000bf8:	2300      	movne	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4699      	mov	r9, r3
 8000bfe:	2180      	movs	r1, #128	@ 0x80
 8000c00:	4832      	ldr	r0, [pc, #200]	@ (8000ccc <LED_status_update+0x10c>)
 8000c02:	f001 fadb 	bl	80021bc <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	bf0c      	ite	eq
 8000c0c:	2301      	moveq	r3, #1
 8000c0e:	2300      	movne	r3, #0
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461c      	mov	r4, r3
 8000c14:	2101      	movs	r1, #1
 8000c16:	482e      	ldr	r0, [pc, #184]	@ (8000cd0 <LED_status_update+0x110>)
 8000c18:	f001 fad0 	bl	80021bc <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf0c      	ite	eq
 8000c22:	2301      	moveq	r3, #1
 8000c24:	2300      	movne	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461d      	mov	r5, r3
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4828      	ldr	r0, [pc, #160]	@ (8000cd0 <LED_status_update+0x110>)
 8000c2e:	f001 fac5 	bl	80021bc <HAL_GPIO_ReadPin>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	bf0c      	ite	eq
 8000c38:	2301      	moveq	r3, #1
 8000c3a:	2300      	movne	r3, #0
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	461e      	mov	r6, r3
 8000c40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c44:	4822      	ldr	r0, [pc, #136]	@ (8000cd0 <LED_status_update+0x110>)
 8000c46:	f001 fab9 	bl	80021bc <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c5c:	481c      	ldr	r0, [pc, #112]	@ (8000cd0 <LED_status_update+0x110>)
 8000c5e:	f001 faad 	bl	80021bc <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf0c      	ite	eq
 8000c68:	2301      	moveq	r3, #1
 8000c6a:	2300      	movne	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c74:	4816      	ldr	r0, [pc, #88]	@ (8000cd0 <LED_status_update+0x110>)
 8000c76:	f001 faa1 	bl	80021bc <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf0c      	ite	eq
 8000c80:	2301      	moveq	r3, #1
 8000c82:	2300      	movne	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	9305      	str	r3, [sp, #20]
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	9204      	str	r2, [sp, #16]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	9303      	str	r3, [sp, #12]
 8000c90:	9602      	str	r6, [sp, #8]
 8000c92:	9501      	str	r5, [sp, #4]
 8000c94:	9400      	str	r4, [sp, #0]
 8000c96:	464b      	mov	r3, r9
 8000c98:	4642      	mov	r2, r8
 8000c9a:	490e      	ldr	r1, [pc, #56]	@ (8000cd4 <LED_status_update+0x114>)
 8000c9c:	480a      	ldr	r0, [pc, #40]	@ (8000cc8 <LED_status_update+0x108>)
 8000c9e:	f003 fdf3 	bl	8004888 <siprintf>
	HAL_Delay(50);
 8000ca2:	2032      	movs	r0, #50	@ 0x32
 8000ca4:	f000 ff22 	bl	8001aec <HAL_Delay>
	HAL_UART_Transmit(&huart1, g_led_status,strlen(g_led_status),100);
 8000ca8:	4807      	ldr	r0, [pc, #28]	@ (8000cc8 <LED_status_update+0x108>)
 8000caa:	f7ff fa59 	bl	8000160 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	2364      	movs	r3, #100	@ 0x64
 8000cb4:	4904      	ldr	r1, [pc, #16]	@ (8000cc8 <LED_status_update+0x108>)
 8000cb6:	4808      	ldr	r0, [pc, #32]	@ (8000cd8 <LED_status_update+0x118>)
 8000cb8:	f002 ff44 	bl	8003b44 <HAL_UART_Transmit>
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000080 	.word	0x20000080
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	08005298 	.word	0x08005298
 8000cd8:	200001fc 	.word	0x200001fc

08000cdc <HAL_UART_RxCpltCallback>:
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	SCI1_rxdone=1;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_UART_RxCpltCallback+0x5c>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,(uint8_t*)&g_rx1_char,sizeof(g_rx1_char));
 8000cea:	2201      	movs	r2, #1
 8000cec:	4913      	ldr	r1, [pc, #76]	@ (8000d3c <HAL_UART_RxCpltCallback+0x60>)
 8000cee:	4814      	ldr	r0, [pc, #80]	@ (8000d40 <HAL_UART_RxCpltCallback+0x64>)
 8000cf0:	f002 ffb3 	bl	8003c5a <HAL_UART_Receive_IT>
		if(g_rx1_cnt < MAX_BUFFER_UART1)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <HAL_UART_RxCpltCallback+0x68>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8000cfc:	d80b      	bhi.n	8000d16 <HAL_UART_RxCpltCallback+0x3a>
		{
			g_rx1_buffer[g_rx1_cnt++] = g_rx1_char;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_UART_RxCpltCallback+0x68>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	b291      	uxth	r1, r2
 8000d06:	4a0f      	ldr	r2, [pc, #60]	@ (8000d44 <HAL_UART_RxCpltCallback+0x68>)
 8000d08:	8011      	strh	r1, [r2, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_UART_RxCpltCallback+0x60>)
 8000d0e:	7819      	ldrb	r1, [r3, #0]
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <HAL_UART_RxCpltCallback+0x6c>)
 8000d12:	5499      	strb	r1, [r3, r2]
 8000d14:	e008      	b.n	8000d28 <HAL_UART_RxCpltCallback+0x4c>
		}
		else{
			g_rx1_cnt = 0;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <HAL_UART_RxCpltCallback+0x68>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	801a      	strh	r2, [r3, #0]
			memset(g_rx1_buffer,0,sizeof(g_rx1_buffer));
 8000d1c:	f240 1209 	movw	r2, #265	@ 0x109
 8000d20:	2100      	movs	r1, #0
 8000d22:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <HAL_UART_RxCpltCallback+0x6c>)
 8000d24:	f003 fdf0 	bl	8004908 <memset>
		}
		cntTimeRev1 = RECV_END_TIMEOUT;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_UART_RxCpltCallback+0x70>)
 8000d2a:	221e      	movs	r2, #30
 8000d2c:	701a      	strb	r2, [r3, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000094 	.word	0x20000094
 8000d3c:	20000098 	.word	0x20000098
 8000d40:	200001fc 	.word	0x200001fc
 8000d44:	20000096 	.word	0x20000096
 8000d48:	2000009c 	.word	0x2000009c
 8000d4c:	20000099 	.word	0x20000099

08000d50 <vspfunc>:
	{"FRI"},
	{"SAT"},
};
uint8_t buffer[20];
int vspfunc(char *format, ...)
{
 8000d50:	b40f      	push	{r0, r1, r2, r3}
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0

   va_list aptr;
   int ret;
   va_start(aptr, format);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	603b      	str	r3, [r7, #0]
   ret = vsprintf((char*)buffer, format, aptr);
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	6939      	ldr	r1, [r7, #16]
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <vspfunc+0x2c>)
 8000d64:	f003 fdc6 	bl	80048f4 <vsiprintf>
 8000d68:	6078      	str	r0, [r7, #4]
   va_end(aptr);
   return(ret);
 8000d6a:	687b      	ldr	r3, [r7, #4]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d76:	b004      	add	sp, #16
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000244 	.word	0x20000244

08000d80 <display_lcd>:
void display_lcd()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af02      	add	r7, sp, #8
		  vspfunc("    %02d:%02d:%02d    ", time.hour , time.min, time.sec);
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <display_lcd+0x8c>)
 8000d88:	789b      	ldrb	r3, [r3, #2]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <display_lcd+0x8c>)
 8000d8e:	785b      	ldrb	r3, [r3, #1]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <display_lcd+0x8c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	481e      	ldr	r0, [pc, #120]	@ (8000e10 <display_lcd+0x90>)
 8000d98:	f7ff ffda 	bl	8000d50 <vspfunc>
		  lcd_put_cur( 0,0);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fc38 	bl	8000614 <lcd_put_cur>
		  lcd_send_string ((char*)buffer);
 8000da4:	481b      	ldr	r0, [pc, #108]	@ (8000e14 <display_lcd+0x94>)
 8000da6:	f7ff fc91 	bl	80006cc <lcd_send_string>
		  memset(buffer,0,20);
 8000daa:	2214      	movs	r2, #20
 8000dac:	2100      	movs	r1, #0
 8000dae:	4819      	ldr	r0, [pc, #100]	@ (8000e14 <display_lcd+0x94>)
 8000db0:	f003 fdaa 	bl	8004908 <memset>
		  lcd_put_cur( 1, 0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff fc2c 	bl	8000614 <lcd_put_cur>
		  uint8_t day_of_week = dayOfWeek(time.date,time.month,time.year);
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <display_lcd+0x8c>)
 8000dbe:	791b      	ldrb	r3, [r3, #4]
 8000dc0:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <display_lcd+0x8c>)
 8000dc2:	7951      	ldrb	r1, [r2, #5]
 8000dc4:	4a11      	ldr	r2, [pc, #68]	@ (8000e0c <display_lcd+0x8c>)
 8000dc6:	88d2      	ldrh	r2, [r2, #6]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fb27 	bl	800041c <dayOfWeek>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
		  vspfunc(" %s %02d/%02d/%04d ", arr_day[ day_of_week],time.date , time.month, time.year);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4a10      	ldr	r2, [pc, #64]	@ (8000e18 <display_lcd+0x98>)
 8000dd8:	1899      	adds	r1, r3, r2
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <display_lcd+0x8c>)
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <display_lcd+0x8c>)
 8000de2:	795b      	ldrb	r3, [r3, #5]
 8000de4:	4618      	mov	r0, r3
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <display_lcd+0x8c>)
 8000de8:	88db      	ldrh	r3, [r3, #6]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	4603      	mov	r3, r0
 8000dee:	480b      	ldr	r0, [pc, #44]	@ (8000e1c <display_lcd+0x9c>)
 8000df0:	f7ff ffae 	bl	8000d50 <vspfunc>
		  lcd_send_string ((char*)buffer);
 8000df4:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <display_lcd+0x94>)
 8000df6:	f7ff fc69 	bl	80006cc <lcd_send_string>
		  memset(buffer,0,20);
 8000dfa:	2214      	movs	r2, #20
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <display_lcd+0x94>)
 8000e00:	f003 fd82 	bl	8004908 <memset>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	080052c0 	.word	0x080052c0
 8000e14:	20000244 	.word	0x20000244
 8000e18:	08005374 	.word	0x08005374
 8000e1c:	080052d8 	.word	0x080052d8

08000e20 <time_update>:
void time_update()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	  static uint32_t time_update=0;
      if (HAL_GetTick()-time_update >=1000)
 8000e24:	f000 fe58 	bl	8001ad8 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <time_update+0x30>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e34:	d309      	bcc.n	8000e4a <time_update+0x2a>
	  {
    	  time_update = HAL_GetTick();
 8000e36:	f000 fe4f 	bl	8001ad8 <HAL_GetTick>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <time_update+0x30>)
 8000e3e:	6013      	str	r3, [r2, #0]
		  DS1307_gettime(&time);
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <time_update+0x34>)
 8000e42:	f7ff f9f1 	bl	8000228 <DS1307_gettime>
		  display_lcd();
 8000e46:	f7ff ff9b 	bl	8000d80 <display_lcd>
	  }
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000258 	.word	0x20000258
 8000e54:	20000000 	.word	0x20000000

08000e58 <led7seg>:
void led7seg()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	  static uint32_t count=0;
	  static uint8_t num=0;
      if (HAL_GetTick()-count >=1000)
 8000e5c:	f000 fe3c 	bl	8001ad8 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <led7seg+0x48>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e6c:	d316      	bcc.n	8000e9c <led7seg+0x44>
	  {
    	  count = HAL_GetTick();
 8000e6e:	f000 fe33 	bl	8001ad8 <HAL_GetTick>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <led7seg+0x48>)
 8000e76:	6013      	str	r3, [r2, #0]
		  display_digit(num);
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <led7seg+0x4c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc3b 	bl	80006f8 <display_digit>
		  num++;
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <led7seg+0x4c>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <led7seg+0x4c>)
 8000e8c:	701a      	strb	r2, [r3, #0]
		  if(num>9)
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <led7seg+0x4c>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b09      	cmp	r3, #9
 8000e94:	d902      	bls.n	8000e9c <led7seg+0x44>
			  {
			  	  num=0;
 8000e96:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <led7seg+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
			  }


	  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000025c 	.word	0x2000025c
 8000ea4:	20000260 	.word	0x20000260

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f000 fdbc 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f82c 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 f8c8 	bl	8001048 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eb8:	f000 f86e 	bl	8000f98 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ebc:	f000 f89a 	bl	8000ff4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)&g_rx1_char,1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	490f      	ldr	r1, [pc, #60]	@ (8000f00 <main+0x58>)
 8000ec4:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <main+0x5c>)
 8000ec6:	f002 fec8 	bl	8003c5a <HAL_UART_Receive_IT>
  HAL_Delay(1000);
 8000eca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ece:	f000 fe0d 	bl	8001aec <HAL_Delay>
  lcd_init ();
 8000ed2:	f7ff fbbe 	bl	8000652 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  led7seg();
 8000ed6:	f7ff ffbf 	bl	8000e58 <led7seg>
	  time_update();
 8000eda:	f7ff ffa1 	bl	8000e20 <time_update>
	  if(HAL_GetTick()-g_tick>UART_PERIOD)
 8000ede:	f000 fdfb 	bl	8001ad8 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <main+0x60>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d9f3      	bls.n	8000ed6 <main+0x2e>
	  	  		{
	  	  			Uart_Cmd_Handler();
 8000eee:	f000 fd59 	bl	80019a4 <Uart_Cmd_Handler>
	  	  			g_tick = HAL_GetTick();
 8000ef2:	f000 fdf1 	bl	8001ad8 <HAL_GetTick>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a03      	ldr	r2, [pc, #12]	@ (8000f08 <main+0x60>)
 8000efa:	6013      	str	r3, [r2, #0]
	  led7seg();
 8000efc:	e7eb      	b.n	8000ed6 <main+0x2e>
 8000efe:	bf00      	nop
 8000f00:	20000098 	.word	0x20000098
 8000f04:	200001fc 	.word	0x200001fc
 8000f08:	20000090 	.word	0x20000090

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b090      	sub	sp, #64	@ 0x40
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	2228      	movs	r2, #40	@ 0x28
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 fcf4 	bl	8004908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f4a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 f995 	bl	8003284 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f60:	f000 f8e0 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fc02 	bl	8003788 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f8a:	f000 f8cb 	bl	8001124 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3740      	adds	r7, #64	@ 0x40
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000f9e:	4a13      	ldr	r2, [pc, #76]	@ (8000fec <MX_I2C1_Init+0x54>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fa4:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <MX_I2C1_Init+0x58>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fd6:	f001 f921 	bl	800221c <HAL_I2C_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe0:	f000 f8a0 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001a8 	.word	0x200001a8
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	000186a0 	.word	0x000186a0

08000ff4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MX_USART1_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <MX_USART1_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <MX_USART1_UART_Init+0x4c>)
 8001000:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001004:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <MX_USART1_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_USART1_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <MX_USART1_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <MX_USART1_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <MX_USART1_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <MX_USART1_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_USART1_UART_Init+0x4c>)
 800102c:	f002 fd3a 	bl	8003aa4 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 f875 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001fc 	.word	0x200001fc
 8001044:	40013800 	.word	0x40013800

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105c:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <MX_GPIO_Init+0xd0>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a2d      	ldr	r2, [pc, #180]	@ (8001118 <MX_GPIO_Init+0xd0>)
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b2b      	ldr	r3, [pc, #172]	@ (8001118 <MX_GPIO_Init+0xd0>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <MX_GPIO_Init+0xd0>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <MX_GPIO_Init+0xd0>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <MX_GPIO_Init+0xd0>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <MX_GPIO_Init+0xd0>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a21      	ldr	r2, [pc, #132]	@ (8001118 <MX_GPIO_Init+0xd0>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_GPIO_Init+0xd0>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VCC_Pin|LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	21e2      	movs	r1, #226	@ 0xe2
 80010a8:	481c      	ldr	r0, [pc, #112]	@ (800111c <MX_GPIO_Init+0xd4>)
 80010aa:	f001 f89e 	bl	80021ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GND_Pin|B_Pin|A_Pin|F_Pin
 80010ae:	2200      	movs	r2, #0
 80010b0:	f641 6104 	movw	r1, #7684	@ 0x1e04
 80010b4:	4819      	ldr	r0, [pc, #100]	@ (800111c <MX_GPIO_Init+0xd4>)
 80010b6:	f001 f898 	bl	80021ea <HAL_GPIO_WritePin>
                          |G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin
 80010ba:	2201      	movs	r2, #1
 80010bc:	f641 4103 	movw	r1, #7171	@ 0x1c03
 80010c0:	4817      	ldr	r0, [pc, #92]	@ (8001120 <MX_GPIO_Init+0xd8>)
 80010c2:	f001 f892 	bl	80021ea <HAL_GPIO_WritePin>
                          |LED7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Pin|D_Pin|C_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80010cc:	4814      	ldr	r0, [pc, #80]	@ (8001120 <MX_GPIO_Init+0xd8>)
 80010ce:	f001 f88c 	bl	80021ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VCC_Pin GND_Pin LED0_Pin LED1_Pin
                           LED2_Pin B_Pin A_Pin F_Pin
                           G_Pin */
  GPIO_InitStruct.Pin = VCC_Pin|GND_Pin|LED0_Pin|LED1_Pin
 80010d2:	f641 63e6 	movw	r3, #7910	@ 0x1ee6
 80010d6:	613b      	str	r3, [r7, #16]
                          |LED2_Pin|B_Pin|A_Pin|F_Pin
                          |G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	480c      	ldr	r0, [pc, #48]	@ (800111c <MX_GPIO_Init+0xd4>)
 80010ec:	f000 fee2 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin LED6_Pin
                           LED7_Pin E_Pin D_Pin C_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin
 80010f0:	f64f 4303 	movw	r3, #64515	@ 0xfc03
 80010f4:	613b      	str	r3, [r7, #16]
                          |LED7_Pin|E_Pin|D_Pin|C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2302      	movs	r3, #2
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_GPIO_Init+0xd8>)
 800110a:	f000 fed3 	bl	8001eb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	40010800 	.word	0x40010800
 8001120:	40010c00 	.word	0x40010c00

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <Error_Handler+0x8>

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <HAL_MspInit+0x5c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_MspInit+0x5c>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <HAL_MspInit+0x5c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <HAL_MspInit+0x5c>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_MspInit+0x60>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <HAL_MspInit+0x60>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000

08001194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <HAL_I2C_MspInit+0x90>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d132      	bne.n	800121a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d2:	2312      	movs	r3, #18
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4812      	ldr	r0, [pc, #72]	@ (800122c <HAL_I2C_MspInit+0x98>)
 80011e2:	f000 fe67 	bl	8001eb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011e6:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_I2C_MspInit+0x9c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ee:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80011fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001230 <HAL_I2C_MspInit+0x9c>)
 80011fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001200:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 8001208:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_I2C_MspInit+0x94>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40005400 	.word	0x40005400
 8001228:	40021000 	.word	0x40021000
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40010000 	.word	0x40010000

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a26      	ldr	r2, [pc, #152]	@ (80012e8 <HAL_UART_MspInit+0xb4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d145      	bne.n	80012e0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <HAL_UART_MspInit+0xb8>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a24      	ldr	r2, [pc, #144]	@ (80012ec <HAL_UART_MspInit+0xb8>)
 800125a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <HAL_UART_MspInit+0xb8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_UART_MspInit+0xb8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <HAL_UART_MspInit+0xb8>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <HAL_UART_MspInit+0xb8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001284:	2340      	movs	r3, #64	@ 0x40
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4816      	ldr	r0, [pc, #88]	@ (80012f0 <HAL_UART_MspInit+0xbc>)
 8001298:	f000 fe0c 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4810      	ldr	r0, [pc, #64]	@ (80012f0 <HAL_UART_MspInit+0xbc>)
 80012b0:	f000 fe00 	bl	8001eb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <HAL_UART_MspInit+0xc0>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_UART_MspInit+0xc0>)
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2025      	movs	r0, #37	@ 0x25
 80012d6:	f000 fd04 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012da:	2025      	movs	r0, #37	@ 0x25
 80012dc:	f000 fd1d 	bl	8001d1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	40010000 	.word	0x40010000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <MemManage_Handler+0x4>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <UsageFault_Handler+0x4>

08001320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f000 fbb4 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <USART1_IRQHandler+0x10>)
 8001356:	f002 fca5 	bl	8003ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001fc 	.word	0x200001fc

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f003 fad2 	bl	800493c <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20005000 	.word	0x20005000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	20000264 	.word	0x20000264
 80013cc:	200003b8 	.word	0x200003b8

080013d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <UART1_IsDoneFrame>:
extern char g_rx1_buffer[MAX_BUFFER_UART1];
extern DS1307_STRUCT time;
extern char g_led_status[16];
extern UART_HandleTypeDef huart1;
bool UART1_IsDoneFrame(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	if(cntTimeRev1>0)
 80013e0:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <UART1_IsDoneFrame+0x30>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <UART1_IsDoneFrame+0x24>
	{
		cntTimeRev1--;
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <UART1_IsDoneFrame+0x30>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <UART1_IsDoneFrame+0x30>)
 80013f2:	701a      	strb	r2, [r3, #0]
		if(cntTimeRev1 == 0)
 80013f4:	4b05      	ldr	r3, [pc, #20]	@ (800140c <UART1_IsDoneFrame+0x30>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <UART1_IsDoneFrame+0x24>
		{
			return true;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <UART1_IsDoneFrame+0x26>
		}
	}
	return false;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000099 	.word	0x20000099

08001410 <GeneralCmd>:

void GeneralCmd()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	for(uint16_t i=0;i< g_rx1_cnt;i++)
 8001416:	2300      	movs	r3, #0
 8001418:	80fb      	strh	r3, [r7, #6]
 800141a:	e2a3      	b.n	8001964 <GeneralCmd+0x554>
		{

		if(strncmp(g_rx1_buffer+i,"c:do0:",6)==0)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4aaf      	ldr	r2, [pc, #700]	@ (80016dc <GeneralCmd+0x2cc>)
 8001420:	4413      	add	r3, r2
 8001422:	2206      	movs	r2, #6
 8001424:	49ae      	ldr	r1, [pc, #696]	@ (80016e0 <GeneralCmd+0x2d0>)
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fa76 	bl	8004918 <strncmp>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d120      	bne.n	8001474 <GeneralCmd+0x64>
				{

					if(strcmp(g_rx1_buffer+i+6,"0")==0)
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	3306      	adds	r3, #6
 8001436:	4aa9      	ldr	r2, [pc, #676]	@ (80016dc <GeneralCmd+0x2cc>)
 8001438:	4413      	add	r3, r2
 800143a:	49aa      	ldr	r1, [pc, #680]	@ (80016e4 <GeneralCmd+0x2d4>)
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fe85 	bl	800014c <strcmp>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d104      	bne.n	8001452 <GeneralCmd+0x42>
					{
						controlLED(0, 0);
 8001448:	2100      	movs	r1, #0
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fb2e 	bl	8000aac <controlLED>
 8001450:	e285      	b.n	800195e <GeneralCmd+0x54e>
					}
					else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	3306      	adds	r3, #6
 8001456:	4aa1      	ldr	r2, [pc, #644]	@ (80016dc <GeneralCmd+0x2cc>)
 8001458:	4413      	add	r3, r2
 800145a:	49a3      	ldr	r1, [pc, #652]	@ (80016e8 <GeneralCmd+0x2d8>)
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe fe75 	bl	800014c <strcmp>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	f040 827a 	bne.w	800195e <GeneralCmd+0x54e>
					{
						controlLED(0, 1);
 800146a:	2101      	movs	r1, #1
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff fb1d 	bl	8000aac <controlLED>
 8001472:	e274      	b.n	800195e <GeneralCmd+0x54e>
					}
				}
		else if(strncmp(g_rx1_buffer+i,"c:do1:",6)==0)
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4a99      	ldr	r2, [pc, #612]	@ (80016dc <GeneralCmd+0x2cc>)
 8001478:	4413      	add	r3, r2
 800147a:	2206      	movs	r2, #6
 800147c:	499b      	ldr	r1, [pc, #620]	@ (80016ec <GeneralCmd+0x2dc>)
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fa4a 	bl	8004918 <strncmp>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d120      	bne.n	80014cc <GeneralCmd+0xbc>
						{

							if(strcmp(g_rx1_buffer+i+6,"0")==0)
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	3306      	adds	r3, #6
 800148e:	4a93      	ldr	r2, [pc, #588]	@ (80016dc <GeneralCmd+0x2cc>)
 8001490:	4413      	add	r3, r2
 8001492:	4994      	ldr	r1, [pc, #592]	@ (80016e4 <GeneralCmd+0x2d4>)
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe fe59 	bl	800014c <strcmp>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d104      	bne.n	80014aa <GeneralCmd+0x9a>
							{
								controlLED(1, 0);
 80014a0:	2100      	movs	r1, #0
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff fb02 	bl	8000aac <controlLED>
 80014a8:	e259      	b.n	800195e <GeneralCmd+0x54e>
							}
							else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	3306      	adds	r3, #6
 80014ae:	4a8b      	ldr	r2, [pc, #556]	@ (80016dc <GeneralCmd+0x2cc>)
 80014b0:	4413      	add	r3, r2
 80014b2:	498d      	ldr	r1, [pc, #564]	@ (80016e8 <GeneralCmd+0x2d8>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe fe49 	bl	800014c <strcmp>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f040 824e 	bne.w	800195e <GeneralCmd+0x54e>
							{
								controlLED(1, 1);
 80014c2:	2101      	movs	r1, #1
 80014c4:	2001      	movs	r0, #1
 80014c6:	f7ff faf1 	bl	8000aac <controlLED>
 80014ca:	e248      	b.n	800195e <GeneralCmd+0x54e>
							}
						}
		else if(strncmp(g_rx1_buffer+i,"c:do2:",6)==0)
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4a83      	ldr	r2, [pc, #524]	@ (80016dc <GeneralCmd+0x2cc>)
 80014d0:	4413      	add	r3, r2
 80014d2:	2206      	movs	r2, #6
 80014d4:	4986      	ldr	r1, [pc, #536]	@ (80016f0 <GeneralCmd+0x2e0>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 fa1e 	bl	8004918 <strncmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d120      	bne.n	8001524 <GeneralCmd+0x114>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	3306      	adds	r3, #6
 80014e6:	4a7d      	ldr	r2, [pc, #500]	@ (80016dc <GeneralCmd+0x2cc>)
 80014e8:	4413      	add	r3, r2
 80014ea:	497e      	ldr	r1, [pc, #504]	@ (80016e4 <GeneralCmd+0x2d4>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fe2d 	bl	800014c <strcmp>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d104      	bne.n	8001502 <GeneralCmd+0xf2>
									{
										controlLED(2, 0);
 80014f8:	2100      	movs	r1, #0
 80014fa:	2002      	movs	r0, #2
 80014fc:	f7ff fad6 	bl	8000aac <controlLED>
 8001500:	e22d      	b.n	800195e <GeneralCmd+0x54e>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	3306      	adds	r3, #6
 8001506:	4a75      	ldr	r2, [pc, #468]	@ (80016dc <GeneralCmd+0x2cc>)
 8001508:	4413      	add	r3, r2
 800150a:	4977      	ldr	r1, [pc, #476]	@ (80016e8 <GeneralCmd+0x2d8>)
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fe1d 	bl	800014c <strcmp>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 8222 	bne.w	800195e <GeneralCmd+0x54e>
									{
										controlLED(2, 1);
 800151a:	2101      	movs	r1, #1
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff fac5 	bl	8000aac <controlLED>
 8001522:	e21c      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do3:",6)==0)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	4a6d      	ldr	r2, [pc, #436]	@ (80016dc <GeneralCmd+0x2cc>)
 8001528:	4413      	add	r3, r2
 800152a:	2206      	movs	r2, #6
 800152c:	4971      	ldr	r1, [pc, #452]	@ (80016f4 <GeneralCmd+0x2e4>)
 800152e:	4618      	mov	r0, r3
 8001530:	f003 f9f2 	bl	8004918 <strncmp>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d120      	bne.n	800157c <GeneralCmd+0x16c>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	3306      	adds	r3, #6
 800153e:	4a67      	ldr	r2, [pc, #412]	@ (80016dc <GeneralCmd+0x2cc>)
 8001540:	4413      	add	r3, r2
 8001542:	4968      	ldr	r1, [pc, #416]	@ (80016e4 <GeneralCmd+0x2d4>)
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe01 	bl	800014c <strcmp>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d104      	bne.n	800155a <GeneralCmd+0x14a>
									{
										controlLED(3, 0);
 8001550:	2100      	movs	r1, #0
 8001552:	2003      	movs	r0, #3
 8001554:	f7ff faaa 	bl	8000aac <controlLED>
 8001558:	e201      	b.n	800195e <GeneralCmd+0x54e>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	3306      	adds	r3, #6
 800155e:	4a5f      	ldr	r2, [pc, #380]	@ (80016dc <GeneralCmd+0x2cc>)
 8001560:	4413      	add	r3, r2
 8001562:	4961      	ldr	r1, [pc, #388]	@ (80016e8 <GeneralCmd+0x2d8>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fdf1 	bl	800014c <strcmp>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 81f6 	bne.w	800195e <GeneralCmd+0x54e>
									{
										controlLED(3, 1);
 8001572:	2101      	movs	r1, #1
 8001574:	2003      	movs	r0, #3
 8001576:	f7ff fa99 	bl	8000aac <controlLED>
 800157a:	e1f0      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do4:",6)==0)
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	4a57      	ldr	r2, [pc, #348]	@ (80016dc <GeneralCmd+0x2cc>)
 8001580:	4413      	add	r3, r2
 8001582:	2206      	movs	r2, #6
 8001584:	495c      	ldr	r1, [pc, #368]	@ (80016f8 <GeneralCmd+0x2e8>)
 8001586:	4618      	mov	r0, r3
 8001588:	f003 f9c6 	bl	8004918 <strncmp>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d120      	bne.n	80015d4 <GeneralCmd+0x1c4>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	3306      	adds	r3, #6
 8001596:	4a51      	ldr	r2, [pc, #324]	@ (80016dc <GeneralCmd+0x2cc>)
 8001598:	4413      	add	r3, r2
 800159a:	4952      	ldr	r1, [pc, #328]	@ (80016e4 <GeneralCmd+0x2d4>)
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fdd5 	bl	800014c <strcmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <GeneralCmd+0x1a2>
									{
										controlLED(4, 0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2004      	movs	r0, #4
 80015ac:	f7ff fa7e 	bl	8000aac <controlLED>
 80015b0:	e1d5      	b.n	800195e <GeneralCmd+0x54e>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	3306      	adds	r3, #6
 80015b6:	4a49      	ldr	r2, [pc, #292]	@ (80016dc <GeneralCmd+0x2cc>)
 80015b8:	4413      	add	r3, r2
 80015ba:	494b      	ldr	r1, [pc, #300]	@ (80016e8 <GeneralCmd+0x2d8>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fdc5 	bl	800014c <strcmp>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f040 81ca 	bne.w	800195e <GeneralCmd+0x54e>
									{
										controlLED(4, 1);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2004      	movs	r0, #4
 80015ce:	f7ff fa6d 	bl	8000aac <controlLED>
 80015d2:	e1c4      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do5:",6)==0)
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4a41      	ldr	r2, [pc, #260]	@ (80016dc <GeneralCmd+0x2cc>)
 80015d8:	4413      	add	r3, r2
 80015da:	2206      	movs	r2, #6
 80015dc:	4947      	ldr	r1, [pc, #284]	@ (80016fc <GeneralCmd+0x2ec>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 f99a 	bl	8004918 <strncmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d120      	bne.n	800162c <GeneralCmd+0x21c>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	3306      	adds	r3, #6
 80015ee:	4a3b      	ldr	r2, [pc, #236]	@ (80016dc <GeneralCmd+0x2cc>)
 80015f0:	4413      	add	r3, r2
 80015f2:	493c      	ldr	r1, [pc, #240]	@ (80016e4 <GeneralCmd+0x2d4>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe fda9 	bl	800014c <strcmp>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d104      	bne.n	800160a <GeneralCmd+0x1fa>
									{
										controlLED(5, 0);
 8001600:	2100      	movs	r1, #0
 8001602:	2005      	movs	r0, #5
 8001604:	f7ff fa52 	bl	8000aac <controlLED>
 8001608:	e1a9      	b.n	800195e <GeneralCmd+0x54e>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	3306      	adds	r3, #6
 800160e:	4a33      	ldr	r2, [pc, #204]	@ (80016dc <GeneralCmd+0x2cc>)
 8001610:	4413      	add	r3, r2
 8001612:	4935      	ldr	r1, [pc, #212]	@ (80016e8 <GeneralCmd+0x2d8>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe fd99 	bl	800014c <strcmp>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 819e 	bne.w	800195e <GeneralCmd+0x54e>
									{
										controlLED(5, 1);
 8001622:	2101      	movs	r1, #1
 8001624:	2005      	movs	r0, #5
 8001626:	f7ff fa41 	bl	8000aac <controlLED>
 800162a:	e198      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do6:",6)==0)
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4a2b      	ldr	r2, [pc, #172]	@ (80016dc <GeneralCmd+0x2cc>)
 8001630:	4413      	add	r3, r2
 8001632:	2206      	movs	r2, #6
 8001634:	4932      	ldr	r1, [pc, #200]	@ (8001700 <GeneralCmd+0x2f0>)
 8001636:	4618      	mov	r0, r3
 8001638:	f003 f96e 	bl	8004918 <strncmp>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d120      	bne.n	8001684 <GeneralCmd+0x274>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	3306      	adds	r3, #6
 8001646:	4a25      	ldr	r2, [pc, #148]	@ (80016dc <GeneralCmd+0x2cc>)
 8001648:	4413      	add	r3, r2
 800164a:	4926      	ldr	r1, [pc, #152]	@ (80016e4 <GeneralCmd+0x2d4>)
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fd7d 	bl	800014c <strcmp>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d104      	bne.n	8001662 <GeneralCmd+0x252>
									{
										controlLED(6, 0);
 8001658:	2100      	movs	r1, #0
 800165a:	2006      	movs	r0, #6
 800165c:	f7ff fa26 	bl	8000aac <controlLED>
 8001660:	e17d      	b.n	800195e <GeneralCmd+0x54e>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	3306      	adds	r3, #6
 8001666:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <GeneralCmd+0x2cc>)
 8001668:	4413      	add	r3, r2
 800166a:	491f      	ldr	r1, [pc, #124]	@ (80016e8 <GeneralCmd+0x2d8>)
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fd6d 	bl	800014c <strcmp>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	f040 8172 	bne.w	800195e <GeneralCmd+0x54e>
									{
										controlLED(6, 1);
 800167a:	2101      	movs	r1, #1
 800167c:	2006      	movs	r0, #6
 800167e:	f7ff fa15 	bl	8000aac <controlLED>
 8001682:	e16c      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do7:",6)==0)
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <GeneralCmd+0x2cc>)
 8001688:	4413      	add	r3, r2
 800168a:	2206      	movs	r2, #6
 800168c:	491d      	ldr	r1, [pc, #116]	@ (8001704 <GeneralCmd+0x2f4>)
 800168e:	4618      	mov	r0, r3
 8001690:	f003 f942 	bl	8004918 <strncmp>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d136      	bne.n	8001708 <GeneralCmd+0x2f8>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	3306      	adds	r3, #6
 800169e:	4a0f      	ldr	r2, [pc, #60]	@ (80016dc <GeneralCmd+0x2cc>)
 80016a0:	4413      	add	r3, r2
 80016a2:	4910      	ldr	r1, [pc, #64]	@ (80016e4 <GeneralCmd+0x2d4>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fd51 	bl	800014c <strcmp>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d104      	bne.n	80016ba <GeneralCmd+0x2aa>
									{
										controlLED(7, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	2007      	movs	r0, #7
 80016b4:	f7ff f9fa 	bl	8000aac <controlLED>
 80016b8:	e151      	b.n	800195e <GeneralCmd+0x54e>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	3306      	adds	r3, #6
 80016be:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <GeneralCmd+0x2cc>)
 80016c0:	4413      	add	r3, r2
 80016c2:	4909      	ldr	r1, [pc, #36]	@ (80016e8 <GeneralCmd+0x2d8>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fd41 	bl	800014c <strcmp>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 8146 	bne.w	800195e <GeneralCmd+0x54e>
									{
										controlLED(7, 1);
 80016d2:	2101      	movs	r1, #1
 80016d4:	2007      	movs	r0, #7
 80016d6:	f7ff f9e9 	bl	8000aac <controlLED>
 80016da:	e140      	b.n	800195e <GeneralCmd+0x54e>
 80016dc:	2000009c 	.word	0x2000009c
 80016e0:	080052ec 	.word	0x080052ec
 80016e4:	080052f4 	.word	0x080052f4
 80016e8:	080052f8 	.word	0x080052f8
 80016ec:	080052fc 	.word	0x080052fc
 80016f0:	08005304 	.word	0x08005304
 80016f4:	0800530c 	.word	0x0800530c
 80016f8:	08005314 	.word	0x08005314
 80016fc:	0800531c 	.word	0x0800531c
 8001700:	08005324 	.word	0x08005324
 8001704:	0800532c 	.word	0x0800532c
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:year:",7)==0)
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	4a9c      	ldr	r2, [pc, #624]	@ (800197c <GeneralCmd+0x56c>)
 800170c:	4413      	add	r3, r2
 800170e:	2207      	movs	r2, #7
 8001710:	499b      	ldr	r1, [pc, #620]	@ (8001980 <GeneralCmd+0x570>)
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f900 	bl	8004918 <strncmp>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d127      	bne.n	800176e <GeneralCmd+0x35e>
								{

									if(atoi(g_rx1_buffer+i+7)>2000 && atoi(g_rx1_buffer+i+7) <3000)
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	3307      	adds	r3, #7
 8001722:	4a96      	ldr	r2, [pc, #600]	@ (800197c <GeneralCmd+0x56c>)
 8001724:	4413      	add	r3, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f003 f826 	bl	8004778 <atoi>
 800172c:	4603      	mov	r3, r0
 800172e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001732:	f340 8114 	ble.w	800195e <GeneralCmd+0x54e>
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	3307      	adds	r3, #7
 800173a:	4a90      	ldr	r2, [pc, #576]	@ (800197c <GeneralCmd+0x56c>)
 800173c:	4413      	add	r3, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f003 f81a 	bl	8004778 <atoi>
 8001744:	4603      	mov	r3, r0
 8001746:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800174a:	4293      	cmp	r3, r2
 800174c:	f300 8107 	bgt.w	800195e <GeneralCmd+0x54e>
									{
										time.year = atoi(g_rx1_buffer+i+7);
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	3307      	adds	r3, #7
 8001754:	4a89      	ldr	r2, [pc, #548]	@ (800197c <GeneralCmd+0x56c>)
 8001756:	4413      	add	r3, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f003 f80d 	bl	8004778 <atoi>
 800175e:	4603      	mov	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b88      	ldr	r3, [pc, #544]	@ (8001984 <GeneralCmd+0x574>)
 8001764:	80da      	strh	r2, [r3, #6]
										DS1307_settime(&time);
 8001766:	4887      	ldr	r0, [pc, #540]	@ (8001984 <GeneralCmd+0x574>)
 8001768:	f7fe fdea 	bl	8000340 <DS1307_settime>
 800176c:	e0f7      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:month:",8)==0)
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	4a82      	ldr	r2, [pc, #520]	@ (800197c <GeneralCmd+0x56c>)
 8001772:	4413      	add	r3, r2
 8001774:	2208      	movs	r2, #8
 8001776:	4984      	ldr	r1, [pc, #528]	@ (8001988 <GeneralCmd+0x578>)
 8001778:	4618      	mov	r0, r3
 800177a:	f003 f8cd 	bl	8004918 <strncmp>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d124      	bne.n	80017ce <GeneralCmd+0x3be>
								{

									if(atoi(g_rx1_buffer+i+8)>=1 && atoi(g_rx1_buffer+i+8) <=12)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	3308      	adds	r3, #8
 8001788:	4a7c      	ldr	r2, [pc, #496]	@ (800197c <GeneralCmd+0x56c>)
 800178a:	4413      	add	r3, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f002 fff3 	bl	8004778 <atoi>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	f340 80e2 	ble.w	800195e <GeneralCmd+0x54e>
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	3308      	adds	r3, #8
 800179e:	4a77      	ldr	r2, [pc, #476]	@ (800197c <GeneralCmd+0x56c>)
 80017a0:	4413      	add	r3, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 ffe8 	bl	8004778 <atoi>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	f300 80d7 	bgt.w	800195e <GeneralCmd+0x54e>
									{
										time.month = atoi(g_rx1_buffer+i+8);
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	3308      	adds	r3, #8
 80017b4:	4a71      	ldr	r2, [pc, #452]	@ (800197c <GeneralCmd+0x56c>)
 80017b6:	4413      	add	r3, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 ffdd 	bl	8004778 <atoi>
 80017be:	4603      	mov	r3, r0
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b70      	ldr	r3, [pc, #448]	@ (8001984 <GeneralCmd+0x574>)
 80017c4:	715a      	strb	r2, [r3, #5]
										DS1307_settime(&time);
 80017c6:	486f      	ldr	r0, [pc, #444]	@ (8001984 <GeneralCmd+0x574>)
 80017c8:	f7fe fdba 	bl	8000340 <DS1307_settime>
 80017cc:	e0c7      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:date:",7)==0)
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4a6a      	ldr	r2, [pc, #424]	@ (800197c <GeneralCmd+0x56c>)
 80017d2:	4413      	add	r3, r2
 80017d4:	2207      	movs	r2, #7
 80017d6:	496d      	ldr	r1, [pc, #436]	@ (800198c <GeneralCmd+0x57c>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 f89d 	bl	8004918 <strncmp>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d124      	bne.n	800182e <GeneralCmd+0x41e>
								{

									if(atoi(g_rx1_buffer+i+7)>=1 && atoi(g_rx1_buffer+i+7) <=31)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	3307      	adds	r3, #7
 80017e8:	4a64      	ldr	r2, [pc, #400]	@ (800197c <GeneralCmd+0x56c>)
 80017ea:	4413      	add	r3, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 ffc3 	bl	8004778 <atoi>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f340 80b2 	ble.w	800195e <GeneralCmd+0x54e>
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	3307      	adds	r3, #7
 80017fe:	4a5f      	ldr	r2, [pc, #380]	@ (800197c <GeneralCmd+0x56c>)
 8001800:	4413      	add	r3, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f002 ffb8 	bl	8004778 <atoi>
 8001808:	4603      	mov	r3, r0
 800180a:	2b1f      	cmp	r3, #31
 800180c:	f300 80a7 	bgt.w	800195e <GeneralCmd+0x54e>
									{
										time.date = atoi(g_rx1_buffer+i+7);
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	3307      	adds	r3, #7
 8001814:	4a59      	ldr	r2, [pc, #356]	@ (800197c <GeneralCmd+0x56c>)
 8001816:	4413      	add	r3, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f002 ffad 	bl	8004778 <atoi>
 800181e:	4603      	mov	r3, r0
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b58      	ldr	r3, [pc, #352]	@ (8001984 <GeneralCmd+0x574>)
 8001824:	711a      	strb	r2, [r3, #4]
										DS1307_settime(&time);
 8001826:	4857      	ldr	r0, [pc, #348]	@ (8001984 <GeneralCmd+0x574>)
 8001828:	f7fe fd8a 	bl	8000340 <DS1307_settime>
 800182c:	e097      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:hour:",7)==0)
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	4a52      	ldr	r2, [pc, #328]	@ (800197c <GeneralCmd+0x56c>)
 8001832:	4413      	add	r3, r2
 8001834:	2207      	movs	r2, #7
 8001836:	4956      	ldr	r1, [pc, #344]	@ (8001990 <GeneralCmd+0x580>)
 8001838:	4618      	mov	r0, r3
 800183a:	f003 f86d 	bl	8004918 <strncmp>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d123      	bne.n	800188c <GeneralCmd+0x47c>
								{

									if(atoi(g_rx1_buffer+i+7)>=0 && atoi(g_rx1_buffer+i+7) <=24)
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	3307      	adds	r3, #7
 8001848:	4a4c      	ldr	r2, [pc, #304]	@ (800197c <GeneralCmd+0x56c>)
 800184a:	4413      	add	r3, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f002 ff93 	bl	8004778 <atoi>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	f2c0 8082 	blt.w	800195e <GeneralCmd+0x54e>
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	3307      	adds	r3, #7
 800185e:	4a47      	ldr	r2, [pc, #284]	@ (800197c <GeneralCmd+0x56c>)
 8001860:	4413      	add	r3, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f002 ff88 	bl	8004778 <atoi>
 8001868:	4603      	mov	r3, r0
 800186a:	2b18      	cmp	r3, #24
 800186c:	dc77      	bgt.n	800195e <GeneralCmd+0x54e>
									{
										time.hour = atoi(g_rx1_buffer+i+7);
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	3307      	adds	r3, #7
 8001872:	4a42      	ldr	r2, [pc, #264]	@ (800197c <GeneralCmd+0x56c>)
 8001874:	4413      	add	r3, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f002 ff7e 	bl	8004778 <atoi>
 800187c:	4603      	mov	r3, r0
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b40      	ldr	r3, [pc, #256]	@ (8001984 <GeneralCmd+0x574>)
 8001882:	709a      	strb	r2, [r3, #2]
										DS1307_settime(&time);
 8001884:	483f      	ldr	r0, [pc, #252]	@ (8001984 <GeneralCmd+0x574>)
 8001886:	f7fe fd5b 	bl	8000340 <DS1307_settime>
 800188a:	e068      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:min:",6)==0)
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4a3b      	ldr	r2, [pc, #236]	@ (800197c <GeneralCmd+0x56c>)
 8001890:	4413      	add	r3, r2
 8001892:	2206      	movs	r2, #6
 8001894:	493f      	ldr	r1, [pc, #252]	@ (8001994 <GeneralCmd+0x584>)
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f83e 	bl	8004918 <strncmp>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d122      	bne.n	80018e8 <GeneralCmd+0x4d8>
								{

									if(atoi(g_rx1_buffer+i+6)>=0 && atoi(g_rx1_buffer+i+6) <=59)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	3306      	adds	r3, #6
 80018a6:	4a35      	ldr	r2, [pc, #212]	@ (800197c <GeneralCmd+0x56c>)
 80018a8:	4413      	add	r3, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 ff64 	bl	8004778 <atoi>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db53      	blt.n	800195e <GeneralCmd+0x54e>
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	3306      	adds	r3, #6
 80018ba:	4a30      	ldr	r2, [pc, #192]	@ (800197c <GeneralCmd+0x56c>)
 80018bc:	4413      	add	r3, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 ff5a 	bl	8004778 <atoi>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80018c8:	dc49      	bgt.n	800195e <GeneralCmd+0x54e>
									{
										time.min = atoi(g_rx1_buffer+i+6);
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	3306      	adds	r3, #6
 80018ce:	4a2b      	ldr	r2, [pc, #172]	@ (800197c <GeneralCmd+0x56c>)
 80018d0:	4413      	add	r3, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 ff50 	bl	8004778 <atoi>
 80018d8:	4603      	mov	r3, r0
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <GeneralCmd+0x574>)
 80018de:	705a      	strb	r2, [r3, #1]
										DS1307_settime(&time);
 80018e0:	4828      	ldr	r0, [pc, #160]	@ (8001984 <GeneralCmd+0x574>)
 80018e2:	f7fe fd2d 	bl	8000340 <DS1307_settime>
 80018e6:	e03a      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:sec:",6)==0)
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	4a24      	ldr	r2, [pc, #144]	@ (800197c <GeneralCmd+0x56c>)
 80018ec:	4413      	add	r3, r2
 80018ee:	2206      	movs	r2, #6
 80018f0:	4929      	ldr	r1, [pc, #164]	@ (8001998 <GeneralCmd+0x588>)
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 f810 	bl	8004918 <strncmp>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d122      	bne.n	8001944 <GeneralCmd+0x534>
								{

									if(atoi(g_rx1_buffer+i+6)>=0 && atoi(g_rx1_buffer+i+6) <=59)
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	3306      	adds	r3, #6
 8001902:	4a1e      	ldr	r2, [pc, #120]	@ (800197c <GeneralCmd+0x56c>)
 8001904:	4413      	add	r3, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f002 ff36 	bl	8004778 <atoi>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	db25      	blt.n	800195e <GeneralCmd+0x54e>
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	3306      	adds	r3, #6
 8001916:	4a19      	ldr	r2, [pc, #100]	@ (800197c <GeneralCmd+0x56c>)
 8001918:	4413      	add	r3, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f002 ff2c 	bl	8004778 <atoi>
 8001920:	4603      	mov	r3, r0
 8001922:	2b3b      	cmp	r3, #59	@ 0x3b
 8001924:	dc1b      	bgt.n	800195e <GeneralCmd+0x54e>
									{
										time.sec = atoi(g_rx1_buffer+i+6);
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	3306      	adds	r3, #6
 800192a:	4a14      	ldr	r2, [pc, #80]	@ (800197c <GeneralCmd+0x56c>)
 800192c:	4413      	add	r3, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f002 ff22 	bl	8004778 <atoi>
 8001934:	4603      	mov	r3, r0
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <GeneralCmd+0x574>)
 800193a:	701a      	strb	r2, [r3, #0]
										DS1307_settime(&time);
 800193c:	4811      	ldr	r0, [pc, #68]	@ (8001984 <GeneralCmd+0x574>)
 800193e:	f7fe fcff 	bl	8000340 <DS1307_settime>
 8001942:	e00c      	b.n	800195e <GeneralCmd+0x54e>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:forcesend",11)==0)
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <GeneralCmd+0x56c>)
 8001948:	4413      	add	r3, r2
 800194a:	220b      	movs	r2, #11
 800194c:	4913      	ldr	r1, [pc, #76]	@ (800199c <GeneralCmd+0x58c>)
 800194e:	4618      	mov	r0, r3
 8001950:	f002 ffe2 	bl	8004918 <strncmp>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <GeneralCmd+0x54e>
								{
									LED_status_update();
 800195a:	f7ff f931 	bl	8000bc0 <LED_status_update>
	for(uint16_t i=0;i< g_rx1_cnt;i++)
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	3301      	adds	r3, #1
 8001962:	80fb      	strh	r3, [r7, #6]
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <GeneralCmd+0x590>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	88fa      	ldrh	r2, [r7, #6]
 800196a:	429a      	cmp	r2, r3
 800196c:	f4ff ad56 	bcc.w	800141c <GeneralCmd+0xc>

								}
		}
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000009c 	.word	0x2000009c
 8001980:	08005334 	.word	0x08005334
 8001984:	20000000 	.word	0x20000000
 8001988:	0800533c 	.word	0x0800533c
 800198c:	08005348 	.word	0x08005348
 8001990:	08005350 	.word	0x08005350
 8001994:	08005358 	.word	0x08005358
 8001998:	08005360 	.word	0x08005360
 800199c:	08005368 	.word	0x08005368
 80019a0:	20000096 	.word	0x20000096

080019a4 <Uart_Cmd_Handler>:

void Uart_Cmd_Handler()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	if(UART1_IsDoneFrame()&&g_rx1_cnt>=3)
 80019a8:	f7ff fd18 	bl	80013dc <UART1_IsDoneFrame>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00e      	beq.n	80019d0 <Uart_Cmd_Handler+0x2c>
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <Uart_Cmd_Handler+0x30>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d90a      	bls.n	80019d0 <Uart_Cmd_Handler+0x2c>
		{
			GeneralCmd();
 80019ba:	f7ff fd29 	bl	8001410 <GeneralCmd>
			g_rx1_cnt=0;
 80019be:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <Uart_Cmd_Handler+0x30>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	801a      	strh	r2, [r3, #0]
			memset(g_rx1_buffer,0,sizeof(g_rx1_buffer));
 80019c4:	f240 1209 	movw	r2, #265	@ 0x109
 80019c8:	2100      	movs	r1, #0
 80019ca:	4803      	ldr	r0, [pc, #12]	@ (80019d8 <Uart_Cmd_Handler+0x34>)
 80019cc:	f002 ff9c 	bl	8004908 <memset>
		}
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000096 	.word	0x20000096
 80019d8:	2000009c 	.word	0x2000009c

080019dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019dc:	f7ff fcf8 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480b      	ldr	r0, [pc, #44]	@ (8001a10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019e2:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a09      	ldr	r2, [pc, #36]	@ (8001a1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019f8:	4c09      	ldr	r4, [pc, #36]	@ (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f002 ff9f 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff fa4d 	bl	8000ea8 <main>
  bx lr
 8001a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001a18:	08005500 	.word	0x08005500
  ldr r2, =_sbss
 8001a1c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001a20:	200003b4 	.word	0x200003b4

08001a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f947 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fb74 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f95f 	bl	8001d36 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f927 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	@ (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a03      	ldr	r2, [pc, #12]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000010 	.word	0x20000010
 8001ad4:	20000268 	.word	0x20000268

08001ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	@ (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000268 	.word	0x20000268

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffe0 	bl	8001ad8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000010 	.word	0x20000010

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4906      	ldr	r1, [pc, #24]	@ (8001bcc <__NVIC_EnableIRQ+0x34>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff90 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff2d 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff42 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff90 	bl	8001c24 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5f 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff35 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d008      	beq.n	8001d78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e020      	b.n	8001dba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 020e 	bic.w	r2, r2, #14
 8001d86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d005      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2204      	movs	r2, #4
 8001de0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e051      	b.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 020e 	bic.w	r2, r2, #14
 8001df6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a22      	ldr	r2, [pc, #136]	@ (8001e98 <HAL_DMA_Abort_IT+0xd4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d029      	beq.n	8001e66 <HAL_DMA_Abort_IT+0xa2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a21      	ldr	r2, [pc, #132]	@ (8001e9c <HAL_DMA_Abort_IT+0xd8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d022      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x9e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <HAL_DMA_Abort_IT+0xdc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01a      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x98>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea4 <HAL_DMA_Abort_IT+0xe0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d012      	beq.n	8001e56 <HAL_DMA_Abort_IT+0x92>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <HAL_DMA_Abort_IT+0xe4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00a      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x8c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eac <HAL_DMA_Abort_IT+0xe8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <HAL_DMA_Abort_IT+0x86>
 8001e44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e48:	e00e      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e4e:	e00b      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e54:	e008      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5a:	e005      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e60:	e002      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e62:	2310      	movs	r3, #16
 8001e64:	e000      	b.n	8001e68 <HAL_DMA_Abort_IT+0xa4>
 8001e66:	2301      	movs	r3, #1
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <HAL_DMA_Abort_IT+0xec>)
 8001e6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
    } 
  }
  return status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40020008 	.word	0x40020008
 8001e9c:	4002001c 	.word	0x4002001c
 8001ea0:	40020030 	.word	0x40020030
 8001ea4:	40020044 	.word	0x40020044
 8001ea8:	40020058 	.word	0x40020058
 8001eac:	4002006c 	.word	0x4002006c
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b08b      	sub	sp, #44	@ 0x2c
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	e169      	b.n	800219c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8158 	bne.w	8002196 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4a9a      	ldr	r2, [pc, #616]	@ (8002154 <HAL_GPIO_Init+0x2a0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d05e      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001ef0:	4a98      	ldr	r2, [pc, #608]	@ (8002154 <HAL_GPIO_Init+0x2a0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d875      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001ef6:	4a98      	ldr	r2, [pc, #608]	@ (8002158 <HAL_GPIO_Init+0x2a4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d058      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001efc:	4a96      	ldr	r2, [pc, #600]	@ (8002158 <HAL_GPIO_Init+0x2a4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d86f      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f02:	4a96      	ldr	r2, [pc, #600]	@ (800215c <HAL_GPIO_Init+0x2a8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d052      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f08:	4a94      	ldr	r2, [pc, #592]	@ (800215c <HAL_GPIO_Init+0x2a8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d869      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f0e:	4a94      	ldr	r2, [pc, #592]	@ (8002160 <HAL_GPIO_Init+0x2ac>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d04c      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f14:	4a92      	ldr	r2, [pc, #584]	@ (8002160 <HAL_GPIO_Init+0x2ac>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d863      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f1a:	4a92      	ldr	r2, [pc, #584]	@ (8002164 <HAL_GPIO_Init+0x2b0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d046      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f20:	4a90      	ldr	r2, [pc, #576]	@ (8002164 <HAL_GPIO_Init+0x2b0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d85d      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d82a      	bhi.n	8001f80 <HAL_GPIO_Init+0xcc>
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d859      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f34 <HAL_GPIO_Init+0x80>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001f89 	.word	0x08001f89
 8001f3c:	08001f9b 	.word	0x08001f9b
 8001f40:	08001fdd 	.word	0x08001fdd
 8001f44:	08001fe3 	.word	0x08001fe3
 8001f48:	08001fe3 	.word	0x08001fe3
 8001f4c:	08001fe3 	.word	0x08001fe3
 8001f50:	08001fe3 	.word	0x08001fe3
 8001f54:	08001fe3 	.word	0x08001fe3
 8001f58:	08001fe3 	.word	0x08001fe3
 8001f5c:	08001fe3 	.word	0x08001fe3
 8001f60:	08001fe3 	.word	0x08001fe3
 8001f64:	08001fe3 	.word	0x08001fe3
 8001f68:	08001fe3 	.word	0x08001fe3
 8001f6c:	08001fe3 	.word	0x08001fe3
 8001f70:	08001fe3 	.word	0x08001fe3
 8001f74:	08001fe3 	.word	0x08001fe3
 8001f78:	08001f91 	.word	0x08001f91
 8001f7c:	08001fa5 	.word	0x08001fa5
 8001f80:	4a79      	ldr	r2, [pc, #484]	@ (8002168 <HAL_GPIO_Init+0x2b4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f86:	e02c      	b.n	8001fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e029      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	3304      	adds	r3, #4
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e024      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e01f      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e01a      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e013      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	611a      	str	r2, [r3, #16]
          break;
 8001fce:	e009      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	615a      	str	r2, [r3, #20]
          break;
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          break;
 8001fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2bff      	cmp	r3, #255	@ 0xff
 8001fe8:	d801      	bhi.n	8001fee <HAL_GPIO_Init+0x13a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_Init+0x13e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	@ 0xff
 8001ff8:	d802      	bhi.n	8002000 <HAL_GPIO_Init+0x14c>
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x152>
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	3b08      	subs	r3, #8
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	210f      	movs	r1, #15
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	401a      	ands	r2, r3
 8002018:	6a39      	ldr	r1, [r7, #32]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80b1 	beq.w	8002196 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002034:	4b4d      	ldr	r3, [pc, #308]	@ (800216c <HAL_GPIO_Init+0x2b8>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a4c      	ldr	r2, [pc, #304]	@ (800216c <HAL_GPIO_Init+0x2b8>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b4a      	ldr	r3, [pc, #296]	@ (800216c <HAL_GPIO_Init+0x2b8>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800204c:	4a48      	ldr	r2, [pc, #288]	@ (8002170 <HAL_GPIO_Init+0x2bc>)
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a40      	ldr	r2, [pc, #256]	@ (8002174 <HAL_GPIO_Init+0x2c0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d013      	beq.n	80020a0 <HAL_GPIO_Init+0x1ec>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3f      	ldr	r2, [pc, #252]	@ (8002178 <HAL_GPIO_Init+0x2c4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00d      	beq.n	800209c <HAL_GPIO_Init+0x1e8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3e      	ldr	r2, [pc, #248]	@ (800217c <HAL_GPIO_Init+0x2c8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d007      	beq.n	8002098 <HAL_GPIO_Init+0x1e4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3d      	ldr	r2, [pc, #244]	@ (8002180 <HAL_GPIO_Init+0x2cc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_GPIO_Init+0x1e0>
 8002090:	2303      	movs	r3, #3
 8002092:	e006      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 8002094:	2304      	movs	r3, #4
 8002096:	e004      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 8002098:	2302      	movs	r3, #2
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_GPIO_Init+0x1ee>
 80020a0:	2300      	movs	r3, #0
 80020a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a4:	f002 0203 	and.w	r2, r2, #3
 80020a8:	0092      	lsls	r2, r2, #2
 80020aa:	4093      	lsls	r3, r2
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020b2:	492f      	ldr	r1, [pc, #188]	@ (8002170 <HAL_GPIO_Init+0x2bc>)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3302      	adds	r3, #2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	492c      	ldr	r1, [pc, #176]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020da:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4928      	ldr	r1, [pc, #160]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f4:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	4922      	ldr	r1, [pc, #136]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	43db      	mvns	r3, r3
 800210a:	491e      	ldr	r1, [pc, #120]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 800210c:	4013      	ands	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4918      	ldr	r1, [pc, #96]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212a:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4914      	ldr	r1, [pc, #80]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 8002134:	4013      	ands	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d021      	beq.n	8002188 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002144:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	490e      	ldr	r1, [pc, #56]	@ (8002184 <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e021      	b.n	8002196 <HAL_GPIO_Init+0x2e2>
 8002152:	bf00      	nop
 8002154:	10320000 	.word	0x10320000
 8002158:	10310000 	.word	0x10310000
 800215c:	10220000 	.word	0x10220000
 8002160:	10210000 	.word	0x10210000
 8002164:	10120000 	.word	0x10120000
 8002168:	10110000 	.word	0x10110000
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000
 8002174:	40010800 	.word	0x40010800
 8002178:	40010c00 	.word	0x40010c00
 800217c:	40011000 	.word	0x40011000
 8002180:	40011400 	.word	0x40011400
 8002184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_GPIO_Init+0x304>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	43db      	mvns	r3, r3
 8002190:	4909      	ldr	r1, [pc, #36]	@ (80021b8 <HAL_GPIO_Init+0x304>)
 8002192:	4013      	ands	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	3301      	adds	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f ae8e 	bne.w	8001ec8 <HAL_GPIO_Init+0x14>
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	372c      	adds	r7, #44	@ 0x2c
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e001      	b.n	80021de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	4613      	mov	r3, r2
 80021f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fa:	787b      	ldrb	r3, [r7, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002206:	e003      	b.n	8002210 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
	...

0800221c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e12b      	b.n	8002486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe ffa6 	bl	8001194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	@ 0x24
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800226e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800227e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002280:	f001 fbca 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8002284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a81      	ldr	r2, [pc, #516]	@ (8002490 <HAL_I2C_Init+0x274>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d807      	bhi.n	80022a0 <HAL_I2C_Init+0x84>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a80      	ldr	r2, [pc, #512]	@ (8002494 <HAL_I2C_Init+0x278>)
 8002294:	4293      	cmp	r3, r2
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e006      	b.n	80022ae <HAL_I2C_Init+0x92>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002498 <HAL_I2C_Init+0x27c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	bf94      	ite	ls
 80022a8:	2301      	movls	r3, #1
 80022aa:	2300      	movhi	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0e7      	b.n	8002486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a78      	ldr	r2, [pc, #480]	@ (800249c <HAL_I2C_Init+0x280>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0c9b      	lsrs	r3, r3, #18
 80022c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002490 <HAL_I2C_Init+0x274>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d802      	bhi.n	80022f0 <HAL_I2C_Init+0xd4>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3301      	adds	r3, #1
 80022ee:	e009      	b.n	8002304 <HAL_I2C_Init+0xe8>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	4a69      	ldr	r2, [pc, #420]	@ (80024a0 <HAL_I2C_Init+0x284>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	3301      	adds	r3, #1
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	430b      	orrs	r3, r1
 800230a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002316:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	495c      	ldr	r1, [pc, #368]	@ (8002490 <HAL_I2C_Init+0x274>)
 8002320:	428b      	cmp	r3, r1
 8002322:	d819      	bhi.n	8002358 <HAL_I2C_Init+0x13c>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e59      	subs	r1, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002338:	400b      	ands	r3, r1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_I2C_Init+0x138>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e59      	subs	r1, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fbb1 f3f3 	udiv	r3, r1, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002352:	e051      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002354:	2304      	movs	r3, #4
 8002356:	e04f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d111      	bne.n	8002384 <HAL_I2C_Init+0x168>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e012      	b.n	80023aa <HAL_I2C_Init+0x18e>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	0099      	lsls	r1, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	fbb0 f3f3 	udiv	r3, r0, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Init+0x196>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e022      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <HAL_I2C_Init+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e58      	subs	r0, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d6:	e00f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	0099      	lsls	r1, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	6809      	ldr	r1, [r1, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002426:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6911      	ldr	r1, [r2, #16]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68d2      	ldr	r2, [r2, #12]
 8002432:	4311      	orrs	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	430b      	orrs	r3, r1
 800243a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	000186a0 	.word	0x000186a0
 8002494:	001e847f 	.word	0x001e847f
 8002498:	003d08ff 	.word	0x003d08ff
 800249c:	431bde83 	.word	0x431bde83
 80024a0:	10624dd3 	.word	0x10624dd3

080024a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	461a      	mov	r2, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	817b      	strh	r3, [r7, #10]
 80024b4:	4613      	mov	r3, r2
 80024b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024b8:	f7ff fb0e 	bl	8001ad8 <HAL_GetTick>
 80024bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	f040 80e0 	bne.w	800268c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2319      	movs	r3, #25
 80024d2:	2201      	movs	r2, #1
 80024d4:	4970      	ldr	r1, [pc, #448]	@ (8002698 <HAL_I2C_Master_Transmit+0x1f4>)
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fc9e 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
 80024e4:	e0d3      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_I2C_Master_Transmit+0x50>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0cc      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d007      	beq.n	800251a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002528:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2221      	movs	r2, #33	@ 0x21
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2210      	movs	r2, #16
 8002536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	893a      	ldrh	r2, [r7, #8]
 800254a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4a50      	ldr	r2, [pc, #320]	@ (800269c <HAL_I2C_Master_Transmit+0x1f8>)
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800255c:	8979      	ldrh	r1, [r7, #10]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	6a3a      	ldr	r2, [r7, #32]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fb08 	bl	8002b78 <I2C_MasterRequestWrite>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e08d      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002588:	e066      	b.n	8002658 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	6a39      	ldr	r1, [r7, #32]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fd5c 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00d      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d107      	bne.n	80025b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06b      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d11b      	bne.n	800262c <HAL_I2C_Master_Transmit+0x188>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d017      	beq.n	800262c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	6a39      	ldr	r1, [r7, #32]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fd53 	bl	80030dc <I2C_WaitOnBTFFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	2b04      	cmp	r3, #4
 8002642:	d107      	bne.n	8002654 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002652:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e01a      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265c:	2b00      	cmp	r3, #0
 800265e:	d194      	bne.n	800258a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	e000      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800268c:	2302      	movs	r3, #2
  }
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	00100002 	.word	0x00100002
 800269c:	ffff0000 	.word	0xffff0000

080026a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	@ 0x30
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	461a      	mov	r2, r3
 80026ac:	460b      	mov	r3, r1
 80026ae:	817b      	strh	r3, [r7, #10]
 80026b0:	4613      	mov	r3, r2
 80026b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff fa0e 	bl	8001ad8 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	f040 824b 	bne.w	8002b62 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2319      	movs	r3, #25
 80026d2:	2201      	movs	r2, #1
 80026d4:	497f      	ldr	r1, [pc, #508]	@ (80028d4 <HAL_I2C_Master_Receive+0x234>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fb9e 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
 80026e4:	e23e      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_I2C_Master_Receive+0x54>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e237      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d007      	beq.n	800271a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002728:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2222      	movs	r2, #34	@ 0x22
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2210      	movs	r2, #16
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	893a      	ldrh	r2, [r7, #8]
 800274a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a5f      	ldr	r2, [pc, #380]	@ (80028d8 <HAL_I2C_Master_Receive+0x238>)
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800275c:	8979      	ldrh	r1, [r7, #10]
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fa8a 	bl	8002c7c <I2C_MasterRequestRead>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1f8      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	d113      	bne.n	80027a2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e1cc      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d11e      	bne.n	80027e8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ba:	b672      	cpsid	i
}
 80027bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027e4:	b662      	cpsie	i
}
 80027e6:	e035      	b.n	8002854 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d11e      	bne.n	800282e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
}
 8002802:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002828:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800282a:	b662      	cpsie	i
}
 800282c:	e012      	b.n	8002854 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800283c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002854:	e172      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285a:	2b03      	cmp	r3, #3
 800285c:	f200 811f 	bhi.w	8002a9e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	2b01      	cmp	r3, #1
 8002866:	d123      	bne.n	80028b0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fc7d 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e173      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028ae:	e145      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d152      	bne.n	800295e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028be:	2200      	movs	r2, #0
 80028c0:	4906      	ldr	r1, [pc, #24]	@ (80028dc <HAL_I2C_Master_Receive+0x23c>)
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 faa8 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e148      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
 80028d2:	bf00      	nop
 80028d4:	00100002 	.word	0x00100002
 80028d8:	ffff0000 	.word	0xffff0000
 80028dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002926:	b662      	cpsie	i
}
 8002928:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800295c:	e0ee      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	2200      	movs	r2, #0
 8002966:	4981      	ldr	r1, [pc, #516]	@ (8002b6c <HAL_I2C_Master_Receive+0x4cc>)
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fa55 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0f5      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002986:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002988:	b672      	cpsid	i
}
 800298a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029be:	4b6c      	ldr	r3, [pc, #432]	@ (8002b70 <HAL_I2C_Master_Receive+0x4d0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b74 <HAL_I2C_Master_Receive+0x4d4>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0a1a      	lsrs	r2, r3, #8
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00da      	lsls	r2, r3, #3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	3b01      	subs	r3, #1
 80029dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d118      	bne.n	8002a16 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a06:	b662      	cpsie	i
}
 8002a08:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0a6      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d1d9      	bne.n	80029d8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a66:	b662      	cpsie	i
}
 8002a68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a9c:	e04e      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fb62 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e058      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d124      	bne.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d107      	bne.n	8002b0a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b08:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f47f ae88 	bne.w	8002856 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e000      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
  }
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3728      	adds	r7, #40	@ 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	00010004 	.word	0x00010004
 8002b70:	20000008 	.word	0x20000008
 8002b74:	14f8b589 	.word	0x14f8b589

08002b78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	460b      	mov	r3, r1
 8002b86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d006      	beq.n	8002ba2 <I2C_MasterRequestWrite+0x2a>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d003      	beq.n	8002ba2 <I2C_MasterRequestWrite+0x2a>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ba0:	d108      	bne.n	8002bb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e00b      	b.n	8002bcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	2b12      	cmp	r3, #18
 8002bba:	d107      	bne.n	8002bcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f91d 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf2:	d103      	bne.n	8002bfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e035      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c08:	d108      	bne.n	8002c1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	e01b      	b.n	8002c54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c1c:	897b      	ldrh	r3, [r7, #10]
 8002c1e:	11db      	asrs	r3, r3, #7
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f003 0306 	and.w	r3, r3, #6
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f063 030f 	orn	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	490e      	ldr	r1, [pc, #56]	@ (8002c74 <I2C_MasterRequestWrite+0xfc>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f966 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e010      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c4a:	897b      	ldrh	r3, [r7, #10]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4907      	ldr	r1, [pc, #28]	@ (8002c78 <I2C_MasterRequestWrite+0x100>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f956 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	00010008 	.word	0x00010008
 8002c78:	00010002 	.word	0x00010002

08002c7c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c90:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d006      	beq.n	8002cb6 <I2C_MasterRequestRead+0x3a>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d003      	beq.n	8002cb6 <I2C_MasterRequestRead+0x3a>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cb4:	d108      	bne.n	8002cc8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e00b      	b.n	8002ce0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	2b11      	cmp	r3, #17
 8002cce:	d107      	bne.n	8002ce0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f893 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d06:	d103      	bne.n	8002d10 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e079      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d1c:	d108      	bne.n	8002d30 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	e05f      	b.n	8002df0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d30:	897b      	ldrh	r3, [r7, #10]
 8002d32:	11db      	asrs	r3, r3, #7
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0306 	and.w	r3, r3, #6
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f063 030f 	orn	r3, r3, #15
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4930      	ldr	r1, [pc, #192]	@ (8002e10 <I2C_MasterRequestRead+0x194>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f8dc 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e054      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4929      	ldr	r1, [pc, #164]	@ (8002e14 <I2C_MasterRequestRead+0x198>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8cc 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e044      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f831 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dca:	d103      	bne.n	8002dd4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e017      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002dd8:	897b      	ldrh	r3, [r7, #10]
 8002dda:	11db      	asrs	r3, r3, #7
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 0306 	and.w	r3, r3, #6
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f063 030e 	orn	r3, r3, #14
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4907      	ldr	r1, [pc, #28]	@ (8002e14 <I2C_MasterRequestRead+0x198>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f888 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	00010008 	.word	0x00010008
 8002e14:	00010002 	.word	0x00010002

08002e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	e048      	b.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d044      	beq.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fe fe51 	bl	8001ad8 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d139      	bne.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10d      	bne.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	e00c      	b.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d116      	bne.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e023      	b.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10d      	bne.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	e00c      	b.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d093      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f1a:	e071      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2a:	d123      	bne.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e067      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d041      	beq.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7fe fdac 	bl	8001ad8 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d136      	bne.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10c      	bne.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e00b      	b.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e021      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d10c      	bne.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e00b      	b.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f47f af6d 	bne.w	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003058:	e034      	b.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f8e3 	bl	8003226 <I2C_IsAcknowledgeFailed>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e034      	b.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d028      	beq.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7fe fd31 	bl	8001ad8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11d      	bne.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	2b80      	cmp	r3, #128	@ 0x80
 8003094:	d016      	beq.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e007      	b.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	2b80      	cmp	r3, #128	@ 0x80
 80030d0:	d1c3      	bne.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e8:	e034      	b.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f89b 	bl	8003226 <I2C_IsAcknowledgeFailed>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e034      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d028      	beq.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003102:	f7fe fce9 	bl	8001ad8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11d      	bne.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d016      	beq.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d1c3      	bne.n	80030ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003178:	e049      	b.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d119      	bne.n	80031bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0210 	mvn.w	r2, #16
 8003190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e030      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031bc:	f7fe fc8c 	bl	8001ad8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d302      	bcc.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11d      	bne.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031dc:	2b40      	cmp	r3, #64	@ 0x40
 80031de:	d016      	beq.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e007      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b40      	cmp	r3, #64	@ 0x40
 800321a:	d1ae      	bne.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323c:	d11b      	bne.n	8003276 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003246:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f043 0204 	orr.w	r2, r3, #4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
	...

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e272      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8087 	beq.w	80033b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a4:	4b92      	ldr	r3, [pc, #584]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00c      	beq.n	80032ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b0:	4b8f      	ldr	r3, [pc, #572]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d112      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
 80032bc:	4b8c      	ldr	r3, [pc, #560]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ca:	4b89      	ldr	r3, [pc, #548]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d06c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x12c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d168      	bne.n	80033b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e24c      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x76>
 80032ec:	4b80      	ldr	r3, [pc, #512]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7f      	ldr	r2, [pc, #508]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e02e      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b7b      	ldr	r3, [pc, #492]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7a      	ldr	r2, [pc, #488]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b78      	ldr	r3, [pc, #480]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a77      	ldr	r2, [pc, #476]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e01d      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0xbc>
 8003326:	4b72      	ldr	r3, [pc, #456]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a71      	ldr	r2, [pc, #452]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b6f      	ldr	r3, [pc, #444]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6e      	ldr	r2, [pc, #440]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 8003340:	4b6b      	ldr	r3, [pc, #428]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6a      	ldr	r2, [pc, #424]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b68      	ldr	r3, [pc, #416]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a67      	ldr	r2, [pc, #412]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe fbba 	bl	8001ad8 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fbb6 	bl	8001ad8 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	@ 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e200      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b5d      	ldr	r3, [pc, #372]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0xe4>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe fba6 	bl	8001ad8 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe fba2 	bl	8001ad8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	@ 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1ec      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	4b53      	ldr	r3, [pc, #332]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x10c>
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d063      	beq.n	8003486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033be:	4b4c      	ldr	r3, [pc, #304]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ca:	4b49      	ldr	r3, [pc, #292]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d11c      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
 80033d6:	4b46      	ldr	r3, [pc, #280]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4b43      	ldr	r3, [pc, #268]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e1c0      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b3d      	ldr	r3, [pc, #244]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4939      	ldr	r1, [pc, #228]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	e03a      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b36      	ldr	r3, [pc, #216]	@ (80034f4 <HAL_RCC_OscConfig+0x270>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fe fb5b 	bl	8001ad8 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7fe fb57 	bl	8001ad8 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1a1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	4b2d      	ldr	r3, [pc, #180]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b2a      	ldr	r3, [pc, #168]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4927      	ldr	r1, [pc, #156]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b26      	ldr	r3, [pc, #152]	@ (80034f4 <HAL_RCC_OscConfig+0x270>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe fb3a 	bl	8001ad8 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe fb36 	bl	8001ad8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e180      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03a      	beq.n	8003508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d019      	beq.n	80034ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b17      	ldr	r3, [pc, #92]	@ (80034f8 <HAL_RCC_OscConfig+0x274>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fe fb1a 	bl	8001ad8 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fe fb16 	bl	8001ad8 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e160      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f000 face 	bl	8003a68 <RCC_Delay>
 80034cc:	e01c      	b.n	8003508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ce:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <HAL_RCC_OscConfig+0x274>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fe fb00 	bl	8001ad8 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034da:	e00f      	b.n	80034fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034dc:	f7fe fafc 	bl	8001ad8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d908      	bls.n	80034fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e146      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	42420000 	.word	0x42420000
 80034f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	4b92      	ldr	r3, [pc, #584]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e9      	bne.n	80034dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a6 	beq.w	8003662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b8b      	ldr	r3, [pc, #556]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b88      	ldr	r3, [pc, #544]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4a87      	ldr	r2, [pc, #540]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003530:	61d3      	str	r3, [r2, #28]
 8003532:	4b85      	ldr	r3, [pc, #532]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b82      	ldr	r3, [pc, #520]	@ (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b7f      	ldr	r3, [pc, #508]	@ (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7e      	ldr	r2, [pc, #504]	@ (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fe fabd 	bl	8001ad8 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fe fab9 	bl	8001ad8 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b64      	cmp	r3, #100	@ 0x64
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e103      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b75      	ldr	r3, [pc, #468]	@ (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x312>
 8003588:	4b6f      	ldr	r3, [pc, #444]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4a6e      	ldr	r2, [pc, #440]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	e02d      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x334>
 800359e:	4b6a      	ldr	r3, [pc, #424]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a69      	ldr	r2, [pc, #420]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6213      	str	r3, [r2, #32]
 80035aa:	4b67      	ldr	r3, [pc, #412]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4a66      	ldr	r2, [pc, #408]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	6213      	str	r3, [r2, #32]
 80035b6:	e01c      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d10c      	bne.n	80035da <HAL_RCC_OscConfig+0x356>
 80035c0:	4b61      	ldr	r3, [pc, #388]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a60      	ldr	r2, [pc, #384]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6213      	str	r3, [r2, #32]
 80035cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	e00b      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035da:	4b5b      	ldr	r3, [pc, #364]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a5a      	ldr	r2, [pc, #360]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6213      	str	r3, [r2, #32]
 80035e6:	4b58      	ldr	r3, [pc, #352]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a57      	ldr	r2, [pc, #348]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d015      	beq.n	8003626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fe fa6d 	bl	8001ad8 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe fa69 	bl	8001ad8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0b1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	4b4b      	ldr	r3, [pc, #300]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RCC_OscConfig+0x37e>
 8003624:	e014      	b.n	8003650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fe fa57 	bl	8001ad8 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fe fa53 	bl	8001ad8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e09b      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	4b40      	ldr	r3, [pc, #256]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003656:	4b3c      	ldr	r3, [pc, #240]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a3b      	ldr	r2, [pc, #236]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8087 	beq.w	800377a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366c:	4b36      	ldr	r3, [pc, #216]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d061      	beq.n	800373c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d146      	bne.n	800370e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003680:	4b33      	ldr	r3, [pc, #204]	@ (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe fa27 	bl	8001ad8 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe fa23 	bl	8001ad8 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e06d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a0:	4b29      	ldr	r3, [pc, #164]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b4:	d108      	bne.n	80036c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036b6:	4b24      	ldr	r3, [pc, #144]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	4921      	ldr	r1, [pc, #132]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a19      	ldr	r1, [r3, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	430b      	orrs	r3, r1
 80036da:	491b      	ldr	r1, [pc, #108]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fe f9f7 	bl	8001ad8 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe f9f3 	bl	8001ad8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003700:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x46a>
 800370c:	e035      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fe f9e0 	bl	8001ad8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fe f9dc 	bl	8001ad8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e026      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372e:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x498>
 800373a:	e01e      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e019      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003754:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_OscConfig+0x500>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	429a      	cmp	r2, r3
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000

08003788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0d0      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d910      	bls.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b67      	ldr	r3, [pc, #412]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4965      	ldr	r1, [pc, #404]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a58      	ldr	r2, [pc, #352]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a52      	ldr	r2, [pc, #328]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d040      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e073      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b3d      	ldr	r3, [pc, #244]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06b      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b39      	ldr	r3, [pc, #228]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4936      	ldr	r1, [pc, #216]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003878:	f7fe f92e 	bl	8001ad8 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fe f92a 	bl	8001ad8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e053      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b27      	ldr	r3, [pc, #156]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d210      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	4922      	ldr	r1, [pc, #136]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003902:	4b12      	ldr	r3, [pc, #72]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	@ (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	@ (8003954 <HAL_RCC_ClockConfig+0x1cc>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	@ (8003958 <HAL_RCC_ClockConfig+0x1d0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe f88c 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40022000 	.word	0x40022000
 800394c:	40021000 	.word	0x40021000
 8003950:	08005390 	.word	0x08005390
 8003954:	20000008 	.word	0x20000008
 8003958:	2000000c 	.word	0x2000000c

0800395c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003976:	4b1e      	ldr	r3, [pc, #120]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x30>
 8003986:	2b08      	cmp	r3, #8
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x36>
 800398a:	e027      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800398e:	613b      	str	r3, [r7, #16]
      break;
 8003990:	e027      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0c9b      	lsrs	r3, r3, #18
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039aa:	4b11      	ldr	r3, [pc, #68]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0c5b      	lsrs	r3, r3, #17
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	4a11      	ldr	r2, [pc, #68]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80039b6:	5cd3      	ldrb	r3, [r2, r3]
 80039b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a0d      	ldr	r2, [pc, #52]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e004      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	613b      	str	r3, [r7, #16]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80039de:	613b      	str	r3, [r7, #16]
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	693b      	ldr	r3, [r7, #16]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	007a1200 	.word	0x007a1200
 80039f8:	080053a8 	.word	0x080053a8
 80039fc:	080053b8 	.word	0x080053b8
 8003a00:	003d0900 	.word	0x003d0900

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b02      	ldr	r3, [pc, #8]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000008 	.word	0x20000008

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff2 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	@ (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	080053a0 	.word	0x080053a0

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff ffde 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	0adb      	lsrs	r3, r3, #11
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	@ (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	080053a0 	.word	0x080053a0

08003a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a70:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <RCC_Delay+0x34>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa0 <RCC_Delay+0x38>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0a5b      	lsrs	r3, r3, #9
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a84:	bf00      	nop
  }
  while (Delay --);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	60fa      	str	r2, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f9      	bne.n	8003a84 <RCC_Delay+0x1c>
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	20000008 	.word	0x20000008
 8003aa0:	10624dd3 	.word	0x10624dd3

08003aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e042      	b.n	8003b3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd fbb2 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2224      	movs	r2, #36	@ 0x24
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fdb7 	bl	800465c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	@ 0x28
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	4613      	mov	r3, r2
 8003b52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d175      	bne.n	8003c50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_UART_Transmit+0x2c>
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e06e      	b.n	8003c52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2221      	movs	r2, #33	@ 0x21
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b82:	f7fd ffa9 	bl	8001ad8 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9c:	d108      	bne.n	8003bb0 <HAL_UART_Transmit+0x6c>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	e003      	b.n	8003bb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bb8:	e02e      	b.n	8003c18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2180      	movs	r1, #128	@ 0x80
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fb1c 	bl	8004202 <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e03a      	b.n	8003c52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	e007      	b.n	8003c0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	3301      	adds	r3, #1
 8003c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1cb      	bne.n	8003bba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2140      	movs	r1, #64	@ 0x40
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fae8 	bl	8004202 <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e006      	b.n	8003c52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d112      	bne.n	8003c9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_UART_Receive_IT+0x26>
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e00b      	b.n	8003c9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fb0f 	bl	80042b4 <UART_Start_Receive_IT>
 8003c96:	4603      	mov	r3, r0
 8003c98:	e000      	b.n	8003c9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10f      	bne.n	8003d0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_UART_IRQHandler+0x66>
 8003cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fbec 	bl	80044e0 <UART_Receive_IT>
      return;
 8003d08:	e25b      	b.n	80041c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80de 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x22c>
 8003d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80d1 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_UART_IRQHandler+0xae>
 8003d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	f043 0201 	orr.w	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_UART_IRQHandler+0xd2>
 8003d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f043 0202 	orr.w	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_UART_IRQHandler+0xf6>
 8003d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	f043 0204 	orr.w	r2, r3, #4
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d011      	beq.n	8003dca <HAL_UART_IRQHandler+0x126>
 8003da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d105      	bne.n	8003dbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f043 0208 	orr.w	r2, r3, #8
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 81f2 	beq.w	80041b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_UART_IRQHandler+0x14e>
 8003de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fb77 	bl	80044e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <HAL_UART_IRQHandler+0x17a>
 8003e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d04f      	beq.n	8003ebe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fa81 	bl	8004326 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d041      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3314      	adds	r3, #20
 8003e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3314      	adds	r3, #20
 8003e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1d9      	bne.n	8003e32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d013      	beq.n	8003eae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8004084 <HAL_UART_IRQHandler+0x3e0>)
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd ff96 	bl	8001dc4 <HAL_DMA_Abort_IT>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	e00e      	b.n	8003ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f993 	bl	80041da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00a      	b.n	8003ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f98f 	bl	80041da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e006      	b.n	8003ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f98b 	bl	80041da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003eca:	e175      	b.n	80041b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	bf00      	nop
    return;
 8003ece:	e173      	b.n	80041b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	f040 814f 	bne.w	8004178 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8148 	beq.w	8004178 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8141 	beq.w	8004178 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80b6 	beq.w	8004088 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8145 	beq.w	80041bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	f080 813e 	bcs.w	80041bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	f000 8088 	beq.w	8004064 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f80:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1d9      	bne.n	8003f54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3314      	adds	r3, #20
 8003fa6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3314      	adds	r3, #20
 8003fc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fc4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e1      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004000:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004002:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004006:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800400e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e3      	bne.n	8003fdc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004034:	f023 0310 	bic.w	r3, r3, #16
 8004038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004046:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004048:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800404c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e3      	bne.n	8004022 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	4618      	mov	r0, r3
 8004060:	f7fd fe75 	bl	8001d4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004072:	b29b      	uxth	r3, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	b29b      	uxth	r3, r3
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8b6 	bl	80041ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004080:	e09c      	b.n	80041bc <HAL_UART_IRQHandler+0x518>
 8004082:	bf00      	nop
 8004084:	080043eb 	.word	0x080043eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004090:	b29b      	uxth	r3, r3
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 808e 	beq.w	80041c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8089 	beq.w	80041c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80040d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e3      	bne.n	80040ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3314      	adds	r3, #20
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	623b      	str	r3, [r7, #32]
   return(result);
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3314      	adds	r3, #20
 8004106:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800410a:	633a      	str	r2, [r7, #48]	@ 0x30
 800410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e3      	bne.n	80040e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	60fb      	str	r3, [r7, #12]
   return(result);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0310 	bic.w	r3, r3, #16
 8004142:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	330c      	adds	r3, #12
 800414c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004150:	61fa      	str	r2, [r7, #28]
 8004152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	69b9      	ldr	r1, [r7, #24]
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	617b      	str	r3, [r7, #20]
   return(result);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e3      	bne.n	800412c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800416a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800416e:	4619      	mov	r1, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f83b 	bl	80041ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004176:	e023      	b.n	80041c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <HAL_UART_IRQHandler+0x4f4>
 8004184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f93e 	bl	8004412 <UART_Transmit_IT>
    return;
 8004196:	e014      	b.n	80041c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <HAL_UART_IRQHandler+0x51e>
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f97d 	bl	80044b0 <UART_EndTransmit_IT>
    return;
 80041b6:	e004      	b.n	80041c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80041b8:	bf00      	nop
 80041ba:	e002      	b.n	80041c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80041bc:	bf00      	nop
 80041be:	e000      	b.n	80041c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80041c0:	bf00      	nop
  }
}
 80041c2:	37e8      	adds	r7, #232	@ 0xe8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr

080041da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004212:	e03b      	b.n	800428c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d037      	beq.n	800428c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421c:	f7fd fc5c 	bl	8001ad8 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	6a3a      	ldr	r2, [r7, #32]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <UART_WaitOnFlagUntilTimeout+0x30>
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e03a      	b.n	80042ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d023      	beq.n	800428c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b80      	cmp	r3, #128	@ 0x80
 8004248:	d020      	beq.n	800428c <UART_WaitOnFlagUntilTimeout+0x8a>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b40      	cmp	r3, #64	@ 0x40
 800424e:	d01d      	beq.n	800428c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b08      	cmp	r3, #8
 800425c:	d116      	bne.n	800428c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f856 	bl	8004326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2208      	movs	r2, #8
 800427e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e00f      	b.n	80042ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4013      	ands	r3, r2
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	429a      	cmp	r2, r3
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d0b4      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	88fa      	ldrh	r2, [r7, #6]
 80042d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2222      	movs	r2, #34	@ 0x22
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0220 	orr.w	r2, r2, #32
 8004318:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004326:	b480      	push	{r7}
 8004328:	b095      	sub	sp, #84	@ 0x54
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800434e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004350:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004354:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3314      	adds	r3, #20
 8004368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	61fb      	str	r3, [r7, #28]
   return(result);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3314      	adds	r3, #20
 8004380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e5      	bne.n	8004362 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	2b01      	cmp	r3, #1
 800439c:	d119      	bne.n	80043d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f023 0310 	bic.w	r3, r3, #16
 80043b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043be:	61ba      	str	r2, [r7, #24]
 80043c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6979      	ldr	r1, [r7, #20]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	613b      	str	r3, [r7, #16]
   return(result);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e5      	bne.n	800439e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043e0:	bf00      	nop
 80043e2:	3754      	adds	r7, #84	@ 0x54
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff fee8 	bl	80041da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b21      	cmp	r3, #33	@ 0x21
 8004424:	d13e      	bne.n	80044a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442e:	d114      	bne.n	800445a <UART_Transmit_IT+0x48>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d110      	bne.n	800445a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800444c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	621a      	str	r2, [r3, #32]
 8004458:	e008      	b.n	800446c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6211      	str	r1, [r2, #32]
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29b      	uxth	r3, r3
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4619      	mov	r1, r3
 800447a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10f      	bne.n	80044a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800448e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800449e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fe79 	bl	80041c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08c      	sub	sp, #48	@ 0x30
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b22      	cmp	r3, #34	@ 0x22
 80044f2:	f040 80ae 	bne.w	8004652 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044fe:	d117      	bne.n	8004530 <UART_Receive_IT+0x50>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d113      	bne.n	8004530 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	b29a      	uxth	r2, r3
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	629a      	str	r2, [r3, #40]	@ 0x28
 800452e:	e026      	b.n	800457e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004542:	d007      	beq.n	8004554 <UART_Receive_IT+0x74>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <UART_Receive_IT+0x82>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e008      	b.n	8004574 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800456e:	b2da      	uxtb	r2, r3
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29b      	uxth	r3, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4619      	mov	r1, r3
 800458c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800458e:	2b00      	cmp	r3, #0
 8004590:	d15d      	bne.n	800464e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0220 	bic.w	r2, r2, #32
 80045a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d135      	bne.n	8004644 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	613b      	str	r3, [r7, #16]
   return(result);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f023 0310 	bic.w	r3, r3, #16
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fe:	623a      	str	r2, [r7, #32]
 8004600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	69f9      	ldr	r1, [r7, #28]
 8004604:	6a3a      	ldr	r2, [r7, #32]
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	61bb      	str	r3, [r7, #24]
   return(result);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e5      	bne.n	80045de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b10      	cmp	r3, #16
 800461e:	d10a      	bne.n	8004636 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff fdd5 	bl	80041ec <HAL_UARTEx_RxEventCallback>
 8004642:	e002      	b.n	800464a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fc fb49 	bl	8000cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e002      	b.n	8004654 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3730      	adds	r7, #48	@ 0x30
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004696:	f023 030c 	bic.w	r3, r3, #12
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	430b      	orrs	r3, r1
 80046a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2c      	ldr	r2, [pc, #176]	@ (8004770 <UART_SetConfig+0x114>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d103      	bne.n	80046cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046c4:	f7ff f9bc 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	e002      	b.n	80046d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046cc:	f7ff f9a4 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80046d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009a      	lsls	r2, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	4a22      	ldr	r2, [pc, #136]	@ (8004774 <UART_SetConfig+0x118>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	0119      	lsls	r1, r3, #4
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009a      	lsls	r2, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	fbb2 f2f3 	udiv	r2, r2, r3
 8004708:	4b1a      	ldr	r3, [pc, #104]	@ (8004774 <UART_SetConfig+0x118>)
 800470a:	fba3 0302 	umull	r0, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2064      	movs	r0, #100	@ 0x64
 8004712:	fb00 f303 	mul.w	r3, r0, r3
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	3332      	adds	r3, #50	@ 0x32
 800471c:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <UART_SetConfig+0x118>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004728:	4419      	add	r1, r3
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009a      	lsls	r2, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004740:	4b0c      	ldr	r3, [pc, #48]	@ (8004774 <UART_SetConfig+0x118>)
 8004742:	fba3 0302 	umull	r0, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2064      	movs	r0, #100	@ 0x64
 800474a:	fb00 f303 	mul.w	r3, r0, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	3332      	adds	r3, #50	@ 0x32
 8004754:	4a07      	ldr	r2, [pc, #28]	@ (8004774 <UART_SetConfig+0x118>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	f003 020f 	and.w	r2, r3, #15
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	440a      	add	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40013800 	.word	0x40013800
 8004774:	51eb851f 	.word	0x51eb851f

08004778 <atoi>:
 8004778:	220a      	movs	r2, #10
 800477a:	2100      	movs	r1, #0
 800477c:	f000 b87a 	b.w	8004874 <strtol>

08004780 <_strtol_l.constprop.0>:
 8004780:	2b24      	cmp	r3, #36	@ 0x24
 8004782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004786:	4686      	mov	lr, r0
 8004788:	4690      	mov	r8, r2
 800478a:	d801      	bhi.n	8004790 <_strtol_l.constprop.0+0x10>
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <_strtol_l.constprop.0+0x1e>
 8004790:	f000 f8d4 	bl	800493c <__errno>
 8004794:	2316      	movs	r3, #22
 8004796:	6003      	str	r3, [r0, #0]
 8004798:	2000      	movs	r0, #0
 800479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479e:	460d      	mov	r5, r1
 80047a0:	4833      	ldr	r0, [pc, #204]	@ (8004870 <_strtol_l.constprop.0+0xf0>)
 80047a2:	462a      	mov	r2, r5
 80047a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047a8:	5d06      	ldrb	r6, [r0, r4]
 80047aa:	f016 0608 	ands.w	r6, r6, #8
 80047ae:	d1f8      	bne.n	80047a2 <_strtol_l.constprop.0+0x22>
 80047b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80047b2:	d12d      	bne.n	8004810 <_strtol_l.constprop.0+0x90>
 80047b4:	2601      	movs	r6, #1
 80047b6:	782c      	ldrb	r4, [r5, #0]
 80047b8:	1c95      	adds	r5, r2, #2
 80047ba:	f033 0210 	bics.w	r2, r3, #16
 80047be:	d109      	bne.n	80047d4 <_strtol_l.constprop.0+0x54>
 80047c0:	2c30      	cmp	r4, #48	@ 0x30
 80047c2:	d12a      	bne.n	800481a <_strtol_l.constprop.0+0x9a>
 80047c4:	782a      	ldrb	r2, [r5, #0]
 80047c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80047ca:	2a58      	cmp	r2, #88	@ 0x58
 80047cc:	d125      	bne.n	800481a <_strtol_l.constprop.0+0x9a>
 80047ce:	2310      	movs	r3, #16
 80047d0:	786c      	ldrb	r4, [r5, #1]
 80047d2:	3502      	adds	r5, #2
 80047d4:	2200      	movs	r2, #0
 80047d6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80047da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80047de:	fbbc f9f3 	udiv	r9, ip, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80047e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80047ec:	2f09      	cmp	r7, #9
 80047ee:	d81b      	bhi.n	8004828 <_strtol_l.constprop.0+0xa8>
 80047f0:	463c      	mov	r4, r7
 80047f2:	42a3      	cmp	r3, r4
 80047f4:	dd27      	ble.n	8004846 <_strtol_l.constprop.0+0xc6>
 80047f6:	1c57      	adds	r7, r2, #1
 80047f8:	d007      	beq.n	800480a <_strtol_l.constprop.0+0x8a>
 80047fa:	4581      	cmp	r9, r0
 80047fc:	d320      	bcc.n	8004840 <_strtol_l.constprop.0+0xc0>
 80047fe:	d101      	bne.n	8004804 <_strtol_l.constprop.0+0x84>
 8004800:	45a2      	cmp	sl, r4
 8004802:	db1d      	blt.n	8004840 <_strtol_l.constprop.0+0xc0>
 8004804:	2201      	movs	r2, #1
 8004806:	fb00 4003 	mla	r0, r0, r3, r4
 800480a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800480e:	e7eb      	b.n	80047e8 <_strtol_l.constprop.0+0x68>
 8004810:	2c2b      	cmp	r4, #43	@ 0x2b
 8004812:	bf04      	itt	eq
 8004814:	782c      	ldrbeq	r4, [r5, #0]
 8004816:	1c95      	addeq	r5, r2, #2
 8004818:	e7cf      	b.n	80047ba <_strtol_l.constprop.0+0x3a>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1da      	bne.n	80047d4 <_strtol_l.constprop.0+0x54>
 800481e:	2c30      	cmp	r4, #48	@ 0x30
 8004820:	bf0c      	ite	eq
 8004822:	2308      	moveq	r3, #8
 8004824:	230a      	movne	r3, #10
 8004826:	e7d5      	b.n	80047d4 <_strtol_l.constprop.0+0x54>
 8004828:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800482c:	2f19      	cmp	r7, #25
 800482e:	d801      	bhi.n	8004834 <_strtol_l.constprop.0+0xb4>
 8004830:	3c37      	subs	r4, #55	@ 0x37
 8004832:	e7de      	b.n	80047f2 <_strtol_l.constprop.0+0x72>
 8004834:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004838:	2f19      	cmp	r7, #25
 800483a:	d804      	bhi.n	8004846 <_strtol_l.constprop.0+0xc6>
 800483c:	3c57      	subs	r4, #87	@ 0x57
 800483e:	e7d8      	b.n	80047f2 <_strtol_l.constprop.0+0x72>
 8004840:	f04f 32ff 	mov.w	r2, #4294967295
 8004844:	e7e1      	b.n	800480a <_strtol_l.constprop.0+0x8a>
 8004846:	1c53      	adds	r3, r2, #1
 8004848:	d108      	bne.n	800485c <_strtol_l.constprop.0+0xdc>
 800484a:	2322      	movs	r3, #34	@ 0x22
 800484c:	4660      	mov	r0, ip
 800484e:	f8ce 3000 	str.w	r3, [lr]
 8004852:	f1b8 0f00 	cmp.w	r8, #0
 8004856:	d0a0      	beq.n	800479a <_strtol_l.constprop.0+0x1a>
 8004858:	1e69      	subs	r1, r5, #1
 800485a:	e006      	b.n	800486a <_strtol_l.constprop.0+0xea>
 800485c:	b106      	cbz	r6, 8004860 <_strtol_l.constprop.0+0xe0>
 800485e:	4240      	negs	r0, r0
 8004860:	f1b8 0f00 	cmp.w	r8, #0
 8004864:	d099      	beq.n	800479a <_strtol_l.constprop.0+0x1a>
 8004866:	2a00      	cmp	r2, #0
 8004868:	d1f6      	bne.n	8004858 <_strtol_l.constprop.0+0xd8>
 800486a:	f8c8 1000 	str.w	r1, [r8]
 800486e:	e794      	b.n	800479a <_strtol_l.constprop.0+0x1a>
 8004870:	080053bb 	.word	0x080053bb

08004874 <strtol>:
 8004874:	4613      	mov	r3, r2
 8004876:	460a      	mov	r2, r1
 8004878:	4601      	mov	r1, r0
 800487a:	4802      	ldr	r0, [pc, #8]	@ (8004884 <strtol+0x10>)
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f7ff bf7f 	b.w	8004780 <_strtol_l.constprop.0>
 8004882:	bf00      	nop
 8004884:	20000014 	.word	0x20000014

08004888 <siprintf>:
 8004888:	b40e      	push	{r1, r2, r3}
 800488a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800488e:	b500      	push	{lr}
 8004890:	b09c      	sub	sp, #112	@ 0x70
 8004892:	ab1d      	add	r3, sp, #116	@ 0x74
 8004894:	9002      	str	r0, [sp, #8]
 8004896:	9006      	str	r0, [sp, #24]
 8004898:	9107      	str	r1, [sp, #28]
 800489a:	9104      	str	r1, [sp, #16]
 800489c:	4808      	ldr	r0, [pc, #32]	@ (80048c0 <siprintf+0x38>)
 800489e:	4909      	ldr	r1, [pc, #36]	@ (80048c4 <siprintf+0x3c>)
 80048a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a4:	9105      	str	r1, [sp, #20]
 80048a6:	6800      	ldr	r0, [r0, #0]
 80048a8:	a902      	add	r1, sp, #8
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	f000 f9c4 	bl	8004c38 <_svfiprintf_r>
 80048b0:	2200      	movs	r2, #0
 80048b2:	9b02      	ldr	r3, [sp, #8]
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	b01c      	add	sp, #112	@ 0x70
 80048b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048bc:	b003      	add	sp, #12
 80048be:	4770      	bx	lr
 80048c0:	20000014 	.word	0x20000014
 80048c4:	ffff0208 	.word	0xffff0208

080048c8 <_vsiprintf_r>:
 80048c8:	b500      	push	{lr}
 80048ca:	b09b      	sub	sp, #108	@ 0x6c
 80048cc:	9100      	str	r1, [sp, #0]
 80048ce:	9104      	str	r1, [sp, #16]
 80048d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048d4:	9105      	str	r1, [sp, #20]
 80048d6:	9102      	str	r1, [sp, #8]
 80048d8:	4905      	ldr	r1, [pc, #20]	@ (80048f0 <_vsiprintf_r+0x28>)
 80048da:	9103      	str	r1, [sp, #12]
 80048dc:	4669      	mov	r1, sp
 80048de:	f000 f9ab 	bl	8004c38 <_svfiprintf_r>
 80048e2:	2200      	movs	r2, #0
 80048e4:	9b00      	ldr	r3, [sp, #0]
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	b01b      	add	sp, #108	@ 0x6c
 80048ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80048ee:	bf00      	nop
 80048f0:	ffff0208 	.word	0xffff0208

080048f4 <vsiprintf>:
 80048f4:	4613      	mov	r3, r2
 80048f6:	460a      	mov	r2, r1
 80048f8:	4601      	mov	r1, r0
 80048fa:	4802      	ldr	r0, [pc, #8]	@ (8004904 <vsiprintf+0x10>)
 80048fc:	6800      	ldr	r0, [r0, #0]
 80048fe:	f7ff bfe3 	b.w	80048c8 <_vsiprintf_r>
 8004902:	bf00      	nop
 8004904:	20000014 	.word	0x20000014

08004908 <memset>:
 8004908:	4603      	mov	r3, r0
 800490a:	4402      	add	r2, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	d100      	bne.n	8004912 <memset+0xa>
 8004910:	4770      	bx	lr
 8004912:	f803 1b01 	strb.w	r1, [r3], #1
 8004916:	e7f9      	b.n	800490c <memset+0x4>

08004918 <strncmp>:
 8004918:	b510      	push	{r4, lr}
 800491a:	b16a      	cbz	r2, 8004938 <strncmp+0x20>
 800491c:	3901      	subs	r1, #1
 800491e:	1884      	adds	r4, r0, r2
 8004920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004924:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004928:	429a      	cmp	r2, r3
 800492a:	d103      	bne.n	8004934 <strncmp+0x1c>
 800492c:	42a0      	cmp	r0, r4
 800492e:	d001      	beq.n	8004934 <strncmp+0x1c>
 8004930:	2a00      	cmp	r2, #0
 8004932:	d1f5      	bne.n	8004920 <strncmp+0x8>
 8004934:	1ad0      	subs	r0, r2, r3
 8004936:	bd10      	pop	{r4, pc}
 8004938:	4610      	mov	r0, r2
 800493a:	e7fc      	b.n	8004936 <strncmp+0x1e>

0800493c <__errno>:
 800493c:	4b01      	ldr	r3, [pc, #4]	@ (8004944 <__errno+0x8>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000014 	.word	0x20000014

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	2600      	movs	r6, #0
 800494c:	4d0c      	ldr	r5, [pc, #48]	@ (8004980 <__libc_init_array+0x38>)
 800494e:	4c0d      	ldr	r4, [pc, #52]	@ (8004984 <__libc_init_array+0x3c>)
 8004950:	1b64      	subs	r4, r4, r5
 8004952:	10a4      	asrs	r4, r4, #2
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	f000 fc78 	bl	800524c <_init>
 800495c:	2600      	movs	r6, #0
 800495e:	4d0a      	ldr	r5, [pc, #40]	@ (8004988 <__libc_init_array+0x40>)
 8004960:	4c0a      	ldr	r4, [pc, #40]	@ (800498c <__libc_init_array+0x44>)
 8004962:	1b64      	subs	r4, r4, r5
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	080054f8 	.word	0x080054f8
 8004984:	080054f8 	.word	0x080054f8
 8004988:	080054f8 	.word	0x080054f8
 800498c:	080054fc 	.word	0x080054fc

08004990 <__retarget_lock_acquire_recursive>:
 8004990:	4770      	bx	lr

08004992 <__retarget_lock_release_recursive>:
 8004992:	4770      	bx	lr

08004994 <_free_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4605      	mov	r5, r0
 8004998:	2900      	cmp	r1, #0
 800499a:	d040      	beq.n	8004a1e <_free_r+0x8a>
 800499c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a0:	1f0c      	subs	r4, r1, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bfb8      	it	lt
 80049a6:	18e4      	addlt	r4, r4, r3
 80049a8:	f000 f8de 	bl	8004b68 <__malloc_lock>
 80049ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004a20 <_free_r+0x8c>)
 80049ae:	6813      	ldr	r3, [r2, #0]
 80049b0:	b933      	cbnz	r3, 80049c0 <_free_r+0x2c>
 80049b2:	6063      	str	r3, [r4, #4]
 80049b4:	6014      	str	r4, [r2, #0]
 80049b6:	4628      	mov	r0, r5
 80049b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049bc:	f000 b8da 	b.w	8004b74 <__malloc_unlock>
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	d908      	bls.n	80049d6 <_free_r+0x42>
 80049c4:	6820      	ldr	r0, [r4, #0]
 80049c6:	1821      	adds	r1, r4, r0
 80049c8:	428b      	cmp	r3, r1
 80049ca:	bf01      	itttt	eq
 80049cc:	6819      	ldreq	r1, [r3, #0]
 80049ce:	685b      	ldreq	r3, [r3, #4]
 80049d0:	1809      	addeq	r1, r1, r0
 80049d2:	6021      	streq	r1, [r4, #0]
 80049d4:	e7ed      	b.n	80049b2 <_free_r+0x1e>
 80049d6:	461a      	mov	r2, r3
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b10b      	cbz	r3, 80049e0 <_free_r+0x4c>
 80049dc:	42a3      	cmp	r3, r4
 80049de:	d9fa      	bls.n	80049d6 <_free_r+0x42>
 80049e0:	6811      	ldr	r1, [r2, #0]
 80049e2:	1850      	adds	r0, r2, r1
 80049e4:	42a0      	cmp	r0, r4
 80049e6:	d10b      	bne.n	8004a00 <_free_r+0x6c>
 80049e8:	6820      	ldr	r0, [r4, #0]
 80049ea:	4401      	add	r1, r0
 80049ec:	1850      	adds	r0, r2, r1
 80049ee:	4283      	cmp	r3, r0
 80049f0:	6011      	str	r1, [r2, #0]
 80049f2:	d1e0      	bne.n	80049b6 <_free_r+0x22>
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4408      	add	r0, r1
 80049fa:	6010      	str	r0, [r2, #0]
 80049fc:	6053      	str	r3, [r2, #4]
 80049fe:	e7da      	b.n	80049b6 <_free_r+0x22>
 8004a00:	d902      	bls.n	8004a08 <_free_r+0x74>
 8004a02:	230c      	movs	r3, #12
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	e7d6      	b.n	80049b6 <_free_r+0x22>
 8004a08:	6820      	ldr	r0, [r4, #0]
 8004a0a:	1821      	adds	r1, r4, r0
 8004a0c:	428b      	cmp	r3, r1
 8004a0e:	bf01      	itttt	eq
 8004a10:	6819      	ldreq	r1, [r3, #0]
 8004a12:	685b      	ldreq	r3, [r3, #4]
 8004a14:	1809      	addeq	r1, r1, r0
 8004a16:	6021      	streq	r1, [r4, #0]
 8004a18:	6063      	str	r3, [r4, #4]
 8004a1a:	6054      	str	r4, [r2, #4]
 8004a1c:	e7cb      	b.n	80049b6 <_free_r+0x22>
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	200003b0 	.word	0x200003b0

08004a24 <sbrk_aligned>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4e0f      	ldr	r6, [pc, #60]	@ (8004a64 <sbrk_aligned+0x40>)
 8004a28:	460c      	mov	r4, r1
 8004a2a:	6831      	ldr	r1, [r6, #0]
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	b911      	cbnz	r1, 8004a36 <sbrk_aligned+0x12>
 8004a30:	f000 fbaa 	bl	8005188 <_sbrk_r>
 8004a34:	6030      	str	r0, [r6, #0]
 8004a36:	4621      	mov	r1, r4
 8004a38:	4628      	mov	r0, r5
 8004a3a:	f000 fba5 	bl	8005188 <_sbrk_r>
 8004a3e:	1c43      	adds	r3, r0, #1
 8004a40:	d103      	bne.n	8004a4a <sbrk_aligned+0x26>
 8004a42:	f04f 34ff 	mov.w	r4, #4294967295
 8004a46:	4620      	mov	r0, r4
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
 8004a4a:	1cc4      	adds	r4, r0, #3
 8004a4c:	f024 0403 	bic.w	r4, r4, #3
 8004a50:	42a0      	cmp	r0, r4
 8004a52:	d0f8      	beq.n	8004a46 <sbrk_aligned+0x22>
 8004a54:	1a21      	subs	r1, r4, r0
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 fb96 	bl	8005188 <_sbrk_r>
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d1f2      	bne.n	8004a46 <sbrk_aligned+0x22>
 8004a60:	e7ef      	b.n	8004a42 <sbrk_aligned+0x1e>
 8004a62:	bf00      	nop
 8004a64:	200003ac 	.word	0x200003ac

08004a68 <_malloc_r>:
 8004a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a6c:	1ccd      	adds	r5, r1, #3
 8004a6e:	f025 0503 	bic.w	r5, r5, #3
 8004a72:	3508      	adds	r5, #8
 8004a74:	2d0c      	cmp	r5, #12
 8004a76:	bf38      	it	cc
 8004a78:	250c      	movcc	r5, #12
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	db01      	blt.n	8004a84 <_malloc_r+0x1c>
 8004a80:	42a9      	cmp	r1, r5
 8004a82:	d904      	bls.n	8004a8e <_malloc_r+0x26>
 8004a84:	230c      	movs	r3, #12
 8004a86:	6033      	str	r3, [r6, #0]
 8004a88:	2000      	movs	r0, #0
 8004a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b64 <_malloc_r+0xfc>
 8004a92:	f000 f869 	bl	8004b68 <__malloc_lock>
 8004a96:	f8d8 3000 	ldr.w	r3, [r8]
 8004a9a:	461c      	mov	r4, r3
 8004a9c:	bb44      	cbnz	r4, 8004af0 <_malloc_r+0x88>
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f7ff ffbf 	bl	8004a24 <sbrk_aligned>
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	d158      	bne.n	8004b5e <_malloc_r+0xf6>
 8004aac:	f8d8 4000 	ldr.w	r4, [r8]
 8004ab0:	4627      	mov	r7, r4
 8004ab2:	2f00      	cmp	r7, #0
 8004ab4:	d143      	bne.n	8004b3e <_malloc_r+0xd6>
 8004ab6:	2c00      	cmp	r4, #0
 8004ab8:	d04b      	beq.n	8004b52 <_malloc_r+0xea>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	4639      	mov	r1, r7
 8004abe:	4630      	mov	r0, r6
 8004ac0:	eb04 0903 	add.w	r9, r4, r3
 8004ac4:	f000 fb60 	bl	8005188 <_sbrk_r>
 8004ac8:	4581      	cmp	r9, r0
 8004aca:	d142      	bne.n	8004b52 <_malloc_r+0xea>
 8004acc:	6821      	ldr	r1, [r4, #0]
 8004ace:	4630      	mov	r0, r6
 8004ad0:	1a6d      	subs	r5, r5, r1
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	f7ff ffa6 	bl	8004a24 <sbrk_aligned>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d03a      	beq.n	8004b52 <_malloc_r+0xea>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	442b      	add	r3, r5
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	bb62      	cbnz	r2, 8004b44 <_malloc_r+0xdc>
 8004aea:	f8c8 7000 	str.w	r7, [r8]
 8004aee:	e00f      	b.n	8004b10 <_malloc_r+0xa8>
 8004af0:	6822      	ldr	r2, [r4, #0]
 8004af2:	1b52      	subs	r2, r2, r5
 8004af4:	d420      	bmi.n	8004b38 <_malloc_r+0xd0>
 8004af6:	2a0b      	cmp	r2, #11
 8004af8:	d917      	bls.n	8004b2a <_malloc_r+0xc2>
 8004afa:	1961      	adds	r1, r4, r5
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	6025      	str	r5, [r4, #0]
 8004b00:	bf18      	it	ne
 8004b02:	6059      	strne	r1, [r3, #4]
 8004b04:	6863      	ldr	r3, [r4, #4]
 8004b06:	bf08      	it	eq
 8004b08:	f8c8 1000 	streq.w	r1, [r8]
 8004b0c:	5162      	str	r2, [r4, r5]
 8004b0e:	604b      	str	r3, [r1, #4]
 8004b10:	4630      	mov	r0, r6
 8004b12:	f000 f82f 	bl	8004b74 <__malloc_unlock>
 8004b16:	f104 000b 	add.w	r0, r4, #11
 8004b1a:	1d23      	adds	r3, r4, #4
 8004b1c:	f020 0007 	bic.w	r0, r0, #7
 8004b20:	1ac2      	subs	r2, r0, r3
 8004b22:	bf1c      	itt	ne
 8004b24:	1a1b      	subne	r3, r3, r0
 8004b26:	50a3      	strne	r3, [r4, r2]
 8004b28:	e7af      	b.n	8004a8a <_malloc_r+0x22>
 8004b2a:	6862      	ldr	r2, [r4, #4]
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	bf0c      	ite	eq
 8004b30:	f8c8 2000 	streq.w	r2, [r8]
 8004b34:	605a      	strne	r2, [r3, #4]
 8004b36:	e7eb      	b.n	8004b10 <_malloc_r+0xa8>
 8004b38:	4623      	mov	r3, r4
 8004b3a:	6864      	ldr	r4, [r4, #4]
 8004b3c:	e7ae      	b.n	8004a9c <_malloc_r+0x34>
 8004b3e:	463c      	mov	r4, r7
 8004b40:	687f      	ldr	r7, [r7, #4]
 8004b42:	e7b6      	b.n	8004ab2 <_malloc_r+0x4a>
 8004b44:	461a      	mov	r2, r3
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	d1fb      	bne.n	8004b44 <_malloc_r+0xdc>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6053      	str	r3, [r2, #4]
 8004b50:	e7de      	b.n	8004b10 <_malloc_r+0xa8>
 8004b52:	230c      	movs	r3, #12
 8004b54:	4630      	mov	r0, r6
 8004b56:	6033      	str	r3, [r6, #0]
 8004b58:	f000 f80c 	bl	8004b74 <__malloc_unlock>
 8004b5c:	e794      	b.n	8004a88 <_malloc_r+0x20>
 8004b5e:	6005      	str	r5, [r0, #0]
 8004b60:	e7d6      	b.n	8004b10 <_malloc_r+0xa8>
 8004b62:	bf00      	nop
 8004b64:	200003b0 	.word	0x200003b0

08004b68 <__malloc_lock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	@ (8004b70 <__malloc_lock+0x8>)
 8004b6a:	f7ff bf11 	b.w	8004990 <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	200003a8 	.word	0x200003a8

08004b74 <__malloc_unlock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	@ (8004b7c <__malloc_unlock+0x8>)
 8004b76:	f7ff bf0c 	b.w	8004992 <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	200003a8 	.word	0x200003a8

08004b80 <__ssputs_r>:
 8004b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b84:	461f      	mov	r7, r3
 8004b86:	688e      	ldr	r6, [r1, #8]
 8004b88:	4682      	mov	sl, r0
 8004b8a:	42be      	cmp	r6, r7
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	4690      	mov	r8, r2
 8004b90:	680b      	ldr	r3, [r1, #0]
 8004b92:	d82d      	bhi.n	8004bf0 <__ssputs_r+0x70>
 8004b94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b9c:	d026      	beq.n	8004bec <__ssputs_r+0x6c>
 8004b9e:	6965      	ldr	r5, [r4, #20]
 8004ba0:	6909      	ldr	r1, [r1, #16]
 8004ba2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ba6:	eba3 0901 	sub.w	r9, r3, r1
 8004baa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bae:	1c7b      	adds	r3, r7, #1
 8004bb0:	444b      	add	r3, r9
 8004bb2:	106d      	asrs	r5, r5, #1
 8004bb4:	429d      	cmp	r5, r3
 8004bb6:	bf38      	it	cc
 8004bb8:	461d      	movcc	r5, r3
 8004bba:	0553      	lsls	r3, r2, #21
 8004bbc:	d527      	bpl.n	8004c0e <__ssputs_r+0x8e>
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7ff ff52 	bl	8004a68 <_malloc_r>
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	b360      	cbz	r0, 8004c22 <__ssputs_r+0xa2>
 8004bc8:	464a      	mov	r2, r9
 8004bca:	6921      	ldr	r1, [r4, #16]
 8004bcc:	f000 fafa 	bl	80051c4 <memcpy>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	6126      	str	r6, [r4, #16]
 8004bde:	444e      	add	r6, r9
 8004be0:	6026      	str	r6, [r4, #0]
 8004be2:	463e      	mov	r6, r7
 8004be4:	6165      	str	r5, [r4, #20]
 8004be6:	eba5 0509 	sub.w	r5, r5, r9
 8004bea:	60a5      	str	r5, [r4, #8]
 8004bec:	42be      	cmp	r6, r7
 8004bee:	d900      	bls.n	8004bf2 <__ssputs_r+0x72>
 8004bf0:	463e      	mov	r6, r7
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	6820      	ldr	r0, [r4, #0]
 8004bf8:	f000 faac 	bl	8005154 <memmove>
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	68a3      	ldr	r3, [r4, #8]
 8004c00:	1b9b      	subs	r3, r3, r6
 8004c02:	60a3      	str	r3, [r4, #8]
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	4433      	add	r3, r6
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0e:	462a      	mov	r2, r5
 8004c10:	f000 fae6 	bl	80051e0 <_realloc_r>
 8004c14:	4606      	mov	r6, r0
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d1e0      	bne.n	8004bdc <__ssputs_r+0x5c>
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	6921      	ldr	r1, [r4, #16]
 8004c1e:	f7ff feb9 	bl	8004994 <_free_r>
 8004c22:	230c      	movs	r3, #12
 8004c24:	f8ca 3000 	str.w	r3, [sl]
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c32:	81a3      	strh	r3, [r4, #12]
 8004c34:	e7e9      	b.n	8004c0a <__ssputs_r+0x8a>
	...

08004c38 <_svfiprintf_r>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	4698      	mov	r8, r3
 8004c3e:	898b      	ldrh	r3, [r1, #12]
 8004c40:	4607      	mov	r7, r0
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	460d      	mov	r5, r1
 8004c46:	4614      	mov	r4, r2
 8004c48:	b09d      	sub	sp, #116	@ 0x74
 8004c4a:	d510      	bpl.n	8004c6e <_svfiprintf_r+0x36>
 8004c4c:	690b      	ldr	r3, [r1, #16]
 8004c4e:	b973      	cbnz	r3, 8004c6e <_svfiprintf_r+0x36>
 8004c50:	2140      	movs	r1, #64	@ 0x40
 8004c52:	f7ff ff09 	bl	8004a68 <_malloc_r>
 8004c56:	6028      	str	r0, [r5, #0]
 8004c58:	6128      	str	r0, [r5, #16]
 8004c5a:	b930      	cbnz	r0, 8004c6a <_svfiprintf_r+0x32>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	b01d      	add	sp, #116	@ 0x74
 8004c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6a:	2340      	movs	r3, #64	@ 0x40
 8004c6c:	616b      	str	r3, [r5, #20]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c72:	2320      	movs	r3, #32
 8004c74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c78:	2330      	movs	r3, #48	@ 0x30
 8004c7a:	f04f 0901 	mov.w	r9, #1
 8004c7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c82:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004e1c <_svfiprintf_r+0x1e4>
 8004c86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	469a      	mov	sl, r3
 8004c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c92:	b10a      	cbz	r2, 8004c98 <_svfiprintf_r+0x60>
 8004c94:	2a25      	cmp	r2, #37	@ 0x25
 8004c96:	d1f9      	bne.n	8004c8c <_svfiprintf_r+0x54>
 8004c98:	ebba 0b04 	subs.w	fp, sl, r4
 8004c9c:	d00b      	beq.n	8004cb6 <_svfiprintf_r+0x7e>
 8004c9e:	465b      	mov	r3, fp
 8004ca0:	4622      	mov	r2, r4
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	f7ff ff6b 	bl	8004b80 <__ssputs_r>
 8004caa:	3001      	adds	r0, #1
 8004cac:	f000 80a7 	beq.w	8004dfe <_svfiprintf_r+0x1c6>
 8004cb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cb2:	445a      	add	r2, fp
 8004cb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 809f 	beq.w	8004dfe <_svfiprintf_r+0x1c6>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cca:	f10a 0a01 	add.w	sl, sl, #1
 8004cce:	9304      	str	r3, [sp, #16]
 8004cd0:	9307      	str	r3, [sp, #28]
 8004cd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cd8:	4654      	mov	r4, sl
 8004cda:	2205      	movs	r2, #5
 8004cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce0:	484e      	ldr	r0, [pc, #312]	@ (8004e1c <_svfiprintf_r+0x1e4>)
 8004ce2:	f000 fa61 	bl	80051a8 <memchr>
 8004ce6:	9a04      	ldr	r2, [sp, #16]
 8004ce8:	b9d8      	cbnz	r0, 8004d22 <_svfiprintf_r+0xea>
 8004cea:	06d0      	lsls	r0, r2, #27
 8004cec:	bf44      	itt	mi
 8004cee:	2320      	movmi	r3, #32
 8004cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cf4:	0711      	lsls	r1, r2, #28
 8004cf6:	bf44      	itt	mi
 8004cf8:	232b      	movmi	r3, #43	@ 0x2b
 8004cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8004d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d04:	d015      	beq.n	8004d32 <_svfiprintf_r+0xfa>
 8004d06:	4654      	mov	r4, sl
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f04f 0c0a 	mov.w	ip, #10
 8004d0e:	9a07      	ldr	r2, [sp, #28]
 8004d10:	4621      	mov	r1, r4
 8004d12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d16:	3b30      	subs	r3, #48	@ 0x30
 8004d18:	2b09      	cmp	r3, #9
 8004d1a:	d94b      	bls.n	8004db4 <_svfiprintf_r+0x17c>
 8004d1c:	b1b0      	cbz	r0, 8004d4c <_svfiprintf_r+0x114>
 8004d1e:	9207      	str	r2, [sp, #28]
 8004d20:	e014      	b.n	8004d4c <_svfiprintf_r+0x114>
 8004d22:	eba0 0308 	sub.w	r3, r0, r8
 8004d26:	fa09 f303 	lsl.w	r3, r9, r3
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	46a2      	mov	sl, r4
 8004d2e:	9304      	str	r3, [sp, #16]
 8004d30:	e7d2      	b.n	8004cd8 <_svfiprintf_r+0xa0>
 8004d32:	9b03      	ldr	r3, [sp, #12]
 8004d34:	1d19      	adds	r1, r3, #4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	9103      	str	r1, [sp, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bfbb      	ittet	lt
 8004d3e:	425b      	neglt	r3, r3
 8004d40:	f042 0202 	orrlt.w	r2, r2, #2
 8004d44:	9307      	strge	r3, [sp, #28]
 8004d46:	9307      	strlt	r3, [sp, #28]
 8004d48:	bfb8      	it	lt
 8004d4a:	9204      	strlt	r2, [sp, #16]
 8004d4c:	7823      	ldrb	r3, [r4, #0]
 8004d4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d50:	d10a      	bne.n	8004d68 <_svfiprintf_r+0x130>
 8004d52:	7863      	ldrb	r3, [r4, #1]
 8004d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d56:	d132      	bne.n	8004dbe <_svfiprintf_r+0x186>
 8004d58:	9b03      	ldr	r3, [sp, #12]
 8004d5a:	3402      	adds	r4, #2
 8004d5c:	1d1a      	adds	r2, r3, #4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	9203      	str	r2, [sp, #12]
 8004d62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d66:	9305      	str	r3, [sp, #20]
 8004d68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004e20 <_svfiprintf_r+0x1e8>
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	4650      	mov	r0, sl
 8004d70:	7821      	ldrb	r1, [r4, #0]
 8004d72:	f000 fa19 	bl	80051a8 <memchr>
 8004d76:	b138      	cbz	r0, 8004d88 <_svfiprintf_r+0x150>
 8004d78:	2240      	movs	r2, #64	@ 0x40
 8004d7a:	9b04      	ldr	r3, [sp, #16]
 8004d7c:	eba0 000a 	sub.w	r0, r0, sl
 8004d80:	4082      	lsls	r2, r0
 8004d82:	4313      	orrs	r3, r2
 8004d84:	3401      	adds	r4, #1
 8004d86:	9304      	str	r3, [sp, #16]
 8004d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d8c:	2206      	movs	r2, #6
 8004d8e:	4825      	ldr	r0, [pc, #148]	@ (8004e24 <_svfiprintf_r+0x1ec>)
 8004d90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d94:	f000 fa08 	bl	80051a8 <memchr>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d036      	beq.n	8004e0a <_svfiprintf_r+0x1d2>
 8004d9c:	4b22      	ldr	r3, [pc, #136]	@ (8004e28 <_svfiprintf_r+0x1f0>)
 8004d9e:	bb1b      	cbnz	r3, 8004de8 <_svfiprintf_r+0x1b0>
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	3307      	adds	r3, #7
 8004da4:	f023 0307 	bic.w	r3, r3, #7
 8004da8:	3308      	adds	r3, #8
 8004daa:	9303      	str	r3, [sp, #12]
 8004dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dae:	4433      	add	r3, r6
 8004db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004db2:	e76a      	b.n	8004c8a <_svfiprintf_r+0x52>
 8004db4:	460c      	mov	r4, r1
 8004db6:	2001      	movs	r0, #1
 8004db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dbc:	e7a8      	b.n	8004d10 <_svfiprintf_r+0xd8>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f04f 0c0a 	mov.w	ip, #10
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	3401      	adds	r4, #1
 8004dc8:	9305      	str	r3, [sp, #20]
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dd0:	3a30      	subs	r2, #48	@ 0x30
 8004dd2:	2a09      	cmp	r2, #9
 8004dd4:	d903      	bls.n	8004dde <_svfiprintf_r+0x1a6>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0c6      	beq.n	8004d68 <_svfiprintf_r+0x130>
 8004dda:	9105      	str	r1, [sp, #20]
 8004ddc:	e7c4      	b.n	8004d68 <_svfiprintf_r+0x130>
 8004dde:	4604      	mov	r4, r0
 8004de0:	2301      	movs	r3, #1
 8004de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004de6:	e7f0      	b.n	8004dca <_svfiprintf_r+0x192>
 8004de8:	ab03      	add	r3, sp, #12
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	462a      	mov	r2, r5
 8004dee:	4638      	mov	r0, r7
 8004df0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <_svfiprintf_r+0x1f4>)
 8004df2:	a904      	add	r1, sp, #16
 8004df4:	f3af 8000 	nop.w
 8004df8:	1c42      	adds	r2, r0, #1
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	d1d6      	bne.n	8004dac <_svfiprintf_r+0x174>
 8004dfe:	89ab      	ldrh	r3, [r5, #12]
 8004e00:	065b      	lsls	r3, r3, #25
 8004e02:	f53f af2d 	bmi.w	8004c60 <_svfiprintf_r+0x28>
 8004e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e08:	e72c      	b.n	8004c64 <_svfiprintf_r+0x2c>
 8004e0a:	ab03      	add	r3, sp, #12
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	462a      	mov	r2, r5
 8004e10:	4638      	mov	r0, r7
 8004e12:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <_svfiprintf_r+0x1f4>)
 8004e14:	a904      	add	r1, sp, #16
 8004e16:	f000 f87d 	bl	8004f14 <_printf_i>
 8004e1a:	e7ed      	b.n	8004df8 <_svfiprintf_r+0x1c0>
 8004e1c:	080054bb 	.word	0x080054bb
 8004e20:	080054c1 	.word	0x080054c1
 8004e24:	080054c5 	.word	0x080054c5
 8004e28:	00000000 	.word	0x00000000
 8004e2c:	08004b81 	.word	0x08004b81

08004e30 <_printf_common>:
 8004e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	4616      	mov	r6, r2
 8004e36:	4698      	mov	r8, r3
 8004e38:	688a      	ldr	r2, [r1, #8]
 8004e3a:	690b      	ldr	r3, [r1, #16]
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	bfb8      	it	lt
 8004e42:	4613      	movlt	r3, r2
 8004e44:	6033      	str	r3, [r6, #0]
 8004e46:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e50:	b10a      	cbz	r2, 8004e56 <_printf_common+0x26>
 8004e52:	3301      	adds	r3, #1
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	0699      	lsls	r1, r3, #26
 8004e5a:	bf42      	ittt	mi
 8004e5c:	6833      	ldrmi	r3, [r6, #0]
 8004e5e:	3302      	addmi	r3, #2
 8004e60:	6033      	strmi	r3, [r6, #0]
 8004e62:	6825      	ldr	r5, [r4, #0]
 8004e64:	f015 0506 	ands.w	r5, r5, #6
 8004e68:	d106      	bne.n	8004e78 <_printf_common+0x48>
 8004e6a:	f104 0a19 	add.w	sl, r4, #25
 8004e6e:	68e3      	ldr	r3, [r4, #12]
 8004e70:	6832      	ldr	r2, [r6, #0]
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	42ab      	cmp	r3, r5
 8004e76:	dc2b      	bgt.n	8004ed0 <_printf_common+0xa0>
 8004e78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	3b00      	subs	r3, #0
 8004e80:	bf18      	it	ne
 8004e82:	2301      	movne	r3, #1
 8004e84:	0692      	lsls	r2, r2, #26
 8004e86:	d430      	bmi.n	8004eea <_printf_common+0xba>
 8004e88:	4641      	mov	r1, r8
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e90:	47c8      	blx	r9
 8004e92:	3001      	adds	r0, #1
 8004e94:	d023      	beq.n	8004ede <_printf_common+0xae>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	6922      	ldr	r2, [r4, #16]
 8004e9a:	f003 0306 	and.w	r3, r3, #6
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	bf14      	ite	ne
 8004ea2:	2500      	movne	r5, #0
 8004ea4:	6833      	ldreq	r3, [r6, #0]
 8004ea6:	f04f 0600 	mov.w	r6, #0
 8004eaa:	bf08      	it	eq
 8004eac:	68e5      	ldreq	r5, [r4, #12]
 8004eae:	f104 041a 	add.w	r4, r4, #26
 8004eb2:	bf08      	it	eq
 8004eb4:	1aed      	subeq	r5, r5, r3
 8004eb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004eba:	bf08      	it	eq
 8004ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	bfc4      	itt	gt
 8004ec4:	1a9b      	subgt	r3, r3, r2
 8004ec6:	18ed      	addgt	r5, r5, r3
 8004ec8:	42b5      	cmp	r5, r6
 8004eca:	d11a      	bne.n	8004f02 <_printf_common+0xd2>
 8004ecc:	2000      	movs	r0, #0
 8004ece:	e008      	b.n	8004ee2 <_printf_common+0xb2>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	4652      	mov	r2, sl
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	47c8      	blx	r9
 8004eda:	3001      	adds	r0, #1
 8004edc:	d103      	bne.n	8004ee6 <_printf_common+0xb6>
 8004ede:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee6:	3501      	adds	r5, #1
 8004ee8:	e7c1      	b.n	8004e6e <_printf_common+0x3e>
 8004eea:	2030      	movs	r0, #48	@ 0x30
 8004eec:	18e1      	adds	r1, r4, r3
 8004eee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ef8:	4422      	add	r2, r4
 8004efa:	3302      	adds	r3, #2
 8004efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f00:	e7c2      	b.n	8004e88 <_printf_common+0x58>
 8004f02:	2301      	movs	r3, #1
 8004f04:	4622      	mov	r2, r4
 8004f06:	4641      	mov	r1, r8
 8004f08:	4638      	mov	r0, r7
 8004f0a:	47c8      	blx	r9
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d0e6      	beq.n	8004ede <_printf_common+0xae>
 8004f10:	3601      	adds	r6, #1
 8004f12:	e7d9      	b.n	8004ec8 <_printf_common+0x98>

08004f14 <_printf_i>:
 8004f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f18:	7e0f      	ldrb	r7, [r1, #24]
 8004f1a:	4691      	mov	r9, r2
 8004f1c:	2f78      	cmp	r7, #120	@ 0x78
 8004f1e:	4680      	mov	r8, r0
 8004f20:	460c      	mov	r4, r1
 8004f22:	469a      	mov	sl, r3
 8004f24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f2a:	d807      	bhi.n	8004f3c <_printf_i+0x28>
 8004f2c:	2f62      	cmp	r7, #98	@ 0x62
 8004f2e:	d80a      	bhi.n	8004f46 <_printf_i+0x32>
 8004f30:	2f00      	cmp	r7, #0
 8004f32:	f000 80d3 	beq.w	80050dc <_printf_i+0x1c8>
 8004f36:	2f58      	cmp	r7, #88	@ 0x58
 8004f38:	f000 80ba 	beq.w	80050b0 <_printf_i+0x19c>
 8004f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f44:	e03a      	b.n	8004fbc <_printf_i+0xa8>
 8004f46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f4a:	2b15      	cmp	r3, #21
 8004f4c:	d8f6      	bhi.n	8004f3c <_printf_i+0x28>
 8004f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f54 <_printf_i+0x40>)
 8004f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f54:	08004fad 	.word	0x08004fad
 8004f58:	08004fc1 	.word	0x08004fc1
 8004f5c:	08004f3d 	.word	0x08004f3d
 8004f60:	08004f3d 	.word	0x08004f3d
 8004f64:	08004f3d 	.word	0x08004f3d
 8004f68:	08004f3d 	.word	0x08004f3d
 8004f6c:	08004fc1 	.word	0x08004fc1
 8004f70:	08004f3d 	.word	0x08004f3d
 8004f74:	08004f3d 	.word	0x08004f3d
 8004f78:	08004f3d 	.word	0x08004f3d
 8004f7c:	08004f3d 	.word	0x08004f3d
 8004f80:	080050c3 	.word	0x080050c3
 8004f84:	08004feb 	.word	0x08004feb
 8004f88:	0800507d 	.word	0x0800507d
 8004f8c:	08004f3d 	.word	0x08004f3d
 8004f90:	08004f3d 	.word	0x08004f3d
 8004f94:	080050e5 	.word	0x080050e5
 8004f98:	08004f3d 	.word	0x08004f3d
 8004f9c:	08004feb 	.word	0x08004feb
 8004fa0:	08004f3d 	.word	0x08004f3d
 8004fa4:	08004f3d 	.word	0x08004f3d
 8004fa8:	08005085 	.word	0x08005085
 8004fac:	6833      	ldr	r3, [r6, #0]
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6032      	str	r2, [r6, #0]
 8004fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e09e      	b.n	80050fe <_printf_i+0x1ea>
 8004fc0:	6833      	ldr	r3, [r6, #0]
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	1d19      	adds	r1, r3, #4
 8004fc6:	6031      	str	r1, [r6, #0]
 8004fc8:	0606      	lsls	r6, r0, #24
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0xbc>
 8004fcc:	681d      	ldr	r5, [r3, #0]
 8004fce:	e003      	b.n	8004fd8 <_printf_i+0xc4>
 8004fd0:	0645      	lsls	r5, r0, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0xb8>
 8004fd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fd8:	2d00      	cmp	r5, #0
 8004fda:	da03      	bge.n	8004fe4 <_printf_i+0xd0>
 8004fdc:	232d      	movs	r3, #45	@ 0x2d
 8004fde:	426d      	negs	r5, r5
 8004fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe4:	230a      	movs	r3, #10
 8004fe6:	4859      	ldr	r0, [pc, #356]	@ (800514c <_printf_i+0x238>)
 8004fe8:	e011      	b.n	800500e <_printf_i+0xfa>
 8004fea:	6821      	ldr	r1, [r4, #0]
 8004fec:	6833      	ldr	r3, [r6, #0]
 8004fee:	0608      	lsls	r0, r1, #24
 8004ff0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ff4:	d402      	bmi.n	8004ffc <_printf_i+0xe8>
 8004ff6:	0649      	lsls	r1, r1, #25
 8004ff8:	bf48      	it	mi
 8004ffa:	b2ad      	uxthmi	r5, r5
 8004ffc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ffe:	6033      	str	r3, [r6, #0]
 8005000:	bf14      	ite	ne
 8005002:	230a      	movne	r3, #10
 8005004:	2308      	moveq	r3, #8
 8005006:	4851      	ldr	r0, [pc, #324]	@ (800514c <_printf_i+0x238>)
 8005008:	2100      	movs	r1, #0
 800500a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800500e:	6866      	ldr	r6, [r4, #4]
 8005010:	2e00      	cmp	r6, #0
 8005012:	bfa8      	it	ge
 8005014:	6821      	ldrge	r1, [r4, #0]
 8005016:	60a6      	str	r6, [r4, #8]
 8005018:	bfa4      	itt	ge
 800501a:	f021 0104 	bicge.w	r1, r1, #4
 800501e:	6021      	strge	r1, [r4, #0]
 8005020:	b90d      	cbnz	r5, 8005026 <_printf_i+0x112>
 8005022:	2e00      	cmp	r6, #0
 8005024:	d04b      	beq.n	80050be <_printf_i+0x1aa>
 8005026:	4616      	mov	r6, r2
 8005028:	fbb5 f1f3 	udiv	r1, r5, r3
 800502c:	fb03 5711 	mls	r7, r3, r1, r5
 8005030:	5dc7      	ldrb	r7, [r0, r7]
 8005032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005036:	462f      	mov	r7, r5
 8005038:	42bb      	cmp	r3, r7
 800503a:	460d      	mov	r5, r1
 800503c:	d9f4      	bls.n	8005028 <_printf_i+0x114>
 800503e:	2b08      	cmp	r3, #8
 8005040:	d10b      	bne.n	800505a <_printf_i+0x146>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	07df      	lsls	r7, r3, #31
 8005046:	d508      	bpl.n	800505a <_printf_i+0x146>
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	6861      	ldr	r1, [r4, #4]
 800504c:	4299      	cmp	r1, r3
 800504e:	bfde      	ittt	le
 8005050:	2330      	movle	r3, #48	@ 0x30
 8005052:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005056:	f106 36ff 	addle.w	r6, r6, #4294967295
 800505a:	1b92      	subs	r2, r2, r6
 800505c:	6122      	str	r2, [r4, #16]
 800505e:	464b      	mov	r3, r9
 8005060:	4621      	mov	r1, r4
 8005062:	4640      	mov	r0, r8
 8005064:	f8cd a000 	str.w	sl, [sp]
 8005068:	aa03      	add	r2, sp, #12
 800506a:	f7ff fee1 	bl	8004e30 <_printf_common>
 800506e:	3001      	adds	r0, #1
 8005070:	d14a      	bne.n	8005108 <_printf_i+0x1f4>
 8005072:	f04f 30ff 	mov.w	r0, #4294967295
 8005076:	b004      	add	sp, #16
 8005078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	f043 0320 	orr.w	r3, r3, #32
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	2778      	movs	r7, #120	@ 0x78
 8005086:	4832      	ldr	r0, [pc, #200]	@ (8005150 <_printf_i+0x23c>)
 8005088:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	6831      	ldr	r1, [r6, #0]
 8005090:	061f      	lsls	r7, r3, #24
 8005092:	f851 5b04 	ldr.w	r5, [r1], #4
 8005096:	d402      	bmi.n	800509e <_printf_i+0x18a>
 8005098:	065f      	lsls	r7, r3, #25
 800509a:	bf48      	it	mi
 800509c:	b2ad      	uxthmi	r5, r5
 800509e:	6031      	str	r1, [r6, #0]
 80050a0:	07d9      	lsls	r1, r3, #31
 80050a2:	bf44      	itt	mi
 80050a4:	f043 0320 	orrmi.w	r3, r3, #32
 80050a8:	6023      	strmi	r3, [r4, #0]
 80050aa:	b11d      	cbz	r5, 80050b4 <_printf_i+0x1a0>
 80050ac:	2310      	movs	r3, #16
 80050ae:	e7ab      	b.n	8005008 <_printf_i+0xf4>
 80050b0:	4826      	ldr	r0, [pc, #152]	@ (800514c <_printf_i+0x238>)
 80050b2:	e7e9      	b.n	8005088 <_printf_i+0x174>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	f023 0320 	bic.w	r3, r3, #32
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	e7f6      	b.n	80050ac <_printf_i+0x198>
 80050be:	4616      	mov	r6, r2
 80050c0:	e7bd      	b.n	800503e <_printf_i+0x12a>
 80050c2:	6833      	ldr	r3, [r6, #0]
 80050c4:	6825      	ldr	r5, [r4, #0]
 80050c6:	1d18      	adds	r0, r3, #4
 80050c8:	6961      	ldr	r1, [r4, #20]
 80050ca:	6030      	str	r0, [r6, #0]
 80050cc:	062e      	lsls	r6, r5, #24
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	d501      	bpl.n	80050d6 <_printf_i+0x1c2>
 80050d2:	6019      	str	r1, [r3, #0]
 80050d4:	e002      	b.n	80050dc <_printf_i+0x1c8>
 80050d6:	0668      	lsls	r0, r5, #25
 80050d8:	d5fb      	bpl.n	80050d2 <_printf_i+0x1be>
 80050da:	8019      	strh	r1, [r3, #0]
 80050dc:	2300      	movs	r3, #0
 80050de:	4616      	mov	r6, r2
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	e7bc      	b.n	800505e <_printf_i+0x14a>
 80050e4:	6833      	ldr	r3, [r6, #0]
 80050e6:	2100      	movs	r1, #0
 80050e8:	1d1a      	adds	r2, r3, #4
 80050ea:	6032      	str	r2, [r6, #0]
 80050ec:	681e      	ldr	r6, [r3, #0]
 80050ee:	6862      	ldr	r2, [r4, #4]
 80050f0:	4630      	mov	r0, r6
 80050f2:	f000 f859 	bl	80051a8 <memchr>
 80050f6:	b108      	cbz	r0, 80050fc <_printf_i+0x1e8>
 80050f8:	1b80      	subs	r0, r0, r6
 80050fa:	6060      	str	r0, [r4, #4]
 80050fc:	6863      	ldr	r3, [r4, #4]
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	2300      	movs	r3, #0
 8005102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005106:	e7aa      	b.n	800505e <_printf_i+0x14a>
 8005108:	4632      	mov	r2, r6
 800510a:	4649      	mov	r1, r9
 800510c:	4640      	mov	r0, r8
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	47d0      	blx	sl
 8005112:	3001      	adds	r0, #1
 8005114:	d0ad      	beq.n	8005072 <_printf_i+0x15e>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	079b      	lsls	r3, r3, #30
 800511a:	d413      	bmi.n	8005144 <_printf_i+0x230>
 800511c:	68e0      	ldr	r0, [r4, #12]
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	4298      	cmp	r0, r3
 8005122:	bfb8      	it	lt
 8005124:	4618      	movlt	r0, r3
 8005126:	e7a6      	b.n	8005076 <_printf_i+0x162>
 8005128:	2301      	movs	r3, #1
 800512a:	4632      	mov	r2, r6
 800512c:	4649      	mov	r1, r9
 800512e:	4640      	mov	r0, r8
 8005130:	47d0      	blx	sl
 8005132:	3001      	adds	r0, #1
 8005134:	d09d      	beq.n	8005072 <_printf_i+0x15e>
 8005136:	3501      	adds	r5, #1
 8005138:	68e3      	ldr	r3, [r4, #12]
 800513a:	9903      	ldr	r1, [sp, #12]
 800513c:	1a5b      	subs	r3, r3, r1
 800513e:	42ab      	cmp	r3, r5
 8005140:	dcf2      	bgt.n	8005128 <_printf_i+0x214>
 8005142:	e7eb      	b.n	800511c <_printf_i+0x208>
 8005144:	2500      	movs	r5, #0
 8005146:	f104 0619 	add.w	r6, r4, #25
 800514a:	e7f5      	b.n	8005138 <_printf_i+0x224>
 800514c:	080054cc 	.word	0x080054cc
 8005150:	080054dd 	.word	0x080054dd

08005154 <memmove>:
 8005154:	4288      	cmp	r0, r1
 8005156:	b510      	push	{r4, lr}
 8005158:	eb01 0402 	add.w	r4, r1, r2
 800515c:	d902      	bls.n	8005164 <memmove+0x10>
 800515e:	4284      	cmp	r4, r0
 8005160:	4623      	mov	r3, r4
 8005162:	d807      	bhi.n	8005174 <memmove+0x20>
 8005164:	1e43      	subs	r3, r0, #1
 8005166:	42a1      	cmp	r1, r4
 8005168:	d008      	beq.n	800517c <memmove+0x28>
 800516a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800516e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005172:	e7f8      	b.n	8005166 <memmove+0x12>
 8005174:	4601      	mov	r1, r0
 8005176:	4402      	add	r2, r0
 8005178:	428a      	cmp	r2, r1
 800517a:	d100      	bne.n	800517e <memmove+0x2a>
 800517c:	bd10      	pop	{r4, pc}
 800517e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005186:	e7f7      	b.n	8005178 <memmove+0x24>

08005188 <_sbrk_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	2300      	movs	r3, #0
 800518c:	4d05      	ldr	r5, [pc, #20]	@ (80051a4 <_sbrk_r+0x1c>)
 800518e:	4604      	mov	r4, r0
 8005190:	4608      	mov	r0, r1
 8005192:	602b      	str	r3, [r5, #0]
 8005194:	f7fc f8e6 	bl	8001364 <_sbrk>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_sbrk_r+0x1a>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_sbrk_r+0x1a>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	200003a4 	.word	0x200003a4

080051a8 <memchr>:
 80051a8:	4603      	mov	r3, r0
 80051aa:	b510      	push	{r4, lr}
 80051ac:	b2c9      	uxtb	r1, r1
 80051ae:	4402      	add	r2, r0
 80051b0:	4293      	cmp	r3, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	d101      	bne.n	80051ba <memchr+0x12>
 80051b6:	2000      	movs	r0, #0
 80051b8:	e003      	b.n	80051c2 <memchr+0x1a>
 80051ba:	7804      	ldrb	r4, [r0, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	428c      	cmp	r4, r1
 80051c0:	d1f6      	bne.n	80051b0 <memchr+0x8>
 80051c2:	bd10      	pop	{r4, pc}

080051c4 <memcpy>:
 80051c4:	440a      	add	r2, r1
 80051c6:	4291      	cmp	r1, r2
 80051c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80051cc:	d100      	bne.n	80051d0 <memcpy+0xc>
 80051ce:	4770      	bx	lr
 80051d0:	b510      	push	{r4, lr}
 80051d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051d6:	4291      	cmp	r1, r2
 80051d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051dc:	d1f9      	bne.n	80051d2 <memcpy+0xe>
 80051de:	bd10      	pop	{r4, pc}

080051e0 <_realloc_r>:
 80051e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e4:	4680      	mov	r8, r0
 80051e6:	4615      	mov	r5, r2
 80051e8:	460c      	mov	r4, r1
 80051ea:	b921      	cbnz	r1, 80051f6 <_realloc_r+0x16>
 80051ec:	4611      	mov	r1, r2
 80051ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f2:	f7ff bc39 	b.w	8004a68 <_malloc_r>
 80051f6:	b92a      	cbnz	r2, 8005204 <_realloc_r+0x24>
 80051f8:	f7ff fbcc 	bl	8004994 <_free_r>
 80051fc:	2400      	movs	r4, #0
 80051fe:	4620      	mov	r0, r4
 8005200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005204:	f000 f81a 	bl	800523c <_malloc_usable_size_r>
 8005208:	4285      	cmp	r5, r0
 800520a:	4606      	mov	r6, r0
 800520c:	d802      	bhi.n	8005214 <_realloc_r+0x34>
 800520e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005212:	d8f4      	bhi.n	80051fe <_realloc_r+0x1e>
 8005214:	4629      	mov	r1, r5
 8005216:	4640      	mov	r0, r8
 8005218:	f7ff fc26 	bl	8004a68 <_malloc_r>
 800521c:	4607      	mov	r7, r0
 800521e:	2800      	cmp	r0, #0
 8005220:	d0ec      	beq.n	80051fc <_realloc_r+0x1c>
 8005222:	42b5      	cmp	r5, r6
 8005224:	462a      	mov	r2, r5
 8005226:	4621      	mov	r1, r4
 8005228:	bf28      	it	cs
 800522a:	4632      	movcs	r2, r6
 800522c:	f7ff ffca 	bl	80051c4 <memcpy>
 8005230:	4621      	mov	r1, r4
 8005232:	4640      	mov	r0, r8
 8005234:	f7ff fbae 	bl	8004994 <_free_r>
 8005238:	463c      	mov	r4, r7
 800523a:	e7e0      	b.n	80051fe <_realloc_r+0x1e>

0800523c <_malloc_usable_size_r>:
 800523c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005240:	1f18      	subs	r0, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	bfbc      	itt	lt
 8005246:	580b      	ldrlt	r3, [r1, r0]
 8005248:	18c0      	addlt	r0, r0, r3
 800524a:	4770      	bx	lr

0800524c <_init>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr

08005258 <_fini>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	bf00      	nop
 800525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525e:	bc08      	pop	{r3}
 8005260:	469e      	mov	lr, r3
 8005262:	4770      	bx	lr
