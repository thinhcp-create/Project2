
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08004ee0  08004ee0  00005ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005138  08005138  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005140  08005140  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005140  08005140  00006140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005148  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000064  080051ac  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  080051ac  000073a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b799  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002174  00000000  00000000  00012826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  000149a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084a  00000000  00000000  00015458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c23  00000000  00000000  00015ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efb7  00000000  00000000  0002d8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f61  00000000  00000000  0003c87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c17dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  000c1820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000c48a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ec8 	.word	0x08004ec8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08004ec8 	.word	0x08004ec8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <DS1307_GetRegByte>:
 *      Author: Salmon1611
 */
#include "ds1307.h"
extern I2C_HandleTypeDef hi2c1;

uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b086      	sub	sp, #24
 8000164:	af02      	add	r7, sp, #8
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
    uint8_t val=0;
 800016a:	2300      	movs	r3, #0
 800016c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 800016e:	1dfa      	adds	r2, r7, #7
 8000170:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000174:	9300      	str	r3, [sp, #0]
 8000176:	2301      	movs	r3, #1
 8000178:	21d0      	movs	r1, #208	@ 0xd0
 800017a:	4809      	ldr	r0, [pc, #36]	@ (80001a0 <DS1307_GetRegByte+0x40>)
 800017c:	f002 f8d2 	bl	8002324 <HAL_I2C_Master_Transmit>
//    HAL_Delay(5);
    HAL_I2C_Master_Receive(&hi2c1, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8000180:	f107 020f 	add.w	r2, r7, #15
 8000184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000188:	9300      	str	r3, [sp, #0]
 800018a:	2301      	movs	r3, #1
 800018c:	21d0      	movs	r1, #208	@ 0xd0
 800018e:	4804      	ldr	r0, [pc, #16]	@ (80001a0 <DS1307_GetRegByte+0x40>)
 8000190:	f002 f9c6 	bl	8002520 <HAL_I2C_Master_Receive>
    return val;
 8000194:	7bfb      	ldrb	r3, [r7, #15]
}
 8000196:	4618      	mov	r0, r3
 8000198:	3710      	adds	r7, #16
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	20000198 	.word	0x20000198

080001a4 <DS1307_DecodeBCD>:
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	091b      	lsrs	r3, r3, #4
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	461a      	mov	r2, r3
 80001b6:	0092      	lsls	r2, r2, #2
 80001b8:	4413      	add	r3, r2
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	b2da      	uxtb	r2, r3
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	f003 030f 	and.w	r3, r3, #15
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	4413      	add	r3, r2
 80001c8:	b2db      	uxtb	r3, r3
}
 80001ca:	4618      	mov	r0, r3
 80001cc:	370c      	adds	r7, #12
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <DS1307_EncodeBCD>:
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
    return (dec % 10 + ((dec / 10) << 4));
 80001de:	79fa      	ldrb	r2, [r7, #7]
 80001e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <DS1307_EncodeBCD+0x40>)
 80001e2:	fba3 1302 	umull	r1, r3, r3, r2
 80001e6:	08d9      	lsrs	r1, r3, #3
 80001e8:	460b      	mov	r3, r1
 80001ea:	009b      	lsls	r3, r3, #2
 80001ec:	440b      	add	r3, r1
 80001ee:	005b      	lsls	r3, r3, #1
 80001f0:	1ad3      	subs	r3, r2, r3
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4907      	ldr	r1, [pc, #28]	@ (8000214 <DS1307_EncodeBCD+0x40>)
 80001f8:	fba1 1303 	umull	r1, r3, r1, r3
 80001fc:	08db      	lsrs	r3, r3, #3
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	011b      	lsls	r3, r3, #4
 8000202:	b2db      	uxtb	r3, r3
 8000204:	4413      	add	r3, r2
 8000206:	b2db      	uxtb	r3, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	cccccccd 	.word	0xcccccccd

08000218 <DS1307_gettime>:
void DS1307_gettime(DS1307_STRUCT *ds1307){
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    uint16_t cen;
    ds1307->sec=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8000220:	2000      	movs	r0, #0
 8000222:	f7ff ff9d 	bl	8000160 <DS1307_GetRegByte>
 8000226:	4603      	mov	r3, r0
 8000228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800022c:	b2db      	uxtb	r3, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f7ff ffb8 	bl	80001a4 <DS1307_DecodeBCD>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	701a      	strb	r2, [r3, #0]
    ds1307->min=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 800023c:	2001      	movs	r0, #1
 800023e:	f7ff ff8f 	bl	8000160 <DS1307_GetRegByte>
 8000242:	4603      	mov	r3, r0
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ffad 	bl	80001a4 <DS1307_DecodeBCD>
 800024a:	4603      	mov	r3, r0
 800024c:	461a      	mov	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	705a      	strb	r2, [r3, #1]
    ds1307->hour=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff84 	bl	8000160 <DS1307_GetRegByte>
 8000258:	4603      	mov	r3, r0
 800025a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ff9f 	bl	80001a4 <DS1307_DecodeBCD>
 8000266:	4603      	mov	r3, r0
 8000268:	461a      	mov	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	709a      	strb	r2, [r3, #2]
//    ds1307->dow=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
    ds1307->date=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 800026e:	2004      	movs	r0, #4
 8000270:	f7ff ff76 	bl	8000160 <DS1307_GetRegByte>
 8000274:	4603      	mov	r3, r0
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff94 	bl	80001a4 <DS1307_DecodeBCD>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	711a      	strb	r2, [r3, #4]
    ds1307->month=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8000284:	2005      	movs	r0, #5
 8000286:	f7ff ff6b 	bl	8000160 <DS1307_GetRegByte>
 800028a:	4603      	mov	r3, r0
 800028c:	4618      	mov	r0, r3
 800028e:	f7ff ff89 	bl	80001a4 <DS1307_DecodeBCD>
 8000292:	4603      	mov	r3, r0
 8000294:	461a      	mov	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	715a      	strb	r2, [r3, #5]
    cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800029a:	2010      	movs	r0, #16
 800029c:	f7ff ff60 	bl	8000160 <DS1307_GetRegByte>
 80002a0:	4603      	mov	r3, r0
 80002a2:	461a      	mov	r2, r3
 80002a4:	0092      	lsls	r2, r2, #2
 80002a6:	4413      	add	r3, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	0091      	lsls	r1, r2, #2
 80002ac:	461a      	mov	r2, r3
 80002ae:	460b      	mov	r3, r1
 80002b0:	4413      	add	r3, r2
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	81fb      	strh	r3, [r7, #14]
    ds1307->year=DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80002b6:	2006      	movs	r0, #6
 80002b8:	f7ff ff52 	bl	8000160 <DS1307_GetRegByte>
 80002bc:	4603      	mov	r3, r0
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ff70 	bl	80001a4 <DS1307_DecodeBCD>
 80002c4:	4603      	mov	r3, r0
 80002c6:	461a      	mov	r2, r3
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	4413      	add	r3, r2
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	80da      	strh	r2, [r3, #6]
}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DS1307_SetRegByte>:
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af02      	add	r7, sp, #8
 80002e2:	4603      	mov	r3, r0
 80002e4:	460a      	mov	r2, r1
 80002e6:	71fb      	strb	r3, [r7, #7]
 80002e8:	4613      	mov	r3, r2
 80002ea:	71bb      	strb	r3, [r7, #6]
    uint8_t bytes[2] = { regAddr, val };
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	733b      	strb	r3, [r7, #12]
 80002f0:	79bb      	ldrb	r3, [r7, #6]
 80002f2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80002f4:	f107 020c 	add.w	r2, r7, #12
 80002f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	2302      	movs	r3, #2
 8000300:	21d0      	movs	r1, #208	@ 0xd0
 8000302:	4803      	ldr	r0, [pc, #12]	@ (8000310 <DS1307_SetRegByte+0x34>)
 8000304:	f002 f80e 	bl	8002324 <HAL_I2C_Master_Transmit>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000198 	.word	0x20000198

08000314 <DS1307_GetClockHalt>:
uint8_t DS1307_GetClockHalt(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8000318:	2000      	movs	r0, #0
 800031a:	f7ff ff21 	bl	8000160 <DS1307_GetRegByte>
 800031e:	4603      	mov	r3, r0
 8000320:	11db      	asrs	r3, r3, #7
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
}
 800032a:	4618      	mov	r0, r3
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <DS1307_settime>:
void DS1307_settime(DS1307_STRUCT *ds1307){
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(ds1307->sec | DS1307_GetClockHalt()));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	781c      	ldrb	r4, [r3, #0]
 800033c:	f7ff ffea 	bl	8000314 <DS1307_GetClockHalt>
 8000340:	4603      	mov	r3, r0
 8000342:	4323      	orrs	r3, r4
 8000344:	b2db      	uxtb	r3, r3
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff44 	bl	80001d4 <DS1307_EncodeBCD>
 800034c:	4603      	mov	r3, r0
 800034e:	4619      	mov	r1, r3
 8000350:	2000      	movs	r0, #0
 8000352:	f7ff ffc3 	bl	80002dc <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(ds1307->min));
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	785b      	ldrb	r3, [r3, #1]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff3a 	bl	80001d4 <DS1307_EncodeBCD>
 8000360:	4603      	mov	r3, r0
 8000362:	4619      	mov	r1, r3
 8000364:	2001      	movs	r0, #1
 8000366:	f7ff ffb9 	bl	80002dc <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(ds1307->hour & 0x3f));//hour_24mode Hour in 24h format, 0 to 23.
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	789b      	ldrb	r3, [r3, #2]
 800036e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff2d 	bl	80001d4 <DS1307_EncodeBCD>
 800037a:	4603      	mov	r3, r0
 800037c:	4619      	mov	r1, r3
 800037e:	2002      	movs	r0, #2
 8000380:	f7ff ffac 	bl	80002dc <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(ds1307->dow));//dayOfWeek Days since last Sunday, 0 to 6.
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	78db      	ldrb	r3, [r3, #3]
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff23 	bl	80001d4 <DS1307_EncodeBCD>
 800038e:	4603      	mov	r3, r0
 8000390:	4619      	mov	r1, r3
 8000392:	2003      	movs	r0, #3
 8000394:	f7ff ffa2 	bl	80002dc <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(ds1307->date));//date Day of month, 1 to 31.
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff19 	bl	80001d4 <DS1307_EncodeBCD>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4619      	mov	r1, r3
 80003a6:	2004      	movs	r0, #4
 80003a8:	f7ff ff98 	bl	80002dc <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(ds1307->month));//month Month, 1 to 12.
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	795b      	ldrb	r3, [r3, #5]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff0f 	bl	80001d4 <DS1307_EncodeBCD>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4619      	mov	r1, r3
 80003ba:	2005      	movs	r0, #5
 80003bc:	f7ff ff8e 	bl	80002dc <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_CENT, ds1307->year / 100);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	88db      	ldrh	r3, [r3, #6]
 80003c4:	4a10      	ldr	r2, [pc, #64]	@ (8000408 <DS1307_settime+0xd8>)
 80003c6:	fba2 2303 	umull	r2, r3, r2, r3
 80003ca:	095b      	lsrs	r3, r3, #5
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	2010      	movs	r0, #16
 80003d4:	f7ff ff82 	bl	80002dc <DS1307_SetRegByte>
    DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(ds1307->year % 100));//2000 to 2099.
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	88db      	ldrh	r3, [r3, #6]
 80003dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000408 <DS1307_settime+0xd8>)
 80003de:	fba2 1203 	umull	r1, r2, r2, r3
 80003e2:	0952      	lsrs	r2, r2, #5
 80003e4:	2164      	movs	r1, #100	@ 0x64
 80003e6:	fb01 f202 	mul.w	r2, r1, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff feef 	bl	80001d4 <DS1307_EncodeBCD>
 80003f6:	4603      	mov	r3, r0
 80003f8:	4619      	mov	r1, r3
 80003fa:	2006      	movs	r0, #6
 80003fc:	f7ff ff6e 	bl	80002dc <DS1307_SetRegByte>
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bd90      	pop	{r4, r7, pc}
 8000408:	51eb851f 	.word	0x51eb851f

0800040c <dayOfWeek>:
void DS1307_config(){
    DS1307_SetClockHalt(0);
    DS1307_SetTimeZone(+8, 00);
}

uint8_t dayOfWeek(uint8_t day, uint8_t month, uint16_t year) {
 800040c:	b4b0      	push	{r4, r5, r7}
 800040e:	b095      	sub	sp, #84	@ 0x54
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	460b      	mov	r3, r1
 8000418:	71bb      	strb	r3, [r7, #6]
 800041a:	4613      	mov	r3, r2
 800041c:	80bb      	strh	r3, [r7, #4]
    // M?ng luu tr? s? ngày c?a các tháng
    int daysInMonth[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800041e:	4b46      	ldr	r3, [pc, #280]	@ (8000538 <dayOfWeek+0x12c>)
 8000420:	f107 040c 	add.w	r4, r7, #12
 8000424:	461d      	mov	r5, r3
 8000426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800042c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000432:	682b      	ldr	r3, [r5, #0]
 8000434:	6023      	str	r3, [r4, #0]

    // Ki?m tra nam nhu?n và c?p nh?t s? ngày c?a tháng 2
    if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
 8000436:	88bb      	ldrh	r3, [r7, #4]
 8000438:	f003 0303 	and.w	r3, r3, #3
 800043c:	b29b      	uxth	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d10b      	bne.n	800045a <dayOfWeek+0x4e>
 8000442:	88bb      	ldrh	r3, [r7, #4]
 8000444:	4a3d      	ldr	r2, [pc, #244]	@ (800053c <dayOfWeek+0x130>)
 8000446:	fba2 1203 	umull	r1, r2, r2, r3
 800044a:	0952      	lsrs	r2, r2, #5
 800044c:	2164      	movs	r1, #100	@ 0x64
 800044e:	fb01 f202 	mul.w	r2, r1, r2
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	b29b      	uxth	r3, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	d10c      	bne.n	8000474 <dayOfWeek+0x68>
 800045a:	88bb      	ldrh	r3, [r7, #4]
 800045c:	4a37      	ldr	r2, [pc, #220]	@ (800053c <dayOfWeek+0x130>)
 800045e:	fba2 1203 	umull	r1, r2, r2, r3
 8000462:	09d2      	lsrs	r2, r2, #7
 8000464:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000468:	fb01 f202 	mul.w	r2, r1, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	b29b      	uxth	r3, r3
 8000470:	2b00      	cmp	r3, #0
 8000472:	d101      	bne.n	8000478 <dayOfWeek+0x6c>
        daysInMonth[2] = 29;
 8000474:	231d      	movs	r3, #29
 8000476:	617b      	str	r3, [r7, #20]
    }

    // Tính s? ngày tính t? ngày 1/1/1 d?n ngày c?n ki?m tra
    int totalDays = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int y = 1; y < year; y++) {
 800047c:	2301      	movs	r3, #1
 800047e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000480:	e02b      	b.n	80004da <dayOfWeek+0xce>
        if ((y % 4 == 0 && y % 100 != 0) || y % 400 == 0) {
 8000482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000484:	f003 0303 	and.w	r3, r3, #3
 8000488:	2b00      	cmp	r3, #0
 800048a:	d10c      	bne.n	80004a6 <dayOfWeek+0x9a>
 800048c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800048e:	4b2b      	ldr	r3, [pc, #172]	@ (800053c <dayOfWeek+0x130>)
 8000490:	fb83 1302 	smull	r1, r3, r3, r2
 8000494:	1159      	asrs	r1, r3, #5
 8000496:	17d3      	asrs	r3, r2, #31
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	2164      	movs	r1, #100	@ 0x64
 800049c:	fb01 f303 	mul.w	r3, r1, r3
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d10d      	bne.n	80004c2 <dayOfWeek+0xb6>
 80004a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80004a8:	4b24      	ldr	r3, [pc, #144]	@ (800053c <dayOfWeek+0x130>)
 80004aa:	fb83 1302 	smull	r1, r3, r3, r2
 80004ae:	11d9      	asrs	r1, r3, #7
 80004b0:	17d3      	asrs	r3, r2, #31
 80004b2:	1acb      	subs	r3, r1, r3
 80004b4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80004b8:	fb01 f303 	mul.w	r3, r1, r3
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d104      	bne.n	80004cc <dayOfWeek+0xc0>
            totalDays += 366;
 80004c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80004c4:	f503 73b7 	add.w	r3, r3, #366	@ 0x16e
 80004c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80004ca:	e003      	b.n	80004d4 <dayOfWeek+0xc8>
        } else {
            totalDays += 365;
 80004cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80004ce:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 80004d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int y = 1; y < year; y++) {
 80004d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80004d6:	3301      	adds	r3, #1
 80004d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80004da:	88bb      	ldrh	r3, [r7, #4]
 80004dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80004de:	429a      	cmp	r2, r3
 80004e0:	dbcf      	blt.n	8000482 <dayOfWeek+0x76>
        }
    }

    for (int m = 1; m < month; m++) {
 80004e2:	2301      	movs	r3, #1
 80004e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80004e6:	e00b      	b.n	8000500 <dayOfWeek+0xf4>
        totalDays += daysInMonth[m];
 80004e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	3350      	adds	r3, #80	@ 0x50
 80004ee:	443b      	add	r3, r7
 80004f0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80004f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80004f6:	4413      	add	r3, r2
 80004f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int m = 1; m < month; m++) {
 80004fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004fc:	3301      	adds	r3, #1
 80004fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000504:	429a      	cmp	r2, r3
 8000506:	dbef      	blt.n	80004e8 <dayOfWeek+0xdc>
    }

    totalDays += day;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800050c:	4413      	add	r3, r2
 800050e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Tính th? trong tu?n
    int dayOfWeek = totalDays % 7;
 8000510:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <dayOfWeek+0x134>)
 8000514:	fb83 1302 	smull	r1, r3, r3, r2
 8000518:	4413      	add	r3, r2
 800051a:	1099      	asrs	r1, r3, #2
 800051c:	17d3      	asrs	r3, r2, #31
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	460b      	mov	r3, r1
 8000522:	00db      	lsls	r3, r3, #3
 8000524:	1a5b      	subs	r3, r3, r1
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	643b      	str	r3, [r7, #64]	@ 0x40

    return dayOfWeek;
 800052a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800052c:	b2db      	uxtb	r3, r3
}
 800052e:	4618      	mov	r0, r3
 8000530:	3754      	adds	r7, #84	@ 0x54
 8000532:	46bd      	mov	sp, r7
 8000534:	bcb0      	pop	{r4, r5, r7}
 8000536:	4770      	bx	lr
 8000538:	08004ee0 	.word	0x08004ee0
 800053c:	51eb851f 	.word	0x51eb851f
 8000540:	92492493 	.word	0x92492493

08000544 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af02      	add	r7, sp, #8
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f023 030f 	bic.w	r3, r3, #15
 8000554:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	f043 030c 	orr.w	r3, r3, #12
 8000562:	b2db      	uxtb	r3, r3
 8000564:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	b2db      	uxtb	r3, r3
 800056e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	f043 030c 	orr.w	r3, r3, #12
 8000576:	b2db      	uxtb	r3, r3
 8000578:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	b2db      	uxtb	r3, r3
 8000582:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000584:	f107 0208 	add.w	r2, r7, #8
 8000588:	2364      	movs	r3, #100	@ 0x64
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2304      	movs	r3, #4
 800058e:	214e      	movs	r1, #78	@ 0x4e
 8000590:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <lcd_send_cmd+0x5c>)
 8000592:	f001 fec7 	bl	8002324 <HAL_I2C_Master_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000198 	.word	0x20000198

080005a4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f023 030f 	bic.w	r3, r3, #15
 80005b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	f043 030d 	orr.w	r3, r3, #13
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	f043 0309 	orr.w	r3, r3, #9
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	f043 030d 	orr.w	r3, r3, #13
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	f043 0309 	orr.w	r3, r3, #9
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005e4:	f107 0208 	add.w	r2, r7, #8
 80005e8:	2364      	movs	r3, #100	@ 0x64
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2304      	movs	r3, #4
 80005ee:	214e      	movs	r1, #78	@ 0x4e
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <lcd_send_data+0x5c>)
 80005f2:	f001 fe97 	bl	8002324 <HAL_I2C_Master_Transmit>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000198 	.word	0x20000198

08000604 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
    switch (row)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <lcd_put_cur+0x18>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d005      	beq.n	8000626 <lcd_put_cur+0x22>
 800061a:	e009      	b.n	8000630 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000622:	603b      	str	r3, [r7, #0]
            break;
 8000624:	e004      	b.n	8000630 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800062c:	603b      	str	r3, [r7, #0]
            break;
 800062e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff85 	bl	8000544 <lcd_send_cmd>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <lcd_init>:


void lcd_init (void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000646:	2032      	movs	r0, #50	@ 0x32
 8000648:	f001 f9a8 	bl	800199c <HAL_Delay>
	lcd_send_cmd (0x30);
 800064c:	2030      	movs	r0, #48	@ 0x30
 800064e:	f7ff ff79 	bl	8000544 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000652:	2005      	movs	r0, #5
 8000654:	f001 f9a2 	bl	800199c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000658:	2030      	movs	r0, #48	@ 0x30
 800065a:	f7ff ff73 	bl	8000544 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800065e:	2001      	movs	r0, #1
 8000660:	f001 f99c 	bl	800199c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000664:	2030      	movs	r0, #48	@ 0x30
 8000666:	f7ff ff6d 	bl	8000544 <lcd_send_cmd>
	HAL_Delay(10);
 800066a:	200a      	movs	r0, #10
 800066c:	f001 f996 	bl	800199c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000670:	2020      	movs	r0, #32
 8000672:	f7ff ff67 	bl	8000544 <lcd_send_cmd>
	HAL_Delay(10);
 8000676:	200a      	movs	r0, #10
 8000678:	f001 f990 	bl	800199c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800067c:	2028      	movs	r0, #40	@ 0x28
 800067e:	f7ff ff61 	bl	8000544 <lcd_send_cmd>
	HAL_Delay(1);
 8000682:	2001      	movs	r0, #1
 8000684:	f001 f98a 	bl	800199c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000688:	2008      	movs	r0, #8
 800068a:	f7ff ff5b 	bl	8000544 <lcd_send_cmd>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f001 f984 	bl	800199c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ff55 	bl	8000544 <lcd_send_cmd>
	HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f001 f97e 	bl	800199c <HAL_Delay>
	HAL_Delay(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f001 f97b 	bl	800199c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006a6:	2006      	movs	r0, #6
 80006a8:	f7ff ff4c 	bl	8000544 <lcd_send_cmd>
	HAL_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f001 f975 	bl	800199c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006b2:	200c      	movs	r0, #12
 80006b4:	f7ff ff46 	bl	8000544 <lcd_send_cmd>

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006c4:	e006      	b.n	80006d4 <lcd_send_string+0x18>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff68 	bl	80005a4 <lcd_send_data>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1f4      	bne.n	80006c6 <lcd_send_string+0xa>
}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <display_digit>:


#include "led7seg.h"

// Hàm hiển thị số từ 0 đến 9 trên LED 7 thanh
void display_digit(uint8_t digit) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    // Đảm bảo chỉ hiển thị các số từ 0 đến 9
    if (digit > 9) return;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b09      	cmp	r3, #9
 80006f6:	f200 81cd 	bhi.w	8000a94 <display_digit+0x3ac>

    // Xuất mức tín hiệu tương ứng cho các số từ 0 đến 9
    switch (digit) {
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b09      	cmp	r3, #9
 80006fe:	f200 81ca 	bhi.w	8000a96 <display_digit+0x3ae>
 8000702:	a201      	add	r2, pc, #4	@ (adr r2, 8000708 <display_digit+0x20>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	08000731 	.word	0x08000731
 800070c:	08000787 	.word	0x08000787
 8000710:	080007dd 	.word	0x080007dd
 8000714:	08000833 	.word	0x08000833
 8000718:	08000889 	.word	0x08000889
 800071c:	080008df 	.word	0x080008df
 8000720:	08000935 	.word	0x08000935
 8000724:	0800098b 	.word	0x0800098b
 8000728:	080009e1 	.word	0x080009e1
 800072c:	08000a37 	.word	0x08000a37
        case 0:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000736:	48d5      	ldr	r0, [pc, #852]	@ (8000a8c <display_digit+0x3a4>)
 8000738:	f001 fc98 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000742:	48d2      	ldr	r0, [pc, #840]	@ (8000a8c <display_digit+0x3a4>)
 8000744:	f001 fc92 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800074e:	48d0      	ldr	r0, [pc, #832]	@ (8000a90 <display_digit+0x3a8>)
 8000750:	f001 fc8c 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075a:	48cd      	ldr	r0, [pc, #820]	@ (8000a90 <display_digit+0x3a8>)
 800075c:	f001 fc86 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000766:	48ca      	ldr	r0, [pc, #808]	@ (8000a90 <display_digit+0x3a8>)
 8000768:	f001 fc80 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000772:	48c6      	ldr	r0, [pc, #792]	@ (8000a8c <display_digit+0x3a4>)
 8000774:	f001 fc7a 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800077e:	48c3      	ldr	r0, [pc, #780]	@ (8000a8c <display_digit+0x3a4>)
 8000780:	f001 fc74 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000784:	e187      	b.n	8000a96 <display_digit+0x3ae>
        case 1:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800078c:	48bf      	ldr	r0, [pc, #764]	@ (8000a8c <display_digit+0x3a4>)
 800078e:	f001 fc6d 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000798:	48bc      	ldr	r0, [pc, #752]	@ (8000a8c <display_digit+0x3a4>)
 800079a:	f001 fc67 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a4:	48ba      	ldr	r0, [pc, #744]	@ (8000a90 <display_digit+0x3a8>)
 80007a6:	f001 fc61 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b0:	48b7      	ldr	r0, [pc, #732]	@ (8000a90 <display_digit+0x3a8>)
 80007b2:	f001 fc5b 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007bc:	48b4      	ldr	r0, [pc, #720]	@ (8000a90 <display_digit+0x3a8>)
 80007be:	f001 fc55 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007c8:	48b0      	ldr	r0, [pc, #704]	@ (8000a8c <display_digit+0x3a4>)
 80007ca:	f001 fc4f 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007d4:	48ad      	ldr	r0, [pc, #692]	@ (8000a8c <display_digit+0x3a4>)
 80007d6:	f001 fc49 	bl	800206c <HAL_GPIO_WritePin>
            break;
 80007da:	e15c      	b.n	8000a96 <display_digit+0x3ae>
        case 2:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e2:	48aa      	ldr	r0, [pc, #680]	@ (8000a8c <display_digit+0x3a4>)
 80007e4:	f001 fc42 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ee:	48a7      	ldr	r0, [pc, #668]	@ (8000a8c <display_digit+0x3a4>)
 80007f0:	f001 fc3c 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007fa:	48a5      	ldr	r0, [pc, #660]	@ (8000a90 <display_digit+0x3a8>)
 80007fc:	f001 fc36 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000806:	48a2      	ldr	r0, [pc, #648]	@ (8000a90 <display_digit+0x3a8>)
 8000808:	f001 fc30 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000812:	489f      	ldr	r0, [pc, #636]	@ (8000a90 <display_digit+0x3a8>)
 8000814:	f001 fc2a 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800081e:	489b      	ldr	r0, [pc, #620]	@ (8000a8c <display_digit+0x3a4>)
 8000820:	f001 fc24 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800082a:	4898      	ldr	r0, [pc, #608]	@ (8000a8c <display_digit+0x3a4>)
 800082c:	f001 fc1e 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000830:	e131      	b.n	8000a96 <display_digit+0x3ae>
        case 3:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000838:	4894      	ldr	r0, [pc, #592]	@ (8000a8c <display_digit+0x3a4>)
 800083a:	f001 fc17 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000844:	4891      	ldr	r0, [pc, #580]	@ (8000a8c <display_digit+0x3a4>)
 8000846:	f001 fc11 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000850:	488f      	ldr	r0, [pc, #572]	@ (8000a90 <display_digit+0x3a8>)
 8000852:	f001 fc0b 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085c:	488c      	ldr	r0, [pc, #560]	@ (8000a90 <display_digit+0x3a8>)
 800085e:	f001 fc05 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000868:	4889      	ldr	r0, [pc, #548]	@ (8000a90 <display_digit+0x3a8>)
 800086a:	f001 fbff 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000874:	4885      	ldr	r0, [pc, #532]	@ (8000a8c <display_digit+0x3a4>)
 8000876:	f001 fbf9 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000880:	4882      	ldr	r0, [pc, #520]	@ (8000a8c <display_digit+0x3a4>)
 8000882:	f001 fbf3 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000886:	e106      	b.n	8000a96 <display_digit+0x3ae>
        case 4:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088e:	487f      	ldr	r0, [pc, #508]	@ (8000a8c <display_digit+0x3a4>)
 8000890:	f001 fbec 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800089a:	487c      	ldr	r0, [pc, #496]	@ (8000a8c <display_digit+0x3a4>)
 800089c:	f001 fbe6 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a6:	487a      	ldr	r0, [pc, #488]	@ (8000a90 <display_digit+0x3a8>)
 80008a8:	f001 fbe0 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b2:	4877      	ldr	r0, [pc, #476]	@ (8000a90 <display_digit+0x3a8>)
 80008b4:	f001 fbda 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008be:	4874      	ldr	r0, [pc, #464]	@ (8000a90 <display_digit+0x3a8>)
 80008c0:	f001 fbd4 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ca:	4870      	ldr	r0, [pc, #448]	@ (8000a8c <display_digit+0x3a4>)
 80008cc:	f001 fbce 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d6:	486d      	ldr	r0, [pc, #436]	@ (8000a8c <display_digit+0x3a4>)
 80008d8:	f001 fbc8 	bl	800206c <HAL_GPIO_WritePin>
            break;
 80008dc:	e0db      	b.n	8000a96 <display_digit+0x3ae>
        case 5:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e4:	4869      	ldr	r0, [pc, #420]	@ (8000a8c <display_digit+0x3a4>)
 80008e6:	f001 fbc1 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f0:	4866      	ldr	r0, [pc, #408]	@ (8000a8c <display_digit+0x3a4>)
 80008f2:	f001 fbbb 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008fc:	4864      	ldr	r0, [pc, #400]	@ (8000a90 <display_digit+0x3a8>)
 80008fe:	f001 fbb5 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000908:	4861      	ldr	r0, [pc, #388]	@ (8000a90 <display_digit+0x3a8>)
 800090a:	f001 fbaf 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000914:	485e      	ldr	r0, [pc, #376]	@ (8000a90 <display_digit+0x3a8>)
 8000916:	f001 fba9 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000920:	485a      	ldr	r0, [pc, #360]	@ (8000a8c <display_digit+0x3a4>)
 8000922:	f001 fba3 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800092c:	4857      	ldr	r0, [pc, #348]	@ (8000a8c <display_digit+0x3a4>)
 800092e:	f001 fb9d 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000932:	e0b0      	b.n	8000a96 <display_digit+0x3ae>
        case 6:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800093a:	4854      	ldr	r0, [pc, #336]	@ (8000a8c <display_digit+0x3a4>)
 800093c:	f001 fb96 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000946:	4851      	ldr	r0, [pc, #324]	@ (8000a8c <display_digit+0x3a4>)
 8000948:	f001 fb90 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000952:	484f      	ldr	r0, [pc, #316]	@ (8000a90 <display_digit+0x3a8>)
 8000954:	f001 fb8a 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800095e:	484c      	ldr	r0, [pc, #304]	@ (8000a90 <display_digit+0x3a8>)
 8000960:	f001 fb84 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096a:	4849      	ldr	r0, [pc, #292]	@ (8000a90 <display_digit+0x3a8>)
 800096c:	f001 fb7e 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000976:	4845      	ldr	r0, [pc, #276]	@ (8000a8c <display_digit+0x3a4>)
 8000978:	f001 fb78 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000982:	4842      	ldr	r0, [pc, #264]	@ (8000a8c <display_digit+0x3a4>)
 8000984:	f001 fb72 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000988:	e085      	b.n	8000a96 <display_digit+0x3ae>
        case 7:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000990:	483e      	ldr	r0, [pc, #248]	@ (8000a8c <display_digit+0x3a4>)
 8000992:	f001 fb6b 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800099c:	483b      	ldr	r0, [pc, #236]	@ (8000a8c <display_digit+0x3a4>)
 800099e:	f001 fb65 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a8:	4839      	ldr	r0, [pc, #228]	@ (8000a90 <display_digit+0x3a8>)
 80009aa:	f001 fb5f 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b4:	4836      	ldr	r0, [pc, #216]	@ (8000a90 <display_digit+0x3a8>)
 80009b6:	f001 fb59 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c0:	4833      	ldr	r0, [pc, #204]	@ (8000a90 <display_digit+0x3a8>)
 80009c2:	f001 fb53 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009cc:	482f      	ldr	r0, [pc, #188]	@ (8000a8c <display_digit+0x3a4>)
 80009ce:	f001 fb4d 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009d8:	482c      	ldr	r0, [pc, #176]	@ (8000a8c <display_digit+0x3a4>)
 80009da:	f001 fb47 	bl	800206c <HAL_GPIO_WritePin>
            break;
 80009de:	e05a      	b.n	8000a96 <display_digit+0x3ae>
        case 8:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e6:	4829      	ldr	r0, [pc, #164]	@ (8000a8c <display_digit+0x3a4>)
 80009e8:	f001 fb40 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009f2:	4826      	ldr	r0, [pc, #152]	@ (8000a8c <display_digit+0x3a4>)
 80009f4:	f001 fb3a 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009fe:	4824      	ldr	r0, [pc, #144]	@ (8000a90 <display_digit+0x3a8>)
 8000a00:	f001 fb34 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a0a:	4821      	ldr	r0, [pc, #132]	@ (8000a90 <display_digit+0x3a8>)
 8000a0c:	f001 fb2e 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a16:	481e      	ldr	r0, [pc, #120]	@ (8000a90 <display_digit+0x3a8>)
 8000a18:	f001 fb28 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	481a      	ldr	r0, [pc, #104]	@ (8000a8c <display_digit+0x3a4>)
 8000a24:	f001 fb22 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a2e:	4817      	ldr	r0, [pc, #92]	@ (8000a8c <display_digit+0x3a4>)
 8000a30:	f001 fb1c 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000a34:	e02f      	b.n	8000a96 <display_digit+0x3ae>
        case 9:
            HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3c:	4813      	ldr	r0, [pc, #76]	@ (8000a8c <display_digit+0x3a4>)
 8000a3e:	f001 fb15 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a48:	4810      	ldr	r0, [pc, #64]	@ (8000a8c <display_digit+0x3a4>)
 8000a4a:	f001 fb0f 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <display_digit+0x3a8>)
 8000a56:	f001 fb09 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a60:	480b      	ldr	r0, [pc, #44]	@ (8000a90 <display_digit+0x3a8>)
 8000a62:	f001 fb03 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6c:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <display_digit+0x3a8>)
 8000a6e:	f001 fafd 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a78:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <display_digit+0x3a4>)
 8000a7a:	f001 faf7 	bl	800206c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a84:	4801      	ldr	r0, [pc, #4]	@ (8000a8c <display_digit+0x3a4>)
 8000a86:	f001 faf1 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000a8a:	e004      	b.n	8000a96 <display_digit+0x3ae>
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	40010c00 	.word	0x40010c00
    if (digit > 9) return;
 8000a94:	bf00      	nop
    }
}
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <controlLED>:
 *      Author: Salmon1611
 */
#include "led_control.h"
// Hàm điều khiển LED
void controlLED(uint8_t ledIndex, uint8_t state)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
    switch (ledIndex) {
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b07      	cmp	r3, #7
 8000ab0:	d875      	bhi.n	8000b9e <controlLED+0x102>
 8000ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab8 <controlLED+0x1c>)
 8000ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab8:	08000ad9 	.word	0x08000ad9
 8000abc:	08000af1 	.word	0x08000af1
 8000ac0:	08000b09 	.word	0x08000b09
 8000ac4:	08000b21 	.word	0x08000b21
 8000ac8:	08000b39 	.word	0x08000b39
 8000acc:	08000b51 	.word	0x08000b51
 8000ad0:	08000b6b 	.word	0x08000b6b
 8000ad4:	08000b85 	.word	0x08000b85
        case 0:
            HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bf0c      	ite	eq
 8000ade:	2301      	moveq	r3, #1
 8000ae0:	2300      	movne	r3, #0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	482f      	ldr	r0, [pc, #188]	@ (8000ba8 <controlLED+0x10c>)
 8000aea:	f001 fabf 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000aee:	e057      	b.n	8000ba0 <controlLED+0x104>
        case 1:
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf0c      	ite	eq
 8000af6:	2301      	moveq	r3, #1
 8000af8:	2300      	movne	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	2140      	movs	r1, #64	@ 0x40
 8000b00:	4829      	ldr	r0, [pc, #164]	@ (8000ba8 <controlLED+0x10c>)
 8000b02:	f001 fab3 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000b06:	e04b      	b.n	8000ba0 <controlLED+0x104>
        case 2:
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	2300      	movne	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	2180      	movs	r1, #128	@ 0x80
 8000b18:	4823      	ldr	r0, [pc, #140]	@ (8000ba8 <controlLED+0x10c>)
 8000b1a:	f001 faa7 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000b1e:	e03f      	b.n	8000ba0 <controlLED+0x104>
        case 3:
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf0c      	ite	eq
 8000b26:	2301      	moveq	r3, #1
 8000b28:	2300      	movne	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2101      	movs	r1, #1
 8000b30:	481e      	ldr	r0, [pc, #120]	@ (8000bac <controlLED+0x110>)
 8000b32:	f001 fa9b 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000b36:	e033      	b.n	8000ba0 <controlLED+0x104>
        case 4:
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf0c      	ite	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	2300      	movne	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	2102      	movs	r1, #2
 8000b48:	4818      	ldr	r0, [pc, #96]	@ (8000bac <controlLED+0x110>)
 8000b4a:	f001 fa8f 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000b4e:	e027      	b.n	8000ba0 <controlLED+0x104>
        case 5:
            HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bf0c      	ite	eq
 8000b56:	2301      	moveq	r3, #1
 8000b58:	2300      	movne	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b62:	4812      	ldr	r0, [pc, #72]	@ (8000bac <controlLED+0x110>)
 8000b64:	f001 fa82 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000b68:	e01a      	b.n	8000ba0 <controlLED+0x104>
        case 6:
            HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf0c      	ite	eq
 8000b70:	2301      	moveq	r3, #1
 8000b72:	2300      	movne	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b7c:	480b      	ldr	r0, [pc, #44]	@ (8000bac <controlLED+0x110>)
 8000b7e:	f001 fa75 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000b82:	e00d      	b.n	8000ba0 <controlLED+0x104>
        case 7:
            HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000b84:	79bb      	ldrb	r3, [r7, #6]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf0c      	ite	eq
 8000b8a:	2301      	moveq	r3, #1
 8000b8c:	2300      	movne	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <controlLED+0x110>)
 8000b98:	f001 fa68 	bl	800206c <HAL_GPIO_WritePin>
            break;
 8000b9c:	e000      	b.n	8000ba0 <controlLED+0x104>
        default:
            // Không làm gì nếu chỉ số LED không hợp lệ
            break;
 8000b9e:	bf00      	nop
    }
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <HAL_UART_RxCpltCallback>:
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	SCI1_rxdone=1;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_UART_RxCpltCallback+0x5c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,(uint8_t*)&g_rx1_char,sizeof(g_rx1_char));
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4913      	ldr	r1, [pc, #76]	@ (8000c10 <HAL_UART_RxCpltCallback+0x60>)
 8000bc2:	4814      	ldr	r0, [pc, #80]	@ (8000c14 <HAL_UART_RxCpltCallback+0x64>)
 8000bc4:	f002 fefe 	bl	80039c4 <HAL_UART_Receive_IT>
		if(g_rx1_cnt < MAX_BUFFER_UART1)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <HAL_UART_RxCpltCallback+0x68>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8000bd0:	d80b      	bhi.n	8000bea <HAL_UART_RxCpltCallback+0x3a>
		{
			g_rx1_buffer[g_rx1_cnt++] = g_rx1_char;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <HAL_UART_RxCpltCallback+0x68>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	b291      	uxth	r1, r2
 8000bda:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <HAL_UART_RxCpltCallback+0x68>)
 8000bdc:	8011      	strh	r1, [r2, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <HAL_UART_RxCpltCallback+0x60>)
 8000be2:	7819      	ldrb	r1, [r3, #0]
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_UART_RxCpltCallback+0x6c>)
 8000be6:	5499      	strb	r1, [r3, r2]
 8000be8:	e008      	b.n	8000bfc <HAL_UART_RxCpltCallback+0x4c>
		}
		else{
			g_rx1_cnt = 0;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_UART_RxCpltCallback+0x68>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	801a      	strh	r2, [r3, #0]
			memset(g_rx1_buffer,0,sizeof(g_rx1_buffer));
 8000bf0:	f240 1209 	movw	r2, #265	@ 0x109
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <HAL_UART_RxCpltCallback+0x6c>)
 8000bf8:	f003 fcc4 	bl	8004584 <memset>
		}
		cntTimeRev1 = RECV_END_TIMEOUT;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_UART_RxCpltCallback+0x70>)
 8000bfe:	221e      	movs	r2, #30
 8000c00:	701a      	strb	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000084 	.word	0x20000084
 8000c10:	20000088 	.word	0x20000088
 8000c14:	200001ec 	.word	0x200001ec
 8000c18:	20000086 	.word	0x20000086
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	20000089 	.word	0x20000089

08000c24 <vspfunc>:
	{"FRI"},
	{"SAT"},
};
uint8_t buffer[20];
int vspfunc(char *format, ...)
{
 8000c24:	b40f      	push	{r0, r1, r2, r3}
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0

   va_list aptr;
   int ret;
   va_start(aptr, format);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	603b      	str	r3, [r7, #0]
   ret = vsprintf((char*)buffer, format, aptr);
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	6939      	ldr	r1, [r7, #16]
 8000c36:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <vspfunc+0x2c>)
 8000c38:	f003 fc9a 	bl	8004570 <vsiprintf>
 8000c3c:	6078      	str	r0, [r7, #4]
   va_end(aptr);
   return(ret);
 8000c3e:	687b      	ldr	r3, [r7, #4]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c4a:	b004      	add	sp, #16
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000234 	.word	0x20000234

08000c54 <display_lcd>:
void display_lcd()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af02      	add	r7, sp, #8
		  vspfunc("    %02d:%02d:%02d    ", time.hour , time.min, time.sec);
 8000c5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <display_lcd+0x8c>)
 8000c5c:	789b      	ldrb	r3, [r3, #2]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <display_lcd+0x8c>)
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <display_lcd+0x8c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <display_lcd+0x90>)
 8000c6c:	f7ff ffda 	bl	8000c24 <vspfunc>
		  lcd_put_cur( 0,0);
 8000c70:	2100      	movs	r1, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fcc6 	bl	8000604 <lcd_put_cur>
		  lcd_send_string ((char*)buffer);
 8000c78:	481b      	ldr	r0, [pc, #108]	@ (8000ce8 <display_lcd+0x94>)
 8000c7a:	f7ff fd1f 	bl	80006bc <lcd_send_string>
		  memset(buffer,0,20);
 8000c7e:	2214      	movs	r2, #20
 8000c80:	2100      	movs	r1, #0
 8000c82:	4819      	ldr	r0, [pc, #100]	@ (8000ce8 <display_lcd+0x94>)
 8000c84:	f003 fc7e 	bl	8004584 <memset>
		  lcd_put_cur( 1, 0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff fcba 	bl	8000604 <lcd_put_cur>
		  uint8_t day_of_week = dayOfWeek(time.date,time.month,time.year);
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <display_lcd+0x8c>)
 8000c92:	791b      	ldrb	r3, [r3, #4]
 8000c94:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <display_lcd+0x8c>)
 8000c96:	7951      	ldrb	r1, [r2, #5]
 8000c98:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <display_lcd+0x8c>)
 8000c9a:	88d2      	ldrh	r2, [r2, #6]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fbb5 	bl	800040c <dayOfWeek>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
		  vspfunc(" %s %02d/%02d/%04d ", arr_day[ day_of_week],time.date , time.month, time.year);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <display_lcd+0x98>)
 8000cac:	1899      	adds	r1, r3, r2
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <display_lcd+0x8c>)
 8000cb0:	791b      	ldrb	r3, [r3, #4]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <display_lcd+0x8c>)
 8000cb6:	795b      	ldrb	r3, [r3, #5]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <display_lcd+0x8c>)
 8000cbc:	88db      	ldrh	r3, [r3, #6]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <display_lcd+0x9c>)
 8000cc4:	f7ff ffae 	bl	8000c24 <vspfunc>
		  lcd_send_string ((char*)buffer);
 8000cc8:	4807      	ldr	r0, [pc, #28]	@ (8000ce8 <display_lcd+0x94>)
 8000cca:	f7ff fcf7 	bl	80006bc <lcd_send_string>
		  memset(buffer,0,20);
 8000cce:	2214      	movs	r2, #20
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <display_lcd+0x94>)
 8000cd4:	f003 fc56 	bl	8004584 <memset>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	08004f14 	.word	0x08004f14
 8000ce8:	20000234 	.word	0x20000234
 8000cec:	08004fbc 	.word	0x08004fbc
 8000cf0:	08004f2c 	.word	0x08004f2c

08000cf4 <time_update>:
void time_update()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	  static uint32_t time_update=0;
      if (HAL_GetTick()-time_update >=1000)
 8000cf8:	f000 fe46 	bl	8001988 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <time_update+0x30>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d08:	d309      	bcc.n	8000d1e <time_update+0x2a>
	  {
    	  time_update = HAL_GetTick();
 8000d0a:	f000 fe3d 	bl	8001988 <HAL_GetTick>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <time_update+0x30>)
 8000d12:	6013      	str	r3, [r2, #0]
		  DS1307_gettime(&time);
 8000d14:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <time_update+0x34>)
 8000d16:	f7ff fa7f 	bl	8000218 <DS1307_gettime>
		  display_lcd();
 8000d1a:	f7ff ff9b 	bl	8000c54 <display_lcd>
	  }
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000248 	.word	0x20000248
 8000d28:	20000000 	.word	0x20000000

08000d2c <led7seg>:
void led7seg()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	  static uint32_t count=0;
	  static uint8_t num=0;
      if (HAL_GetTick()-count >=1000)
 8000d30:	f000 fe2a 	bl	8001988 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <led7seg+0x48>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d40:	d316      	bcc.n	8000d70 <led7seg+0x44>
	  {
    	  count = HAL_GetTick();
 8000d42:	f000 fe21 	bl	8001988 <HAL_GetTick>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <led7seg+0x48>)
 8000d4a:	6013      	str	r3, [r2, #0]
		  display_digit(num);
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <led7seg+0x4c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fcc9 	bl	80006e8 <display_digit>
		  num++;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <led7seg+0x4c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <led7seg+0x4c>)
 8000d60:	701a      	strb	r2, [r3, #0]
		  if(num>9)
 8000d62:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <led7seg+0x4c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d902      	bls.n	8000d70 <led7seg+0x44>
			  {
			  	  num=0;
 8000d6a:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <led7seg+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
			  }

	  }
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000024c 	.word	0x2000024c
 8000d78:	20000250 	.word	0x20000250

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f000 fdaa 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f82c 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f000 f8c8 	bl	8000f1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d8c:	f000 f86e 	bl	8000e6c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d90:	f000 f89a 	bl	8000ec8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)&g_rx1_char,1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	490f      	ldr	r1, [pc, #60]	@ (8000dd4 <main+0x58>)
 8000d98:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <main+0x5c>)
 8000d9a:	f002 fe13 	bl	80039c4 <HAL_UART_Receive_IT>
  HAL_Delay(1000);
 8000d9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000da2:	f000 fdfb 	bl	800199c <HAL_Delay>
  lcd_init ();
 8000da6:	f7ff fc4c 	bl	8000642 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  led7seg();
 8000daa:	f7ff ffbf 	bl	8000d2c <led7seg>
	  time_update();
 8000dae:	f7ff ffa1 	bl	8000cf4 <time_update>
	  if(HAL_GetTick()-g_tick>UART_PERIOD)
 8000db2:	f000 fde9 	bl	8001988 <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <main+0x60>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d9f3      	bls.n	8000daa <main+0x2e>
	  	  		{
	  	  			Uart_Cmd_Handler();
 8000dc2:	f000 fd47 	bl	8001854 <Uart_Cmd_Handler>
	  	  			g_tick = HAL_GetTick();
 8000dc6:	f000 fddf 	bl	8001988 <HAL_GetTick>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a03      	ldr	r2, [pc, #12]	@ (8000ddc <main+0x60>)
 8000dce:	6013      	str	r3, [r2, #0]
	  led7seg();
 8000dd0:	e7eb      	b.n	8000daa <main+0x2e>
 8000dd2:	bf00      	nop
 8000dd4:	20000088 	.word	0x20000088
 8000dd8:	200001ec 	.word	0x200001ec
 8000ddc:	20000080 	.word	0x20000080

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b090      	sub	sp, #64	@ 0x40
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0318 	add.w	r3, r7, #24
 8000dea:	2228      	movs	r2, #40	@ 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fbc8 	bl	8004584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e14:	2302      	movs	r3, #2
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e1e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 f96b 	bl	8003104 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e34:	f000 f8e0 	bl	8000ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2102      	movs	r1, #2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fbd8 	bl	8003608 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e5e:	f000 f8cb 	bl	8000ff8 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3740      	adds	r7, #64	@ 0x40
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000e72:	4a13      	ldr	r2, [pc, #76]	@ (8000ec0 <MX_I2C1_Init+0x54>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000e78:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <MX_I2C1_Init+0x58>)
 8000e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000e8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <MX_I2C1_Init+0x50>)
 8000eaa:	f001 f8f7 	bl	800209c <HAL_I2C_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eb4:	f000 f8a0 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000198 	.word	0x20000198
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	000186a0 	.word	0x000186a0

08000ec8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <MX_USART1_UART_Init+0x50>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000f00:	f002 fd10 	bl	8003924 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f0a:	f000 f875 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001ec 	.word	0x200001ec
 8000f18:	40013800 	.word	0x40013800

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f30:	4b2e      	ldr	r3, [pc, #184]	@ (8000fec <MX_GPIO_Init+0xd0>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a2d      	ldr	r2, [pc, #180]	@ (8000fec <MX_GPIO_Init+0xd0>)
 8000f36:	f043 0320 	orr.w	r3, r3, #32
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <MX_GPIO_Init+0xd0>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0320 	and.w	r3, r3, #32
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <MX_GPIO_Init+0xd0>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a27      	ldr	r2, [pc, #156]	@ (8000fec <MX_GPIO_Init+0xd0>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <MX_GPIO_Init+0xd0>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_GPIO_Init+0xd0>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <MX_GPIO_Init+0xd0>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <MX_GPIO_Init+0xd0>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VCC_Pin|LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	21e2      	movs	r1, #226	@ 0xe2
 8000f7c:	481c      	ldr	r0, [pc, #112]	@ (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f7e:	f001 f875 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GND_Pin|B_Pin|A_Pin|F_Pin
 8000f82:	2200      	movs	r2, #0
 8000f84:	f641 6104 	movw	r1, #7684	@ 0x1e04
 8000f88:	4819      	ldr	r0, [pc, #100]	@ (8000ff0 <MX_GPIO_Init+0xd4>)
 8000f8a:	f001 f86f 	bl	800206c <HAL_GPIO_WritePin>
                          |G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f641 4103 	movw	r1, #7171	@ 0x1c03
 8000f94:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <MX_GPIO_Init+0xd8>)
 8000f96:	f001 f869 	bl	800206c <HAL_GPIO_WritePin>
                          |LED7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Pin|D_Pin|C_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000fa0:	4814      	ldr	r0, [pc, #80]	@ (8000ff4 <MX_GPIO_Init+0xd8>)
 8000fa2:	f001 f863 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VCC_Pin GND_Pin LED0_Pin LED1_Pin
                           LED2_Pin B_Pin A_Pin F_Pin
                           G_Pin */
  GPIO_InitStruct.Pin = VCC_Pin|GND_Pin|LED0_Pin|LED1_Pin
 8000fa6:	f641 63e6 	movw	r3, #7910	@ 0x1ee6
 8000faa:	613b      	str	r3, [r7, #16]
                          |LED2_Pin|B_Pin|A_Pin|F_Pin
                          |G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <MX_GPIO_Init+0xd4>)
 8000fc0:	f000 fed0 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin LED6_Pin
                           LED7_Pin E_Pin D_Pin C_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin|LED6_Pin
 8000fc4:	f64f 4303 	movw	r3, #64515	@ 0xfc03
 8000fc8:	613b      	str	r3, [r7, #16]
                          |LED7_Pin|E_Pin|D_Pin|C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_GPIO_Init+0xd8>)
 8000fde:	f000 fec1 	bl	8001d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40010c00 	.word	0x40010c00

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <Error_Handler+0x8>

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <HAL_MspInit+0x5c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0e      	ldr	r2, [pc, #56]	@ (8001060 <HAL_MspInit+0x5c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_MspInit+0x60>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_MspInit+0x60>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000

08001068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <HAL_I2C_MspInit+0x90>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d132      	bne.n	80010ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a1b      	ldr	r2, [pc, #108]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a6:	2312      	movs	r3, #18
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4812      	ldr	r0, [pc, #72]	@ (8001100 <HAL_I2C_MspInit+0x98>)
 80010b6:	f000 fe55 	bl	8001d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_I2C_MspInit+0x9c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <HAL_I2C_MspInit+0x9c>)
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 80010dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_I2C_MspInit+0x94>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40005400 	.word	0x40005400
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40010000 	.word	0x40010000

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a26      	ldr	r2, [pc, #152]	@ (80011bc <HAL_UART_MspInit+0xb4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d145      	bne.n	80011b4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <HAL_UART_MspInit+0xb8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a24      	ldr	r2, [pc, #144]	@ (80011c0 <HAL_UART_MspInit+0xb8>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <HAL_UART_MspInit+0xb8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <HAL_UART_MspInit+0xb8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a1e      	ldr	r2, [pc, #120]	@ (80011c0 <HAL_UART_MspInit+0xb8>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_UART_MspInit+0xb8>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001158:	2340      	movs	r3, #64	@ 0x40
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4816      	ldr	r0, [pc, #88]	@ (80011c4 <HAL_UART_MspInit+0xbc>)
 800116c:	f000 fdfa 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4810      	ldr	r0, [pc, #64]	@ (80011c4 <HAL_UART_MspInit+0xbc>)
 8001184:	f000 fdee 	bl	8001d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <HAL_UART_MspInit+0xc0>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
 800118e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001190:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <HAL_UART_MspInit+0xc0>)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2025      	movs	r0, #37	@ 0x25
 80011aa:	f000 fcf2 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ae:	2025      	movs	r0, #37	@ 0x25
 80011b0:	f000 fd0b 	bl	8001bca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	@ 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	40010000 	.word	0x40010000

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <NMI_Handler+0x4>

080011d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <MemManage_Handler+0x4>

080011e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 fba2 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <USART1_IRQHandler+0x10>)
 800122a:	f002 fbf1 	bl	8003a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001ec 	.word	0x200001ec

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f003 f9a6 	bl	80045b8 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	@ (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20005000 	.word	0x20005000
 8001298:	00000400 	.word	0x00000400
 800129c:	20000254 	.word	0x20000254
 80012a0:	200003a8 	.word	0x200003a8

080012a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <UART1_IsDoneFrame>:
extern char g_rx1_char;
extern uint8_t cntTimeRev1;
extern char g_rx1_buffer[MAX_BUFFER_UART1];
extern DS1307_STRUCT time;
bool UART1_IsDoneFrame(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	if(cntTimeRev1>0)
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <UART1_IsDoneFrame+0x30>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <UART1_IsDoneFrame+0x24>
	{
		cntTimeRev1--;
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <UART1_IsDoneFrame+0x30>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <UART1_IsDoneFrame+0x30>)
 80012c6:	701a      	strb	r2, [r3, #0]
		if(cntTimeRev1 == 0)
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <UART1_IsDoneFrame+0x30>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <UART1_IsDoneFrame+0x24>
		{
			return true;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <UART1_IsDoneFrame+0x26>
		}
	}
	return false;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000089 	.word	0x20000089

080012e4 <GeneralCmd>:

void GeneralCmd()
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	for(uint16_t i=0;i< g_rx1_cnt;i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	80fb      	strh	r3, [r7, #6]
 80012ee:	e294      	b.n	800181a <GeneralCmd+0x536>
		{

		if(strncmp(g_rx1_buffer+i,"c:do0:",6)==0)
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4aaf      	ldr	r2, [pc, #700]	@ (80015b0 <GeneralCmd+0x2cc>)
 80012f4:	4413      	add	r3, r2
 80012f6:	2206      	movs	r2, #6
 80012f8:	49ae      	ldr	r1, [pc, #696]	@ (80015b4 <GeneralCmd+0x2d0>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 f94a 	bl	8004594 <strncmp>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d120      	bne.n	8001348 <GeneralCmd+0x64>
				{

					if(strcmp(g_rx1_buffer+i+6,"0")==0)
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	3306      	adds	r3, #6
 800130a:	4aa9      	ldr	r2, [pc, #676]	@ (80015b0 <GeneralCmd+0x2cc>)
 800130c:	4413      	add	r3, r2
 800130e:	49aa      	ldr	r1, [pc, #680]	@ (80015b8 <GeneralCmd+0x2d4>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7fe ff1b 	bl	800014c <strcmp>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d104      	bne.n	8001326 <GeneralCmd+0x42>
					{
						controlLED(0, 0);
 800131c:	2100      	movs	r1, #0
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fbbc 	bl	8000a9c <controlLED>
 8001324:	e276      	b.n	8001814 <GeneralCmd+0x530>
					}
					else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	3306      	adds	r3, #6
 800132a:	4aa1      	ldr	r2, [pc, #644]	@ (80015b0 <GeneralCmd+0x2cc>)
 800132c:	4413      	add	r3, r2
 800132e:	49a3      	ldr	r1, [pc, #652]	@ (80015bc <GeneralCmd+0x2d8>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7fe ff0b 	bl	800014c <strcmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 826b 	bne.w	8001814 <GeneralCmd+0x530>
					{
						controlLED(0, 1);
 800133e:	2101      	movs	r1, #1
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fbab 	bl	8000a9c <controlLED>
 8001346:	e265      	b.n	8001814 <GeneralCmd+0x530>
					}
				}
		else if(strncmp(g_rx1_buffer+i,"c:do1:",6)==0)
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	4a99      	ldr	r2, [pc, #612]	@ (80015b0 <GeneralCmd+0x2cc>)
 800134c:	4413      	add	r3, r2
 800134e:	2206      	movs	r2, #6
 8001350:	499b      	ldr	r1, [pc, #620]	@ (80015c0 <GeneralCmd+0x2dc>)
 8001352:	4618      	mov	r0, r3
 8001354:	f003 f91e 	bl	8004594 <strncmp>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d120      	bne.n	80013a0 <GeneralCmd+0xbc>
						{

							if(strcmp(g_rx1_buffer+i+6,"0")==0)
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	3306      	adds	r3, #6
 8001362:	4a93      	ldr	r2, [pc, #588]	@ (80015b0 <GeneralCmd+0x2cc>)
 8001364:	4413      	add	r3, r2
 8001366:	4994      	ldr	r1, [pc, #592]	@ (80015b8 <GeneralCmd+0x2d4>)
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe feef 	bl	800014c <strcmp>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d104      	bne.n	800137e <GeneralCmd+0x9a>
							{
								controlLED(1, 0);
 8001374:	2100      	movs	r1, #0
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fb90 	bl	8000a9c <controlLED>
 800137c:	e24a      	b.n	8001814 <GeneralCmd+0x530>
							}
							else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	3306      	adds	r3, #6
 8001382:	4a8b      	ldr	r2, [pc, #556]	@ (80015b0 <GeneralCmd+0x2cc>)
 8001384:	4413      	add	r3, r2
 8001386:	498d      	ldr	r1, [pc, #564]	@ (80015bc <GeneralCmd+0x2d8>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe fedf 	bl	800014c <strcmp>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 823f 	bne.w	8001814 <GeneralCmd+0x530>
							{
								controlLED(1, 1);
 8001396:	2101      	movs	r1, #1
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff fb7f 	bl	8000a9c <controlLED>
 800139e:	e239      	b.n	8001814 <GeneralCmd+0x530>
							}
						}
		else if(strncmp(g_rx1_buffer+i,"c:do2:",6)==0)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	4a83      	ldr	r2, [pc, #524]	@ (80015b0 <GeneralCmd+0x2cc>)
 80013a4:	4413      	add	r3, r2
 80013a6:	2206      	movs	r2, #6
 80013a8:	4986      	ldr	r1, [pc, #536]	@ (80015c4 <GeneralCmd+0x2e0>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 f8f2 	bl	8004594 <strncmp>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d120      	bne.n	80013f8 <GeneralCmd+0x114>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	3306      	adds	r3, #6
 80013ba:	4a7d      	ldr	r2, [pc, #500]	@ (80015b0 <GeneralCmd+0x2cc>)
 80013bc:	4413      	add	r3, r2
 80013be:	497e      	ldr	r1, [pc, #504]	@ (80015b8 <GeneralCmd+0x2d4>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7fe fec3 	bl	800014c <strcmp>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d104      	bne.n	80013d6 <GeneralCmd+0xf2>
									{
										controlLED(2, 0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	2002      	movs	r0, #2
 80013d0:	f7ff fb64 	bl	8000a9c <controlLED>
 80013d4:	e21e      	b.n	8001814 <GeneralCmd+0x530>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	3306      	adds	r3, #6
 80013da:	4a75      	ldr	r2, [pc, #468]	@ (80015b0 <GeneralCmd+0x2cc>)
 80013dc:	4413      	add	r3, r2
 80013de:	4977      	ldr	r1, [pc, #476]	@ (80015bc <GeneralCmd+0x2d8>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe feb3 	bl	800014c <strcmp>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f040 8213 	bne.w	8001814 <GeneralCmd+0x530>
									{
										controlLED(2, 1);
 80013ee:	2101      	movs	r1, #1
 80013f0:	2002      	movs	r0, #2
 80013f2:	f7ff fb53 	bl	8000a9c <controlLED>
 80013f6:	e20d      	b.n	8001814 <GeneralCmd+0x530>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do3:",6)==0)
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	4a6d      	ldr	r2, [pc, #436]	@ (80015b0 <GeneralCmd+0x2cc>)
 80013fc:	4413      	add	r3, r2
 80013fe:	2206      	movs	r2, #6
 8001400:	4971      	ldr	r1, [pc, #452]	@ (80015c8 <GeneralCmd+0x2e4>)
 8001402:	4618      	mov	r0, r3
 8001404:	f003 f8c6 	bl	8004594 <strncmp>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d120      	bne.n	8001450 <GeneralCmd+0x16c>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	3306      	adds	r3, #6
 8001412:	4a67      	ldr	r2, [pc, #412]	@ (80015b0 <GeneralCmd+0x2cc>)
 8001414:	4413      	add	r3, r2
 8001416:	4968      	ldr	r1, [pc, #416]	@ (80015b8 <GeneralCmd+0x2d4>)
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe fe97 	bl	800014c <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <GeneralCmd+0x14a>
									{
										controlLED(3, 0);
 8001424:	2100      	movs	r1, #0
 8001426:	2003      	movs	r0, #3
 8001428:	f7ff fb38 	bl	8000a9c <controlLED>
 800142c:	e1f2      	b.n	8001814 <GeneralCmd+0x530>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	3306      	adds	r3, #6
 8001432:	4a5f      	ldr	r2, [pc, #380]	@ (80015b0 <GeneralCmd+0x2cc>)
 8001434:	4413      	add	r3, r2
 8001436:	4961      	ldr	r1, [pc, #388]	@ (80015bc <GeneralCmd+0x2d8>)
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe fe87 	bl	800014c <strcmp>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 81e7 	bne.w	8001814 <GeneralCmd+0x530>
									{
										controlLED(3, 1);
 8001446:	2101      	movs	r1, #1
 8001448:	2003      	movs	r0, #3
 800144a:	f7ff fb27 	bl	8000a9c <controlLED>
 800144e:	e1e1      	b.n	8001814 <GeneralCmd+0x530>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do4:",6)==0)
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4a57      	ldr	r2, [pc, #348]	@ (80015b0 <GeneralCmd+0x2cc>)
 8001454:	4413      	add	r3, r2
 8001456:	2206      	movs	r2, #6
 8001458:	495c      	ldr	r1, [pc, #368]	@ (80015cc <GeneralCmd+0x2e8>)
 800145a:	4618      	mov	r0, r3
 800145c:	f003 f89a 	bl	8004594 <strncmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d120      	bne.n	80014a8 <GeneralCmd+0x1c4>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	3306      	adds	r3, #6
 800146a:	4a51      	ldr	r2, [pc, #324]	@ (80015b0 <GeneralCmd+0x2cc>)
 800146c:	4413      	add	r3, r2
 800146e:	4952      	ldr	r1, [pc, #328]	@ (80015b8 <GeneralCmd+0x2d4>)
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe fe6b 	bl	800014c <strcmp>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d104      	bne.n	8001486 <GeneralCmd+0x1a2>
									{
										controlLED(4, 0);
 800147c:	2100      	movs	r1, #0
 800147e:	2004      	movs	r0, #4
 8001480:	f7ff fb0c 	bl	8000a9c <controlLED>
 8001484:	e1c6      	b.n	8001814 <GeneralCmd+0x530>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	3306      	adds	r3, #6
 800148a:	4a49      	ldr	r2, [pc, #292]	@ (80015b0 <GeneralCmd+0x2cc>)
 800148c:	4413      	add	r3, r2
 800148e:	494b      	ldr	r1, [pc, #300]	@ (80015bc <GeneralCmd+0x2d8>)
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe fe5b 	bl	800014c <strcmp>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	f040 81bb 	bne.w	8001814 <GeneralCmd+0x530>
									{
										controlLED(4, 1);
 800149e:	2101      	movs	r1, #1
 80014a0:	2004      	movs	r0, #4
 80014a2:	f7ff fafb 	bl	8000a9c <controlLED>
 80014a6:	e1b5      	b.n	8001814 <GeneralCmd+0x530>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do5:",6)==0)
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	4a41      	ldr	r2, [pc, #260]	@ (80015b0 <GeneralCmd+0x2cc>)
 80014ac:	4413      	add	r3, r2
 80014ae:	2206      	movs	r2, #6
 80014b0:	4947      	ldr	r1, [pc, #284]	@ (80015d0 <GeneralCmd+0x2ec>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 f86e 	bl	8004594 <strncmp>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d120      	bne.n	8001500 <GeneralCmd+0x21c>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	3306      	adds	r3, #6
 80014c2:	4a3b      	ldr	r2, [pc, #236]	@ (80015b0 <GeneralCmd+0x2cc>)
 80014c4:	4413      	add	r3, r2
 80014c6:	493c      	ldr	r1, [pc, #240]	@ (80015b8 <GeneralCmd+0x2d4>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe fe3f 	bl	800014c <strcmp>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d104      	bne.n	80014de <GeneralCmd+0x1fa>
									{
										controlLED(5, 0);
 80014d4:	2100      	movs	r1, #0
 80014d6:	2005      	movs	r0, #5
 80014d8:	f7ff fae0 	bl	8000a9c <controlLED>
 80014dc:	e19a      	b.n	8001814 <GeneralCmd+0x530>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	3306      	adds	r3, #6
 80014e2:	4a33      	ldr	r2, [pc, #204]	@ (80015b0 <GeneralCmd+0x2cc>)
 80014e4:	4413      	add	r3, r2
 80014e6:	4935      	ldr	r1, [pc, #212]	@ (80015bc <GeneralCmd+0x2d8>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe2f 	bl	800014c <strcmp>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f040 818f 	bne.w	8001814 <GeneralCmd+0x530>
									{
										controlLED(5, 1);
 80014f6:	2101      	movs	r1, #1
 80014f8:	2005      	movs	r0, #5
 80014fa:	f7ff facf 	bl	8000a9c <controlLED>
 80014fe:	e189      	b.n	8001814 <GeneralCmd+0x530>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do6:",6)==0)
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	4a2b      	ldr	r2, [pc, #172]	@ (80015b0 <GeneralCmd+0x2cc>)
 8001504:	4413      	add	r3, r2
 8001506:	2206      	movs	r2, #6
 8001508:	4932      	ldr	r1, [pc, #200]	@ (80015d4 <GeneralCmd+0x2f0>)
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f842 	bl	8004594 <strncmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d120      	bne.n	8001558 <GeneralCmd+0x274>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	3306      	adds	r3, #6
 800151a:	4a25      	ldr	r2, [pc, #148]	@ (80015b0 <GeneralCmd+0x2cc>)
 800151c:	4413      	add	r3, r2
 800151e:	4926      	ldr	r1, [pc, #152]	@ (80015b8 <GeneralCmd+0x2d4>)
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe13 	bl	800014c <strcmp>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d104      	bne.n	8001536 <GeneralCmd+0x252>
									{
										controlLED(6, 0);
 800152c:	2100      	movs	r1, #0
 800152e:	2006      	movs	r0, #6
 8001530:	f7ff fab4 	bl	8000a9c <controlLED>
 8001534:	e16e      	b.n	8001814 <GeneralCmd+0x530>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	3306      	adds	r3, #6
 800153a:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <GeneralCmd+0x2cc>)
 800153c:	4413      	add	r3, r2
 800153e:	491f      	ldr	r1, [pc, #124]	@ (80015bc <GeneralCmd+0x2d8>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fe03 	bl	800014c <strcmp>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	f040 8163 	bne.w	8001814 <GeneralCmd+0x530>
									{
										controlLED(6, 1);
 800154e:	2101      	movs	r1, #1
 8001550:	2006      	movs	r0, #6
 8001552:	f7ff faa3 	bl	8000a9c <controlLED>
 8001556:	e15d      	b.n	8001814 <GeneralCmd+0x530>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:do7:",6)==0)
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4a15      	ldr	r2, [pc, #84]	@ (80015b0 <GeneralCmd+0x2cc>)
 800155c:	4413      	add	r3, r2
 800155e:	2206      	movs	r2, #6
 8001560:	491d      	ldr	r1, [pc, #116]	@ (80015d8 <GeneralCmd+0x2f4>)
 8001562:	4618      	mov	r0, r3
 8001564:	f003 f816 	bl	8004594 <strncmp>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d136      	bne.n	80015dc <GeneralCmd+0x2f8>
								{

									if(strcmp(g_rx1_buffer+i+6,"0")==0)
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	3306      	adds	r3, #6
 8001572:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <GeneralCmd+0x2cc>)
 8001574:	4413      	add	r3, r2
 8001576:	4910      	ldr	r1, [pc, #64]	@ (80015b8 <GeneralCmd+0x2d4>)
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fde7 	bl	800014c <strcmp>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d104      	bne.n	800158e <GeneralCmd+0x2aa>
									{
										controlLED(7, 0);
 8001584:	2100      	movs	r1, #0
 8001586:	2007      	movs	r0, #7
 8001588:	f7ff fa88 	bl	8000a9c <controlLED>
 800158c:	e142      	b.n	8001814 <GeneralCmd+0x530>
									}
									else if(strcmp(g_rx1_buffer+i+6,"1")==0)
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	3306      	adds	r3, #6
 8001592:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <GeneralCmd+0x2cc>)
 8001594:	4413      	add	r3, r2
 8001596:	4909      	ldr	r1, [pc, #36]	@ (80015bc <GeneralCmd+0x2d8>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fdd7 	bl	800014c <strcmp>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f040 8137 	bne.w	8001814 <GeneralCmd+0x530>
									{
										controlLED(7, 1);
 80015a6:	2101      	movs	r1, #1
 80015a8:	2007      	movs	r0, #7
 80015aa:	f7ff fa77 	bl	8000a9c <controlLED>
 80015ae:	e131      	b.n	8001814 <GeneralCmd+0x530>
 80015b0:	2000008c 	.word	0x2000008c
 80015b4:	08004f40 	.word	0x08004f40
 80015b8:	08004f48 	.word	0x08004f48
 80015bc:	08004f4c 	.word	0x08004f4c
 80015c0:	08004f50 	.word	0x08004f50
 80015c4:	08004f58 	.word	0x08004f58
 80015c8:	08004f60 	.word	0x08004f60
 80015cc:	08004f68 	.word	0x08004f68
 80015d0:	08004f70 	.word	0x08004f70
 80015d4:	08004f78 	.word	0x08004f78
 80015d8:	08004f80 	.word	0x08004f80
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:year:",7)==0)
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	4a94      	ldr	r2, [pc, #592]	@ (8001830 <GeneralCmd+0x54c>)
 80015e0:	4413      	add	r3, r2
 80015e2:	2207      	movs	r2, #7
 80015e4:	4993      	ldr	r1, [pc, #588]	@ (8001834 <GeneralCmd+0x550>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 ffd4 	bl	8004594 <strncmp>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d127      	bne.n	8001642 <GeneralCmd+0x35e>
								{

									if(atoi(g_rx1_buffer+i+7)>2000 && atoi(g_rx1_buffer+i+7) <3000)
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	3307      	adds	r3, #7
 80015f6:	4a8e      	ldr	r2, [pc, #568]	@ (8001830 <GeneralCmd+0x54c>)
 80015f8:	4413      	add	r3, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 ff1a 	bl	8004434 <atoi>
 8001600:	4603      	mov	r3, r0
 8001602:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001606:	f340 8105 	ble.w	8001814 <GeneralCmd+0x530>
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	3307      	adds	r3, #7
 800160e:	4a88      	ldr	r2, [pc, #544]	@ (8001830 <GeneralCmd+0x54c>)
 8001610:	4413      	add	r3, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f002 ff0e 	bl	8004434 <atoi>
 8001618:	4603      	mov	r3, r0
 800161a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800161e:	4293      	cmp	r3, r2
 8001620:	f300 80f8 	bgt.w	8001814 <GeneralCmd+0x530>
									{
										time.year = atoi(g_rx1_buffer+i+7);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	3307      	adds	r3, #7
 8001628:	4a81      	ldr	r2, [pc, #516]	@ (8001830 <GeneralCmd+0x54c>)
 800162a:	4413      	add	r3, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f002 ff01 	bl	8004434 <atoi>
 8001632:	4603      	mov	r3, r0
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b80      	ldr	r3, [pc, #512]	@ (8001838 <GeneralCmd+0x554>)
 8001638:	80da      	strh	r2, [r3, #6]
										DS1307_settime(&time);
 800163a:	487f      	ldr	r0, [pc, #508]	@ (8001838 <GeneralCmd+0x554>)
 800163c:	f7fe fe78 	bl	8000330 <DS1307_settime>
 8001640:	e0e8      	b.n	8001814 <GeneralCmd+0x530>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:month:",8)==0)
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	4a7a      	ldr	r2, [pc, #488]	@ (8001830 <GeneralCmd+0x54c>)
 8001646:	4413      	add	r3, r2
 8001648:	2208      	movs	r2, #8
 800164a:	497c      	ldr	r1, [pc, #496]	@ (800183c <GeneralCmd+0x558>)
 800164c:	4618      	mov	r0, r3
 800164e:	f002 ffa1 	bl	8004594 <strncmp>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d124      	bne.n	80016a2 <GeneralCmd+0x3be>
								{

									if(atoi(g_rx1_buffer+i+8)>=1 && atoi(g_rx1_buffer+i+8) <=12)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	3308      	adds	r3, #8
 800165c:	4a74      	ldr	r2, [pc, #464]	@ (8001830 <GeneralCmd+0x54c>)
 800165e:	4413      	add	r3, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fee7 	bl	8004434 <atoi>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	f340 80d3 	ble.w	8001814 <GeneralCmd+0x530>
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	3308      	adds	r3, #8
 8001672:	4a6f      	ldr	r2, [pc, #444]	@ (8001830 <GeneralCmd+0x54c>)
 8001674:	4413      	add	r3, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fedc 	bl	8004434 <atoi>
 800167c:	4603      	mov	r3, r0
 800167e:	2b0c      	cmp	r3, #12
 8001680:	f300 80c8 	bgt.w	8001814 <GeneralCmd+0x530>
									{
										time.month = atoi(g_rx1_buffer+i+8);
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	3308      	adds	r3, #8
 8001688:	4a69      	ldr	r2, [pc, #420]	@ (8001830 <GeneralCmd+0x54c>)
 800168a:	4413      	add	r3, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fed1 	bl	8004434 <atoi>
 8001692:	4603      	mov	r3, r0
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b68      	ldr	r3, [pc, #416]	@ (8001838 <GeneralCmd+0x554>)
 8001698:	715a      	strb	r2, [r3, #5]
										DS1307_settime(&time);
 800169a:	4867      	ldr	r0, [pc, #412]	@ (8001838 <GeneralCmd+0x554>)
 800169c:	f7fe fe48 	bl	8000330 <DS1307_settime>
 80016a0:	e0b8      	b.n	8001814 <GeneralCmd+0x530>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:date:",7)==0)
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	4a62      	ldr	r2, [pc, #392]	@ (8001830 <GeneralCmd+0x54c>)
 80016a6:	4413      	add	r3, r2
 80016a8:	2207      	movs	r2, #7
 80016aa:	4965      	ldr	r1, [pc, #404]	@ (8001840 <GeneralCmd+0x55c>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 ff71 	bl	8004594 <strncmp>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d124      	bne.n	8001702 <GeneralCmd+0x41e>
								{

									if(atoi(g_rx1_buffer+i+7)>=1 && atoi(g_rx1_buffer+i+7) <=31)
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	3307      	adds	r3, #7
 80016bc:	4a5c      	ldr	r2, [pc, #368]	@ (8001830 <GeneralCmd+0x54c>)
 80016be:	4413      	add	r3, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 feb7 	bl	8004434 <atoi>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f340 80a3 	ble.w	8001814 <GeneralCmd+0x530>
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	3307      	adds	r3, #7
 80016d2:	4a57      	ldr	r2, [pc, #348]	@ (8001830 <GeneralCmd+0x54c>)
 80016d4:	4413      	add	r3, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 feac 	bl	8004434 <atoi>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b1f      	cmp	r3, #31
 80016e0:	f300 8098 	bgt.w	8001814 <GeneralCmd+0x530>
									{
										time.date = atoi(g_rx1_buffer+i+7);
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	3307      	adds	r3, #7
 80016e8:	4a51      	ldr	r2, [pc, #324]	@ (8001830 <GeneralCmd+0x54c>)
 80016ea:	4413      	add	r3, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fea1 	bl	8004434 <atoi>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <GeneralCmd+0x554>)
 80016f8:	711a      	strb	r2, [r3, #4]
										DS1307_settime(&time);
 80016fa:	484f      	ldr	r0, [pc, #316]	@ (8001838 <GeneralCmd+0x554>)
 80016fc:	f7fe fe18 	bl	8000330 <DS1307_settime>
 8001700:	e088      	b.n	8001814 <GeneralCmd+0x530>
									}
								}
		else if(strncmp(g_rx1_buffer+i,"c:hour:",7)==0)
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	4a4a      	ldr	r2, [pc, #296]	@ (8001830 <GeneralCmd+0x54c>)
 8001706:	4413      	add	r3, r2
 8001708:	2207      	movs	r2, #7
 800170a:	494e      	ldr	r1, [pc, #312]	@ (8001844 <GeneralCmd+0x560>)
 800170c:	4618      	mov	r0, r3
 800170e:	f002 ff41 	bl	8004594 <strncmp>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d122      	bne.n	800175e <GeneralCmd+0x47a>
										{

											if(atoi(g_rx1_buffer+i+7)>=0 && atoi(g_rx1_buffer+i+7) <=24)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	3307      	adds	r3, #7
 800171c:	4a44      	ldr	r2, [pc, #272]	@ (8001830 <GeneralCmd+0x54c>)
 800171e:	4413      	add	r3, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fe87 	bl	8004434 <atoi>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	db73      	blt.n	8001814 <GeneralCmd+0x530>
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	3307      	adds	r3, #7
 8001730:	4a3f      	ldr	r2, [pc, #252]	@ (8001830 <GeneralCmd+0x54c>)
 8001732:	4413      	add	r3, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fe7d 	bl	8004434 <atoi>
 800173a:	4603      	mov	r3, r0
 800173c:	2b18      	cmp	r3, #24
 800173e:	dc69      	bgt.n	8001814 <GeneralCmd+0x530>
											{
												time.hour = atoi(g_rx1_buffer+i+7);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	3307      	adds	r3, #7
 8001744:	4a3a      	ldr	r2, [pc, #232]	@ (8001830 <GeneralCmd+0x54c>)
 8001746:	4413      	add	r3, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f002 fe73 	bl	8004434 <atoi>
 800174e:	4603      	mov	r3, r0
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b39      	ldr	r3, [pc, #228]	@ (8001838 <GeneralCmd+0x554>)
 8001754:	709a      	strb	r2, [r3, #2]
												DS1307_settime(&time);
 8001756:	4838      	ldr	r0, [pc, #224]	@ (8001838 <GeneralCmd+0x554>)
 8001758:	f7fe fdea 	bl	8000330 <DS1307_settime>
 800175c:	e05a      	b.n	8001814 <GeneralCmd+0x530>
											}
										}
		else if(strncmp(g_rx1_buffer+i,"c:min:",6)==0)
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4a33      	ldr	r2, [pc, #204]	@ (8001830 <GeneralCmd+0x54c>)
 8001762:	4413      	add	r3, r2
 8001764:	2206      	movs	r2, #6
 8001766:	4938      	ldr	r1, [pc, #224]	@ (8001848 <GeneralCmd+0x564>)
 8001768:	4618      	mov	r0, r3
 800176a:	f002 ff13 	bl	8004594 <strncmp>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d122      	bne.n	80017ba <GeneralCmd+0x4d6>
												{

													if(atoi(g_rx1_buffer+i+6)>=0 && atoi(g_rx1_buffer+i+6) <=59)
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	3306      	adds	r3, #6
 8001778:	4a2d      	ldr	r2, [pc, #180]	@ (8001830 <GeneralCmd+0x54c>)
 800177a:	4413      	add	r3, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f002 fe59 	bl	8004434 <atoi>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	db45      	blt.n	8001814 <GeneralCmd+0x530>
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	3306      	adds	r3, #6
 800178c:	4a28      	ldr	r2, [pc, #160]	@ (8001830 <GeneralCmd+0x54c>)
 800178e:	4413      	add	r3, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f002 fe4f 	bl	8004434 <atoi>
 8001796:	4603      	mov	r3, r0
 8001798:	2b3b      	cmp	r3, #59	@ 0x3b
 800179a:	dc3b      	bgt.n	8001814 <GeneralCmd+0x530>
													{
														time.min = atoi(g_rx1_buffer+i+6);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	3306      	adds	r3, #6
 80017a0:	4a23      	ldr	r2, [pc, #140]	@ (8001830 <GeneralCmd+0x54c>)
 80017a2:	4413      	add	r3, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 fe45 	bl	8004434 <atoi>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <GeneralCmd+0x554>)
 80017b0:	705a      	strb	r2, [r3, #1]
														DS1307_settime(&time);
 80017b2:	4821      	ldr	r0, [pc, #132]	@ (8001838 <GeneralCmd+0x554>)
 80017b4:	f7fe fdbc 	bl	8000330 <DS1307_settime>
 80017b8:	e02c      	b.n	8001814 <GeneralCmd+0x530>
													}
												}
		else if(strncmp(g_rx1_buffer+i,"c:sec:",6)==0)
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001830 <GeneralCmd+0x54c>)
 80017be:	4413      	add	r3, r2
 80017c0:	2206      	movs	r2, #6
 80017c2:	4922      	ldr	r1, [pc, #136]	@ (800184c <GeneralCmd+0x568>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fee5 	bl	8004594 <strncmp>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d121      	bne.n	8001814 <GeneralCmd+0x530>
														{

															if(atoi(g_rx1_buffer+i+6)>=0 && atoi(g_rx1_buffer+i+6) <=59)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	3306      	adds	r3, #6
 80017d4:	4a16      	ldr	r2, [pc, #88]	@ (8001830 <GeneralCmd+0x54c>)
 80017d6:	4413      	add	r3, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fe2b 	bl	8004434 <atoi>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db17      	blt.n	8001814 <GeneralCmd+0x530>
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	3306      	adds	r3, #6
 80017e8:	4a11      	ldr	r2, [pc, #68]	@ (8001830 <GeneralCmd+0x54c>)
 80017ea:	4413      	add	r3, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fe21 	bl	8004434 <atoi>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b3b      	cmp	r3, #59	@ 0x3b
 80017f6:	dc0d      	bgt.n	8001814 <GeneralCmd+0x530>
															{
																time.sec = atoi(g_rx1_buffer+i+6);
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	3306      	adds	r3, #6
 80017fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <GeneralCmd+0x54c>)
 80017fe:	4413      	add	r3, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f002 fe17 	bl	8004434 <atoi>
 8001806:	4603      	mov	r3, r0
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <GeneralCmd+0x554>)
 800180c:	701a      	strb	r2, [r3, #0]
																DS1307_settime(&time);
 800180e:	480a      	ldr	r0, [pc, #40]	@ (8001838 <GeneralCmd+0x554>)
 8001810:	f7fe fd8e 	bl	8000330 <DS1307_settime>
	for(uint16_t i=0;i< g_rx1_cnt;i++)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	3301      	adds	r3, #1
 8001818:	80fb      	strh	r3, [r7, #6]
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <GeneralCmd+0x56c>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	429a      	cmp	r2, r3
 8001822:	f4ff ad65 	bcc.w	80012f0 <GeneralCmd+0xc>
															}
														}

		}
}
 8001826:	bf00      	nop
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000008c 	.word	0x2000008c
 8001834:	08004f88 	.word	0x08004f88
 8001838:	20000000 	.word	0x20000000
 800183c:	08004f90 	.word	0x08004f90
 8001840:	08004f9c 	.word	0x08004f9c
 8001844:	08004fa4 	.word	0x08004fa4
 8001848:	08004fac 	.word	0x08004fac
 800184c:	08004fb4 	.word	0x08004fb4
 8001850:	20000086 	.word	0x20000086

08001854 <Uart_Cmd_Handler>:

void Uart_Cmd_Handler()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	if(UART1_IsDoneFrame()&&g_rx1_cnt>=3)
 8001858:	f7ff fd2a 	bl	80012b0 <UART1_IsDoneFrame>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00e      	beq.n	8001880 <Uart_Cmd_Handler+0x2c>
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <Uart_Cmd_Handler+0x30>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d90a      	bls.n	8001880 <Uart_Cmd_Handler+0x2c>
		{
			GeneralCmd();
 800186a:	f7ff fd3b 	bl	80012e4 <GeneralCmd>
			g_rx1_cnt=0;
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <Uart_Cmd_Handler+0x30>)
 8001870:	2200      	movs	r2, #0
 8001872:	801a      	strh	r2, [r3, #0]
			memset(g_rx1_buffer,0,sizeof(g_rx1_buffer));
 8001874:	f240 1209 	movw	r2, #265	@ 0x109
 8001878:	2100      	movs	r1, #0
 800187a:	4803      	ldr	r0, [pc, #12]	@ (8001888 <Uart_Cmd_Handler+0x34>)
 800187c:	f002 fe82 	bl	8004584 <memset>
		}
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000086 	.word	0x20000086
 8001888:	2000008c 	.word	0x2000008c

0800188c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800188c:	f7ff fd0a 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480b      	ldr	r0, [pc, #44]	@ (80018c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001892:	490c      	ldr	r1, [pc, #48]	@ (80018c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001894:	4a0c      	ldr	r2, [pc, #48]	@ (80018c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a09      	ldr	r2, [pc, #36]	@ (80018cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018a8:	4c09      	ldr	r4, [pc, #36]	@ (80018d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f002 fe85 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ba:	f7ff fa5f 	bl	8000d7c <main>
  bx lr
 80018be:	4770      	bx	lr
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80018c8:	08005148 	.word	0x08005148
  ldr r2, =_sbss
 80018cc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80018d0:	200003a4 	.word	0x200003a4

080018d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC1_2_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <HAL_Init+0x28>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <HAL_Init+0x28>)
 80018e2:	f043 0310 	orr.w	r3, r3, #16
 80018e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 f947 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ee:	200f      	movs	r0, #15
 80018f0:	f000 f808 	bl	8001904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f4:	f7ff fb86 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40022000 	.word	0x40022000

08001904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_InitTick+0x54>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_InitTick+0x58>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f95f 	bl	8001be6 <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e00e      	b.n	8001950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d80a      	bhi.n	800194e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f000 f927 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001944:	4a06      	ldr	r2, [pc, #24]	@ (8001960 <HAL_InitTick+0x5c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000008 	.word	0x20000008
 800195c:	20000010 	.word	0x20000010
 8001960:	2000000c 	.word	0x2000000c

08001964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_IncTick+0x1c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_IncTick+0x20>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a03      	ldr	r2, [pc, #12]	@ (8001984 <HAL_IncTick+0x20>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	20000010 	.word	0x20000010
 8001984:	20000258 	.word	0x20000258

08001988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b02      	ldr	r3, [pc, #8]	@ (8001998 <HAL_GetTick+0x10>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	20000258 	.word	0x20000258

0800199c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff fff0 	bl	8001988 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d005      	beq.n	80019c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_Delay+0x44>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c2:	bf00      	nop
 80019c4:	f7ff ffe0 	bl	8001988 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8f7      	bhi.n	80019c4 <HAL_Delay+0x28>
  {
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000010 	.word	0x20000010

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4906      	ldr	r1, [pc, #24]	@ (8001a7c <__NVIC_EnableIRQ+0x34>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	@ (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	@ (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	@ 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff90 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff2d 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff42 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff90 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5f 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff35 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffa2 	bl	8001b38 <SysTick_Config>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d008      	beq.n	8001c28 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e020      	b.n	8001c6a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 020e 	bic.w	r2, r2, #14
 8001c36:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f202 	lsl.w	r2, r1, r2
 8001c56:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d005      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2204      	movs	r2, #4
 8001c90:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e051      	b.n	8001d3c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 020e 	bic.w	r2, r2, #14
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a22      	ldr	r2, [pc, #136]	@ (8001d48 <HAL_DMA_Abort_IT+0xd4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d029      	beq.n	8001d16 <HAL_DMA_Abort_IT+0xa2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a21      	ldr	r2, [pc, #132]	@ (8001d4c <HAL_DMA_Abort_IT+0xd8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d022      	beq.n	8001d12 <HAL_DMA_Abort_IT+0x9e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <HAL_DMA_Abort_IT+0xdc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01a      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x98>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1e      	ldr	r2, [pc, #120]	@ (8001d54 <HAL_DMA_Abort_IT+0xe0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d012      	beq.n	8001d06 <HAL_DMA_Abort_IT+0x92>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d58 <HAL_DMA_Abort_IT+0xe4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00a      	beq.n	8001d00 <HAL_DMA_Abort_IT+0x8c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1b      	ldr	r2, [pc, #108]	@ (8001d5c <HAL_DMA_Abort_IT+0xe8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d102      	bne.n	8001cfa <HAL_DMA_Abort_IT+0x86>
 8001cf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cf8:	e00e      	b.n	8001d18 <HAL_DMA_Abort_IT+0xa4>
 8001cfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cfe:	e00b      	b.n	8001d18 <HAL_DMA_Abort_IT+0xa4>
 8001d00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d04:	e008      	b.n	8001d18 <HAL_DMA_Abort_IT+0xa4>
 8001d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d0a:	e005      	b.n	8001d18 <HAL_DMA_Abort_IT+0xa4>
 8001d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d10:	e002      	b.n	8001d18 <HAL_DMA_Abort_IT+0xa4>
 8001d12:	2310      	movs	r3, #16
 8001d14:	e000      	b.n	8001d18 <HAL_DMA_Abort_IT+0xa4>
 8001d16:	2301      	movs	r3, #1
 8001d18:	4a11      	ldr	r2, [pc, #68]	@ (8001d60 <HAL_DMA_Abort_IT+0xec>)
 8001d1a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
    } 
  }
  return status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40020008 	.word	0x40020008
 8001d4c:	4002001c 	.word	0x4002001c
 8001d50:	40020030 	.word	0x40020030
 8001d54:	40020044 	.word	0x40020044
 8001d58:	40020058 	.word	0x40020058
 8001d5c:	4002006c 	.word	0x4002006c
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b08b      	sub	sp, #44	@ 0x2c
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e169      	b.n	800204c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8158 	bne.w	8002046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a9a      	ldr	r2, [pc, #616]	@ (8002004 <HAL_GPIO_Init+0x2a0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d05e      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001da0:	4a98      	ldr	r2, [pc, #608]	@ (8002004 <HAL_GPIO_Init+0x2a0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d875      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001da6:	4a98      	ldr	r2, [pc, #608]	@ (8002008 <HAL_GPIO_Init+0x2a4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d058      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dac:	4a96      	ldr	r2, [pc, #600]	@ (8002008 <HAL_GPIO_Init+0x2a4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d86f      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001db2:	4a96      	ldr	r2, [pc, #600]	@ (800200c <HAL_GPIO_Init+0x2a8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d052      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001db8:	4a94      	ldr	r2, [pc, #592]	@ (800200c <HAL_GPIO_Init+0x2a8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d869      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dbe:	4a94      	ldr	r2, [pc, #592]	@ (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d04c      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dc4:	4a92      	ldr	r2, [pc, #584]	@ (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d863      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dca:	4a92      	ldr	r2, [pc, #584]	@ (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d046      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a90      	ldr	r2, [pc, #576]	@ (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d85d      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d82a      	bhi.n	8001e30 <HAL_GPIO_Init+0xcc>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d859      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dde:	a201      	add	r2, pc, #4	@ (adr r2, 8001de4 <HAL_GPIO_Init+0x80>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001e39 	.word	0x08001e39
 8001dec:	08001e4b 	.word	0x08001e4b
 8001df0:	08001e8d 	.word	0x08001e8d
 8001df4:	08001e93 	.word	0x08001e93
 8001df8:	08001e93 	.word	0x08001e93
 8001dfc:	08001e93 	.word	0x08001e93
 8001e00:	08001e93 	.word	0x08001e93
 8001e04:	08001e93 	.word	0x08001e93
 8001e08:	08001e93 	.word	0x08001e93
 8001e0c:	08001e93 	.word	0x08001e93
 8001e10:	08001e93 	.word	0x08001e93
 8001e14:	08001e93 	.word	0x08001e93
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e93 	.word	0x08001e93
 8001e20:	08001e93 	.word	0x08001e93
 8001e24:	08001e93 	.word	0x08001e93
 8001e28:	08001e41 	.word	0x08001e41
 8001e2c:	08001e55 	.word	0x08001e55
 8001e30:	4a79      	ldr	r2, [pc, #484]	@ (8002018 <HAL_GPIO_Init+0x2b4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e36:	e02c      	b.n	8001e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	623b      	str	r3, [r7, #32]
          break;
 8001e3e:	e029      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	3304      	adds	r3, #4
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e024      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	3308      	adds	r3, #8
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e01f      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e01a      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e66:	2304      	movs	r3, #4
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e013      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e74:	2308      	movs	r3, #8
 8001e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	611a      	str	r2, [r3, #16]
          break;
 8001e7e:	e009      	b.n	8001e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e80:	2308      	movs	r3, #8
 8001e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	615a      	str	r2, [r3, #20]
          break;
 8001e8a:	e003      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          break;
 8001e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2bff      	cmp	r3, #255	@ 0xff
 8001e98:	d801      	bhi.n	8001e9e <HAL_GPIO_Init+0x13a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_Init+0x13e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_GPIO_Init+0x14c>
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0x152>
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	3b08      	subs	r3, #8
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	210f      	movs	r1, #15
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	6a39      	ldr	r1, [r7, #32]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80b1 	beq.w	8002046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001efc:	4a48      	ldr	r2, [pc, #288]	@ (8002020 <HAL_GPIO_Init+0x2bc>)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a40      	ldr	r2, [pc, #256]	@ (8002024 <HAL_GPIO_Init+0x2c0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <HAL_GPIO_Init+0x1ec>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002028 <HAL_GPIO_Init+0x2c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00d      	beq.n	8001f4c <HAL_GPIO_Init+0x1e8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3e      	ldr	r2, [pc, #248]	@ (800202c <HAL_GPIO_Init+0x2c8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <HAL_GPIO_Init+0x1e4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8002030 <HAL_GPIO_Init+0x2cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_GPIO_Init+0x1e0>
 8001f40:	2303      	movs	r3, #3
 8001f42:	e006      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f44:	2304      	movs	r3, #4
 8001f46:	e004      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f50:	2300      	movs	r3, #0
 8001f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f62:	492f      	ldr	r1, [pc, #188]	@ (8002020 <HAL_GPIO_Init+0x2bc>)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	492c      	ldr	r1, [pc, #176]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4928      	ldr	r1, [pc, #160]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa4:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4922      	ldr	r1, [pc, #136]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	491e      	ldr	r1, [pc, #120]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4918      	ldr	r1, [pc, #96]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4914      	ldr	r1, [pc, #80]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d021      	beq.n	8002038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	490e      	ldr	r1, [pc, #56]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e021      	b.n	8002046 <HAL_GPIO_Init+0x2e2>
 8002002:	bf00      	nop
 8002004:	10320000 	.word	0x10320000
 8002008:	10310000 	.word	0x10310000
 800200c:	10220000 	.word	0x10220000
 8002010:	10210000 	.word	0x10210000
 8002014:	10120000 	.word	0x10120000
 8002018:	10110000 	.word	0x10110000
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	40010800 	.word	0x40010800
 8002028:	40010c00 	.word	0x40010c00
 800202c:	40011000 	.word	0x40011000
 8002030:	40011400 	.word	0x40011400
 8002034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_GPIO_Init+0x304>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	43db      	mvns	r3, r3
 8002040:	4909      	ldr	r1, [pc, #36]	@ (8002068 <HAL_GPIO_Init+0x304>)
 8002042:	4013      	ands	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae8e 	bne.w	8001d78 <HAL_GPIO_Init+0x14>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	@ 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	611a      	str	r2, [r3, #16]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e12b      	b.n	8002306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe ffd0 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2224      	movs	r2, #36	@ 0x24
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002100:	f001 fbca 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8002104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a81      	ldr	r2, [pc, #516]	@ (8002310 <HAL_I2C_Init+0x274>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d807      	bhi.n	8002120 <HAL_I2C_Init+0x84>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a80      	ldr	r2, [pc, #512]	@ (8002314 <HAL_I2C_Init+0x278>)
 8002114:	4293      	cmp	r3, r2
 8002116:	bf94      	ite	ls
 8002118:	2301      	movls	r3, #1
 800211a:	2300      	movhi	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e006      	b.n	800212e <HAL_I2C_Init+0x92>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a7d      	ldr	r2, [pc, #500]	@ (8002318 <HAL_I2C_Init+0x27c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	bf94      	ite	ls
 8002128:	2301      	movls	r3, #1
 800212a:	2300      	movhi	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0e7      	b.n	8002306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a78      	ldr	r2, [pc, #480]	@ (800231c <HAL_I2C_Init+0x280>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0c9b      	lsrs	r3, r3, #18
 8002140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a6a      	ldr	r2, [pc, #424]	@ (8002310 <HAL_I2C_Init+0x274>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d802      	bhi.n	8002170 <HAL_I2C_Init+0xd4>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3301      	adds	r3, #1
 800216e:	e009      	b.n	8002184 <HAL_I2C_Init+0xe8>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	4a69      	ldr	r2, [pc, #420]	@ (8002320 <HAL_I2C_Init+0x284>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	3301      	adds	r3, #1
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	430b      	orrs	r3, r1
 800218a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002196:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	495c      	ldr	r1, [pc, #368]	@ (8002310 <HAL_I2C_Init+0x274>)
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d819      	bhi.n	80021d8 <HAL_I2C_Init+0x13c>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1e59      	subs	r1, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b2:	1c59      	adds	r1, r3, #1
 80021b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021b8:	400b      	ands	r3, r1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_I2C_Init+0x138>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1e59      	subs	r1, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d2:	e051      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 80021d4:	2304      	movs	r3, #4
 80021d6:	e04f      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d111      	bne.n	8002204 <HAL_I2C_Init+0x168>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1e58      	subs	r0, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	440b      	add	r3, r1
 80021ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e012      	b.n	800222a <HAL_I2C_Init+0x18e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Init+0x196>
 800222e:	2301      	movs	r3, #1
 8002230:	e022      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10e      	bne.n	8002258 <HAL_I2C_Init+0x1bc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1e58      	subs	r0, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	440b      	add	r3, r1
 8002248:	fbb0 f3f3 	udiv	r3, r0, r3
 800224c:	3301      	adds	r3, #1
 800224e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002256:	e00f      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1e58      	subs	r0, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	0099      	lsls	r1, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	fbb0 f3f3 	udiv	r3, r0, r3
 800226e:	3301      	adds	r3, #1
 8002270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002274:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	6809      	ldr	r1, [r1, #0]
 800227c:	4313      	orrs	r3, r2
 800227e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69da      	ldr	r2, [r3, #28]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6911      	ldr	r1, [r2, #16]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68d2      	ldr	r2, [r2, #12]
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	000186a0 	.word	0x000186a0
 8002314:	001e847f 	.word	0x001e847f
 8002318:	003d08ff 	.word	0x003d08ff
 800231c:	431bde83 	.word	0x431bde83
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	461a      	mov	r2, r3
 8002330:	460b      	mov	r3, r1
 8002332:	817b      	strh	r3, [r7, #10]
 8002334:	4613      	mov	r3, r2
 8002336:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7ff fb26 	bl	8001988 <HAL_GetTick>
 800233c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b20      	cmp	r3, #32
 8002348:	f040 80e0 	bne.w	800250c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2319      	movs	r3, #25
 8002352:	2201      	movs	r2, #1
 8002354:	4970      	ldr	r1, [pc, #448]	@ (8002518 <HAL_I2C_Master_Transmit+0x1f4>)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fc9e 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002362:	2302      	movs	r3, #2
 8002364:	e0d3      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_I2C_Master_Transmit+0x50>
 8002370:	2302      	movs	r3, #2
 8002372:	e0cc      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d007      	beq.n	800239a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2221      	movs	r2, #33	@ 0x21
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2210      	movs	r2, #16
 80023b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	893a      	ldrh	r2, [r7, #8]
 80023ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a50      	ldr	r2, [pc, #320]	@ (800251c <HAL_I2C_Master_Transmit+0x1f8>)
 80023da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	6a3a      	ldr	r2, [r7, #32]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fb08 	bl	80029f8 <I2C_MasterRequestWrite>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e08d      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002408:	e066      	b.n	80024d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	6a39      	ldr	r1, [r7, #32]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fd5c 	bl	8002ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	2b04      	cmp	r3, #4
 8002420:	d107      	bne.n	8002432 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11b      	bne.n	80024ac <HAL_I2C_Master_Transmit+0x188>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	d017      	beq.n	80024ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	6a39      	ldr	r1, [r7, #32]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fd53 	bl	8002f5c <I2C_WaitOnBTFFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d107      	bne.n	80024d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e01a      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d194      	bne.n	800240a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	00100002 	.word	0x00100002
 800251c:	ffff0000 	.word	0xffff0000

08002520 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	461a      	mov	r2, r3
 800252c:	460b      	mov	r3, r1
 800252e:	817b      	strh	r3, [r7, #10]
 8002530:	4613      	mov	r3, r2
 8002532:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff fa26 	bl	8001988 <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b20      	cmp	r3, #32
 8002548:	f040 824b 	bne.w	80029e2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2319      	movs	r3, #25
 8002552:	2201      	movs	r2, #1
 8002554:	497f      	ldr	r1, [pc, #508]	@ (8002754 <HAL_I2C_Master_Receive+0x234>)
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fb9e 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
 8002564:	e23e      	b.n	80029e4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_I2C_Master_Receive+0x54>
 8002570:	2302      	movs	r3, #2
 8002572:	e237      	b.n	80029e4 <HAL_I2C_Master_Receive+0x4c4>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d007      	beq.n	800259a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2222      	movs	r2, #34	@ 0x22
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2210      	movs	r2, #16
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	893a      	ldrh	r2, [r7, #8]
 80025ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002758 <HAL_I2C_Master_Receive+0x238>)
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025dc:	8979      	ldrh	r1, [r7, #10]
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fa8a 	bl	8002afc <I2C_MasterRequestRead>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1f8      	b.n	80029e4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d113      	bne.n	8002622 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e1cc      	b.n	80029bc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002626:	2b01      	cmp	r3, #1
 8002628:	d11e      	bne.n	8002668 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002638:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800263a:	b672      	cpsid	i
}
 800263c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002662:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002664:	b662      	cpsie	i
}
 8002666:	e035      	b.n	80026d4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266c:	2b02      	cmp	r3, #2
 800266e:	d11e      	bne.n	80026ae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800267e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002680:	b672      	cpsid	i
}
 8002682:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026aa:	b662      	cpsie	i
}
 80026ac:	e012      	b.n	80026d4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026d4:	e172      	b.n	80029bc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026da:	2b03      	cmp	r3, #3
 80026dc:	f200 811f 	bhi.w	800291e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d123      	bne.n	8002730 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fc7d 	bl	8002fec <I2C_WaitOnRXNEFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e173      	b.n	80029e4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800272e:	e145      	b.n	80029bc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002734:	2b02      	cmp	r3, #2
 8002736:	d152      	bne.n	80027de <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273e:	2200      	movs	r2, #0
 8002740:	4906      	ldr	r1, [pc, #24]	@ (800275c <HAL_I2C_Master_Receive+0x23c>)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 faa8 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e148      	b.n	80029e4 <HAL_I2C_Master_Receive+0x4c4>
 8002752:	bf00      	nop
 8002754:	00100002 	.word	0x00100002
 8002758:	ffff0000 	.word	0xffff0000
 800275c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002760:	b672      	cpsid	i
}
 8002762:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027a6:	b662      	cpsie	i
}
 80027a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027dc:	e0ee      	b.n	80029bc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	2200      	movs	r2, #0
 80027e6:	4981      	ldr	r1, [pc, #516]	@ (80029ec <HAL_I2C_Master_Receive+0x4cc>)
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fa55 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0f5      	b.n	80029e4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002806:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800283e:	4b6c      	ldr	r3, [pc, #432]	@ (80029f0 <HAL_I2C_Master_Receive+0x4d0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	08db      	lsrs	r3, r3, #3
 8002844:	4a6b      	ldr	r2, [pc, #428]	@ (80029f4 <HAL_I2C_Master_Receive+0x4d4>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0a1a      	lsrs	r2, r3, #8
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00da      	lsls	r2, r3, #3
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	3b01      	subs	r3, #1
 800285c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d118      	bne.n	8002896 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	f043 0220 	orr.w	r2, r3, #32
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002886:	b662      	cpsie	i
}
 8002888:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0a6      	b.n	80029e4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d1d9      	bne.n	8002858 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028e6:	b662      	cpsie	i
}
 80028e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800291c:	e04e      	b.n	80029bc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fb62 	bl	8002fec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e058      	b.n	80029e4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d124      	bne.n	80029bc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	2b03      	cmp	r3, #3
 8002978:	d107      	bne.n	800298a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002988:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f47f ae88 	bne.w	80026d6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3728      	adds	r7, #40	@ 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	00010004 	.word	0x00010004
 80029f0:	20000008 	.word	0x20000008
 80029f4:	14f8b589 	.word	0x14f8b589

080029f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	460b      	mov	r3, r1
 8002a06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d006      	beq.n	8002a22 <I2C_MasterRequestWrite+0x2a>
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d003      	beq.n	8002a22 <I2C_MasterRequestWrite+0x2a>
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a20:	d108      	bne.n	8002a34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e00b      	b.n	8002a4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	2b12      	cmp	r3, #18
 8002a3a:	d107      	bne.n	8002a4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f91d 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a72:	d103      	bne.n	8002a7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e035      	b.n	8002aec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a88:	d108      	bne.n	8002a9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a98:	611a      	str	r2, [r3, #16]
 8002a9a:	e01b      	b.n	8002ad4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a9c:	897b      	ldrh	r3, [r7, #10]
 8002a9e:	11db      	asrs	r3, r3, #7
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0306 	and.w	r3, r3, #6
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f063 030f 	orn	r3, r3, #15
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	490e      	ldr	r1, [pc, #56]	@ (8002af4 <I2C_MasterRequestWrite+0xfc>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f966 	bl	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e010      	b.n	8002aec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4907      	ldr	r1, [pc, #28]	@ (8002af8 <I2C_MasterRequestWrite+0x100>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f956 	bl	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	00010008 	.word	0x00010008
 8002af8:	00010002 	.word	0x00010002

08002afc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d006      	beq.n	8002b36 <I2C_MasterRequestRead+0x3a>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d003      	beq.n	8002b36 <I2C_MasterRequestRead+0x3a>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b34:	d108      	bne.n	8002b48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	e00b      	b.n	8002b60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	2b11      	cmp	r3, #17
 8002b4e:	d107      	bne.n	8002b60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f893 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b86:	d103      	bne.n	8002b90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e079      	b.n	8002c88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b9c:	d108      	bne.n	8002bb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b9e:	897b      	ldrh	r3, [r7, #10]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	611a      	str	r2, [r3, #16]
 8002bae:	e05f      	b.n	8002c70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bb0:	897b      	ldrh	r3, [r7, #10]
 8002bb2:	11db      	asrs	r3, r3, #7
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 0306 	and.w	r3, r3, #6
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f063 030f 	orn	r3, r3, #15
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4930      	ldr	r1, [pc, #192]	@ (8002c90 <I2C_MasterRequestRead+0x194>)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f8dc 	bl	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e054      	b.n	8002c88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	4929      	ldr	r1, [pc, #164]	@ (8002c94 <I2C_MasterRequestRead+0x198>)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f8cc 	bl	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e044      	b.n	8002c88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f831 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c4a:	d103      	bne.n	8002c54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e017      	b.n	8002c88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c58:	897b      	ldrh	r3, [r7, #10]
 8002c5a:	11db      	asrs	r3, r3, #7
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f003 0306 	and.w	r3, r3, #6
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f063 030e 	orn	r3, r3, #14
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4907      	ldr	r1, [pc, #28]	@ (8002c94 <I2C_MasterRequestRead+0x198>)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f888 	bl	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	00010008 	.word	0x00010008
 8002c94:	00010002 	.word	0x00010002

08002c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca8:	e048      	b.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d044      	beq.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe fe69 	bl	8001988 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d139      	bne.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d10d      	bne.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	43da      	mvns	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	e00c      	b.n	8002d08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d116      	bne.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e023      	b.n	8002d84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10d      	bne.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	e00c      	b.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d093      	beq.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d9a:	e071      	b.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002daa:	d123      	bne.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e067      	b.n	8002ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d041      	beq.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfc:	f7fe fdc4 	bl	8001988 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d302      	bcc.n	8002e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d136      	bne.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d10c      	bne.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	43da      	mvns	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	e00b      	b.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4013      	ands	r3, r2
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e021      	b.n	8002ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10c      	bne.n	8002ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e00b      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f47f af6d 	bne.w	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed8:	e034      	b.n	8002f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f8e3 	bl	80030a6 <I2C_IsAcknowledgeFailed>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e034      	b.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d028      	beq.n	8002f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe fd49 	bl	8001988 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d11d      	bne.n	8002f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f12:	2b80      	cmp	r3, #128	@ 0x80
 8002f14:	d016      	beq.n	8002f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e007      	b.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4e:	2b80      	cmp	r3, #128	@ 0x80
 8002f50:	d1c3      	bne.n	8002eda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f68:	e034      	b.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f89b 	bl	80030a6 <I2C_IsAcknowledgeFailed>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e034      	b.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d028      	beq.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fe fd01 	bl	8001988 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11d      	bne.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d016      	beq.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e007      	b.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d1c3      	bne.n	8002f6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ff8:	e049      	b.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b10      	cmp	r3, #16
 8003006:	d119      	bne.n	800303c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0210 	mvn.w	r2, #16
 8003010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e030      	b.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303c:	f7fe fca4 	bl	8001988 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11d      	bne.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305c:	2b40      	cmp	r3, #64	@ 0x40
 800305e:	d016      	beq.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e007      	b.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003098:	2b40      	cmp	r3, #64	@ 0x40
 800309a:	d1ae      	bne.n	8002ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030bc:	d11b      	bne.n	80030f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
	...

08003104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e272      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8087 	beq.w	8003232 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003124:	4b92      	ldr	r3, [pc, #584]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b04      	cmp	r3, #4
 800312e:	d00c      	beq.n	800314a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003130:	4b8f      	ldr	r3, [pc, #572]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b08      	cmp	r3, #8
 800313a:	d112      	bne.n	8003162 <HAL_RCC_OscConfig+0x5e>
 800313c:	4b8c      	ldr	r3, [pc, #560]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003148:	d10b      	bne.n	8003162 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314a:	4b89      	ldr	r3, [pc, #548]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d06c      	beq.n	8003230 <HAL_RCC_OscConfig+0x12c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d168      	bne.n	8003230 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e24c      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x76>
 800316c:	4b80      	ldr	r3, [pc, #512]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a7f      	ldr	r2, [pc, #508]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e02e      	b.n	80031d8 <HAL_RCC_OscConfig+0xd4>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x98>
 8003182:	4b7b      	ldr	r3, [pc, #492]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a7a      	ldr	r2, [pc, #488]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b78      	ldr	r3, [pc, #480]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a77      	ldr	r2, [pc, #476]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003194:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xd4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0xbc>
 80031a6:	4b72      	ldr	r3, [pc, #456]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a71      	ldr	r2, [pc, #452]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xd4>
 80031c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b68      	ldr	r3, [pc, #416]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a67      	ldr	r2, [pc, #412]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fbd2 	bl	8001988 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fbce 	bl	8001988 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	@ 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e200      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xe4>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe fbbe 	bl	8001988 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fbba 	bl	8001988 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1ec      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	4b53      	ldr	r3, [pc, #332]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x10c>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d063      	beq.n	8003306 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800323e:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800324a:	4b49      	ldr	r3, [pc, #292]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b08      	cmp	r3, #8
 8003254:	d11c      	bne.n	8003290 <HAL_RCC_OscConfig+0x18c>
 8003256:	4b46      	ldr	r3, [pc, #280]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	4b43      	ldr	r3, [pc, #268]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_RCC_OscConfig+0x176>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d001      	beq.n	800327a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e1c0      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327a:	4b3d      	ldr	r3, [pc, #244]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4939      	ldr	r1, [pc, #228]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	e03a      	b.n	8003306 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003298:	4b36      	ldr	r3, [pc, #216]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe fb73 	bl	8001988 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a6:	f7fe fb6f 	bl	8001988 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e1a1      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4927      	ldr	r1, [pc, #156]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
 80032d8:	e015      	b.n	8003306 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032da:	4b26      	ldr	r3, [pc, #152]	@ (8003374 <HAL_RCC_OscConfig+0x270>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fb52 	bl	8001988 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e8:	f7fe fb4e 	bl	8001988 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e180      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d03a      	beq.n	8003388 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d019      	beq.n	800334e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331a:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7fe fb32 	bl	8001988 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003328:	f7fe fb2e 	bl	8001988 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e160      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <HAL_RCC_OscConfig+0x26c>)
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003346:	2001      	movs	r0, #1
 8003348:	f000 face 	bl	80038e8 <RCC_Delay>
 800334c:	e01c      	b.n	8003388 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003354:	f7fe fb18 	bl	8001988 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335a:	e00f      	b.n	800337c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800335c:	f7fe fb14 	bl	8001988 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d908      	bls.n	800337c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e146      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	42420000 	.word	0x42420000
 8003378:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800337c:	4b92      	ldr	r3, [pc, #584]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e9      	bne.n	800335c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80a6 	beq.w	80034e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339a:	4b8b      	ldr	r3, [pc, #556]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a6:	4b88      	ldr	r3, [pc, #544]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4a87      	ldr	r2, [pc, #540]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	61d3      	str	r3, [r2, #28]
 80033b2:	4b85      	ldr	r3, [pc, #532]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	4b82      	ldr	r3, [pc, #520]	@ (80035cc <HAL_RCC_OscConfig+0x4c8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d118      	bne.n	8003400 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ce:	4b7f      	ldr	r3, [pc, #508]	@ (80035cc <HAL_RCC_OscConfig+0x4c8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7e      	ldr	r2, [pc, #504]	@ (80035cc <HAL_RCC_OscConfig+0x4c8>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033da:	f7fe fad5 	bl	8001988 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fe fad1 	bl	8001988 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b64      	cmp	r3, #100	@ 0x64
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e103      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	4b75      	ldr	r3, [pc, #468]	@ (80035cc <HAL_RCC_OscConfig+0x4c8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x312>
 8003408:	4b6f      	ldr	r3, [pc, #444]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a6e      	ldr	r2, [pc, #440]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	e02d      	b.n	8003472 <HAL_RCC_OscConfig+0x36e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x334>
 800341e:	4b6a      	ldr	r3, [pc, #424]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	4a69      	ldr	r2, [pc, #420]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	6213      	str	r3, [r2, #32]
 800342a:	4b67      	ldr	r3, [pc, #412]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4a66      	ldr	r2, [pc, #408]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	6213      	str	r3, [r2, #32]
 8003436:	e01c      	b.n	8003472 <HAL_RCC_OscConfig+0x36e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b05      	cmp	r3, #5
 800343e:	d10c      	bne.n	800345a <HAL_RCC_OscConfig+0x356>
 8003440:	4b61      	ldr	r3, [pc, #388]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4a60      	ldr	r2, [pc, #384]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6213      	str	r3, [r2, #32]
 800344c:	4b5e      	ldr	r3, [pc, #376]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4a5d      	ldr	r2, [pc, #372]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	e00b      	b.n	8003472 <HAL_RCC_OscConfig+0x36e>
 800345a:	4b5b      	ldr	r3, [pc, #364]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a5a      	ldr	r2, [pc, #360]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	6213      	str	r3, [r2, #32]
 8003466:	4b58      	ldr	r3, [pc, #352]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a57      	ldr	r2, [pc, #348]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	f023 0304 	bic.w	r3, r3, #4
 8003470:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d015      	beq.n	80034a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7fe fa85 	bl	8001988 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fa81 	bl	8001988 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e0b1      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003498:	4b4b      	ldr	r3, [pc, #300]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ee      	beq.n	8003482 <HAL_RCC_OscConfig+0x37e>
 80034a4:	e014      	b.n	80034d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a6:	f7fe fa6f 	bl	8001988 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fe fa6b 	bl	8001988 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e09b      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c4:	4b40      	ldr	r3, [pc, #256]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ee      	bne.n	80034ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d105      	bne.n	80034e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d6:	4b3c      	ldr	r3, [pc, #240]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4a3b      	ldr	r2, [pc, #236]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8087 	beq.w	80035fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ec:	4b36      	ldr	r3, [pc, #216]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d061      	beq.n	80035bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d146      	bne.n	800358e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003500:	4b33      	ldr	r3, [pc, #204]	@ (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003506:	f7fe fa3f 	bl	8001988 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe fa3b 	bl	8001988 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e06d      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003520:	4b29      	ldr	r3, [pc, #164]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003534:	d108      	bne.n	8003548 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003536:	4b24      	ldr	r3, [pc, #144]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	4921      	ldr	r1, [pc, #132]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003548:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a19      	ldr	r1, [r3, #32]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	430b      	orrs	r3, r1
 800355a:	491b      	ldr	r1, [pc, #108]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003560:	4b1b      	ldr	r3, [pc, #108]	@ (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7fe fa0f 	bl	8001988 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356e:	f7fe fa0b 	bl	8001988 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e03d      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003580:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x46a>
 800358c:	e035      	b.n	80035fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358e:	4b10      	ldr	r3, [pc, #64]	@ (80035d0 <HAL_RCC_OscConfig+0x4cc>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe f9f8 	bl	8001988 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359c:	f7fe f9f4 	bl	8001988 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e026      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ae:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x498>
 80035ba:	e01e      	b.n	80035fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e019      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40007000 	.word	0x40007000
 80035d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <HAL_RCC_OscConfig+0x500>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0d0      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b6a      	ldr	r3, [pc, #424]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d910      	bls.n	800364c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b67      	ldr	r3, [pc, #412]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	4965      	ldr	r1, [pc, #404]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b63      	ldr	r3, [pc, #396]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0b8      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003664:	4b59      	ldr	r3, [pc, #356]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a58      	ldr	r2, [pc, #352]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800366e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800367c:	4b53      	ldr	r3, [pc, #332]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a52      	ldr	r2, [pc, #328]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003686:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b50      	ldr	r3, [pc, #320]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	494d      	ldr	r1, [pc, #308]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d040      	beq.n	8003728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b47      	ldr	r3, [pc, #284]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d115      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07f      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b41      	ldr	r3, [pc, #260]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e073      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06b      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e6:	4b39      	ldr	r3, [pc, #228]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4936      	ldr	r1, [pc, #216]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f8:	f7fe f946 	bl	8001988 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fe f942 	bl	8001988 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e053      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 020c 	and.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1eb      	bne.n	8003700 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b27      	ldr	r3, [pc, #156]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d210      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b24      	ldr	r3, [pc, #144]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4922      	ldr	r1, [pc, #136]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e032      	b.n	80037be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4916      	ldr	r1, [pc, #88]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003782:	4b12      	ldr	r3, [pc, #72]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	490e      	ldr	r1, [pc, #56]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003796:	f000 f821 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 800379a:	4602      	mov	r2, r0
 800379c:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	490a      	ldr	r1, [pc, #40]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c8>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a09      	ldr	r2, [pc, #36]	@ (80037d4 <HAL_RCC_ClockConfig+0x1cc>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037b2:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <HAL_RCC_ClockConfig+0x1d0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe f8a4 	bl	8001904 <HAL_InitTick>

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40022000 	.word	0x40022000
 80037cc:	40021000 	.word	0x40021000
 80037d0:	08004fd8 	.word	0x08004fd8
 80037d4:	20000008 	.word	0x20000008
 80037d8:	2000000c 	.word	0x2000000c

080037dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x94>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b04      	cmp	r3, #4
 8003804:	d002      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x30>
 8003806:	2b08      	cmp	r3, #8
 8003808:	d003      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x36>
 800380a:	e027      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800380c:	4b19      	ldr	r3, [pc, #100]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x98>)
 800380e:	613b      	str	r3, [r7, #16]
      break;
 8003810:	e027      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	0c9b      	lsrs	r3, r3, #18
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4a17      	ldr	r2, [pc, #92]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x9c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d010      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800382a:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x94>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0c5b      	lsrs	r3, r3, #17
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	4a11      	ldr	r2, [pc, #68]	@ (800387c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a0d      	ldr	r2, [pc, #52]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x98>)
 800383e:	fb03 f202 	mul.w	r2, r3, r2
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e004      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a0c      	ldr	r2, [pc, #48]	@ (8003880 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	613b      	str	r3, [r7, #16]
      break;
 800385a:	e002      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x98>)
 800385e:	613b      	str	r3, [r7, #16]
      break;
 8003860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003862:	693b      	ldr	r3, [r7, #16]
}
 8003864:	4618      	mov	r0, r3
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	007a1200 	.word	0x007a1200
 8003878:	08004ff0 	.word	0x08004ff0
 800387c:	08005000 	.word	0x08005000
 8003880:	003d0900 	.word	0x003d0900

08003884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003888:	4b02      	ldr	r3, [pc, #8]	@ (8003894 <HAL_RCC_GetHCLKFreq+0x10>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	20000008 	.word	0x20000008

08003898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800389c:	f7ff fff2 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	@ (80038b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	@ (80038bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08004fe8 	.word	0x08004fe8

080038c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c4:	f7ff ffde 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0adb      	lsrs	r3, r3, #11
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	@ (80038e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08004fe8 	.word	0x08004fe8

080038e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f0:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <RCC_Delay+0x34>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003920 <RCC_Delay+0x38>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0a5b      	lsrs	r3, r3, #9
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003904:	bf00      	nop
  }
  while (Delay --);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1e5a      	subs	r2, r3, #1
 800390a:	60fa      	str	r2, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <RCC_Delay+0x1c>
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	20000008 	.word	0x20000008
 8003920:	10624dd3 	.word	0x10624dd3

08003924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e042      	b.n	80039bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fbdc 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	@ 0x24
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fcd5 	bl	8004318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800397c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800398c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800399c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d112      	bne.n	8003a04 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_UART_Receive_IT+0x26>
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e00b      	b.n	8003a06 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fab7 	bl	8003f6e <UART_Start_Receive_IT>
 8003a00:	4603      	mov	r3, r0
 8003a02:	e000      	b.n	8003a06 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b0ba      	sub	sp, #232	@ 0xe8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_UART_IRQHandler+0x66>
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fb93 	bl	800419a <UART_Receive_IT>
      return;
 8003a74:	e25b      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80de 	beq.w	8003c3c <HAL_UART_IRQHandler+0x22c>
 8003a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80d1 	beq.w	8003c3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_UART_IRQHandler+0xae>
 8003aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xd2>
 8003aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ada:	f043 0202 	orr.w	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_UART_IRQHandler+0xf6>
 8003aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afe:	f043 0204 	orr.w	r2, r3, #4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d011      	beq.n	8003b36 <HAL_UART_IRQHandler+0x126>
 8003b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f043 0208 	orr.w	r2, r3, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 81f2 	beq.w	8003f24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_UART_IRQHandler+0x14e>
 8003b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb1e 	bl	800419a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_UART_IRQHandler+0x17a>
 8003b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d04f      	beq.n	8003c2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fa28 	bl	8003fe0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d041      	beq.n	8003c22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3314      	adds	r3, #20
 8003ba4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1d9      	bne.n	8003b9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d013      	beq.n	8003c1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8003df0 <HAL_UART_IRQHandler+0x3e0>)
 8003bf8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe f838 	bl	8001c74 <HAL_DMA_Abort_IT>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c14:	4610      	mov	r0, r2
 8003c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	e00e      	b.n	8003c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f993 	bl	8003f46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	e00a      	b.n	8003c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f98f 	bl	8003f46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e006      	b.n	8003c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f98b 	bl	8003f46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c36:	e175      	b.n	8003f24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	bf00      	nop
    return;
 8003c3a:	e173      	b.n	8003f24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 814f 	bne.w	8003ee4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8148 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8141 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80b6 	beq.w	8003df4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8145 	beq.w	8003f28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	f080 813e 	bcs.w	8003f28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f000 8088 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003cec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cf8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1d9      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e1      	bne.n	8003d0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e3      	bne.n	8003d48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da0:	f023 0310 	bic.w	r3, r3, #16
 8003da4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003db2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003db4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003db8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd ff17 	bl	8001bfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8b6 	bl	8003f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dec:	e09c      	b.n	8003f28 <HAL_UART_IRQHandler+0x518>
 8003dee:	bf00      	nop
 8003df0:	080040a5 	.word	0x080040a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 808e 	beq.w	8003f2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8089 	beq.w	8003f2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e3      	bne.n	8003e1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	623b      	str	r3, [r7, #32]
   return(result);
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e76:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e3      	bne.n	8003e52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e3      	bne.n	8003e98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f83b 	bl	8003f58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ee2:	e023      	b.n	8003f2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <HAL_UART_IRQHandler+0x4f4>
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f8e5 	bl	80040cc <UART_Transmit_IT>
    return;
 8003f02:	e014      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00e      	beq.n	8003f2e <HAL_UART_IRQHandler+0x51e>
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f924 	bl	800416a <UART_EndTransmit_IT>
    return;
 8003f22:	e004      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
    return;
 8003f24:	bf00      	nop
 8003f26:	e002      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f28:	bf00      	nop
 8003f2a:	e000      	b.n	8003f2e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f2c:	bf00      	nop
  }
}
 8003f2e:	37e8      	adds	r7, #232	@ 0xe8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	88fa      	ldrh	r2, [r7, #6]
 8003f86:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2222      	movs	r2, #34	@ 0x22
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0220 	orr.w	r2, r2, #32
 8003fd2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b095      	sub	sp, #84	@ 0x54
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004008:	643a      	str	r2, [r7, #64]	@ 0x40
 800400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800400e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	61fb      	str	r3, [r7, #28]
   return(result);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800403c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800403e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004054:	2b01      	cmp	r3, #1
 8004056:	d119      	bne.n	800408c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	60bb      	str	r3, [r7, #8]
   return(result);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f023 0310 	bic.w	r3, r3, #16
 800406e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004078:	61ba      	str	r2, [r7, #24]
 800407a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6979      	ldr	r1, [r7, #20]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	613b      	str	r3, [r7, #16]
   return(result);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800409a:	bf00      	nop
 800409c:	3754      	adds	r7, #84	@ 0x54
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff ff41 	bl	8003f46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b21      	cmp	r3, #33	@ 0x21
 80040de:	d13e      	bne.n	800415e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e8:	d114      	bne.n	8004114 <UART_Transmit_IT+0x48>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d110      	bne.n	8004114 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004106:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	1c9a      	adds	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	621a      	str	r2, [r3, #32]
 8004112:	e008      	b.n	8004126 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	1c59      	adds	r1, r3, #1
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6211      	str	r1, [r2, #32]
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29b      	uxth	r3, r3
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4619      	mov	r1, r3
 8004134:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004148:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004158:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004180:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fed2 	bl	8003f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b08c      	sub	sp, #48	@ 0x30
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b22      	cmp	r3, #34	@ 0x22
 80041ac:	f040 80ae 	bne.w	800430c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b8:	d117      	bne.n	80041ea <UART_Receive_IT+0x50>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	b29a      	uxth	r2, r3
 80041da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e2:	1c9a      	adds	r2, r3, #2
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80041e8:	e026      	b.n	8004238 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fc:	d007      	beq.n	800420e <UART_Receive_IT+0x74>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <UART_Receive_IT+0x82>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e008      	b.n	800422e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004228:	b2da      	uxtb	r2, r3
 800422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29b      	uxth	r3, r3
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4619      	mov	r1, r3
 8004246:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004248:	2b00      	cmp	r3, #0
 800424a:	d15d      	bne.n	8004308 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0220 	bic.w	r2, r2, #32
 800425a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800426a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	2b01      	cmp	r3, #1
 8004290:	d135      	bne.n	80042fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	613b      	str	r3, [r7, #16]
   return(result);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f023 0310 	bic.w	r3, r3, #16
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b8:	623a      	str	r2, [r7, #32]
 80042ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	69f9      	ldr	r1, [r7, #28]
 80042be:	6a3a      	ldr	r2, [r7, #32]
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e5      	bne.n	8004298 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d10a      	bne.n	80042f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fe2e 	bl	8003f58 <HAL_UARTEx_RxEventCallback>
 80042fc:	e002      	b.n	8004304 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fc fc56 	bl	8000bb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e002      	b.n	800430e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3730      	adds	r7, #48	@ 0x30
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004352:	f023 030c 	bic.w	r3, r3, #12
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	430b      	orrs	r3, r1
 800435e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a2c      	ldr	r2, [pc, #176]	@ (800442c <UART_SetConfig+0x114>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d103      	bne.n	8004388 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004380:	f7ff fa9e 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	e002      	b.n	800438e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004388:	f7ff fa86 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 800438c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009a      	lsls	r2, r3, #2
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <UART_SetConfig+0x118>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	0119      	lsls	r1, r3, #4
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009a      	lsls	r2, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <UART_SetConfig+0x118>)
 80043c6:	fba3 0302 	umull	r0, r3, r3, r2
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2064      	movs	r0, #100	@ 0x64
 80043ce:	fb00 f303 	mul.w	r3, r0, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	3332      	adds	r3, #50	@ 0x32
 80043d8:	4a15      	ldr	r2, [pc, #84]	@ (8004430 <UART_SetConfig+0x118>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e4:	4419      	add	r1, r3
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009a      	lsls	r2, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <UART_SetConfig+0x118>)
 80043fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2064      	movs	r0, #100	@ 0x64
 8004406:	fb00 f303 	mul.w	r3, r0, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	3332      	adds	r3, #50	@ 0x32
 8004410:	4a07      	ldr	r2, [pc, #28]	@ (8004430 <UART_SetConfig+0x118>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	f003 020f 	and.w	r2, r3, #15
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	440a      	add	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40013800 	.word	0x40013800
 8004430:	51eb851f 	.word	0x51eb851f

08004434 <atoi>:
 8004434:	220a      	movs	r2, #10
 8004436:	2100      	movs	r1, #0
 8004438:	f000 b87a 	b.w	8004530 <strtol>

0800443c <_strtol_l.constprop.0>:
 800443c:	2b24      	cmp	r3, #36	@ 0x24
 800443e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004442:	4686      	mov	lr, r0
 8004444:	4690      	mov	r8, r2
 8004446:	d801      	bhi.n	800444c <_strtol_l.constprop.0+0x10>
 8004448:	2b01      	cmp	r3, #1
 800444a:	d106      	bne.n	800445a <_strtol_l.constprop.0+0x1e>
 800444c:	f000 f8b4 	bl	80045b8 <__errno>
 8004450:	2316      	movs	r3, #22
 8004452:	6003      	str	r3, [r0, #0]
 8004454:	2000      	movs	r0, #0
 8004456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445a:	460d      	mov	r5, r1
 800445c:	4833      	ldr	r0, [pc, #204]	@ (800452c <_strtol_l.constprop.0+0xf0>)
 800445e:	462a      	mov	r2, r5
 8004460:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004464:	5d06      	ldrb	r6, [r0, r4]
 8004466:	f016 0608 	ands.w	r6, r6, #8
 800446a:	d1f8      	bne.n	800445e <_strtol_l.constprop.0+0x22>
 800446c:	2c2d      	cmp	r4, #45	@ 0x2d
 800446e:	d12d      	bne.n	80044cc <_strtol_l.constprop.0+0x90>
 8004470:	2601      	movs	r6, #1
 8004472:	782c      	ldrb	r4, [r5, #0]
 8004474:	1c95      	adds	r5, r2, #2
 8004476:	f033 0210 	bics.w	r2, r3, #16
 800447a:	d109      	bne.n	8004490 <_strtol_l.constprop.0+0x54>
 800447c:	2c30      	cmp	r4, #48	@ 0x30
 800447e:	d12a      	bne.n	80044d6 <_strtol_l.constprop.0+0x9a>
 8004480:	782a      	ldrb	r2, [r5, #0]
 8004482:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004486:	2a58      	cmp	r2, #88	@ 0x58
 8004488:	d125      	bne.n	80044d6 <_strtol_l.constprop.0+0x9a>
 800448a:	2310      	movs	r3, #16
 800448c:	786c      	ldrb	r4, [r5, #1]
 800448e:	3502      	adds	r5, #2
 8004490:	2200      	movs	r2, #0
 8004492:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004496:	f10c 3cff 	add.w	ip, ip, #4294967295
 800449a:	fbbc f9f3 	udiv	r9, ip, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80044a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80044a8:	2f09      	cmp	r7, #9
 80044aa:	d81b      	bhi.n	80044e4 <_strtol_l.constprop.0+0xa8>
 80044ac:	463c      	mov	r4, r7
 80044ae:	42a3      	cmp	r3, r4
 80044b0:	dd27      	ble.n	8004502 <_strtol_l.constprop.0+0xc6>
 80044b2:	1c57      	adds	r7, r2, #1
 80044b4:	d007      	beq.n	80044c6 <_strtol_l.constprop.0+0x8a>
 80044b6:	4581      	cmp	r9, r0
 80044b8:	d320      	bcc.n	80044fc <_strtol_l.constprop.0+0xc0>
 80044ba:	d101      	bne.n	80044c0 <_strtol_l.constprop.0+0x84>
 80044bc:	45a2      	cmp	sl, r4
 80044be:	db1d      	blt.n	80044fc <_strtol_l.constprop.0+0xc0>
 80044c0:	2201      	movs	r2, #1
 80044c2:	fb00 4003 	mla	r0, r0, r3, r4
 80044c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044ca:	e7eb      	b.n	80044a4 <_strtol_l.constprop.0+0x68>
 80044cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80044ce:	bf04      	itt	eq
 80044d0:	782c      	ldrbeq	r4, [r5, #0]
 80044d2:	1c95      	addeq	r5, r2, #2
 80044d4:	e7cf      	b.n	8004476 <_strtol_l.constprop.0+0x3a>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1da      	bne.n	8004490 <_strtol_l.constprop.0+0x54>
 80044da:	2c30      	cmp	r4, #48	@ 0x30
 80044dc:	bf0c      	ite	eq
 80044de:	2308      	moveq	r3, #8
 80044e0:	230a      	movne	r3, #10
 80044e2:	e7d5      	b.n	8004490 <_strtol_l.constprop.0+0x54>
 80044e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80044e8:	2f19      	cmp	r7, #25
 80044ea:	d801      	bhi.n	80044f0 <_strtol_l.constprop.0+0xb4>
 80044ec:	3c37      	subs	r4, #55	@ 0x37
 80044ee:	e7de      	b.n	80044ae <_strtol_l.constprop.0+0x72>
 80044f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80044f4:	2f19      	cmp	r7, #25
 80044f6:	d804      	bhi.n	8004502 <_strtol_l.constprop.0+0xc6>
 80044f8:	3c57      	subs	r4, #87	@ 0x57
 80044fa:	e7d8      	b.n	80044ae <_strtol_l.constprop.0+0x72>
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	e7e1      	b.n	80044c6 <_strtol_l.constprop.0+0x8a>
 8004502:	1c53      	adds	r3, r2, #1
 8004504:	d108      	bne.n	8004518 <_strtol_l.constprop.0+0xdc>
 8004506:	2322      	movs	r3, #34	@ 0x22
 8004508:	4660      	mov	r0, ip
 800450a:	f8ce 3000 	str.w	r3, [lr]
 800450e:	f1b8 0f00 	cmp.w	r8, #0
 8004512:	d0a0      	beq.n	8004456 <_strtol_l.constprop.0+0x1a>
 8004514:	1e69      	subs	r1, r5, #1
 8004516:	e006      	b.n	8004526 <_strtol_l.constprop.0+0xea>
 8004518:	b106      	cbz	r6, 800451c <_strtol_l.constprop.0+0xe0>
 800451a:	4240      	negs	r0, r0
 800451c:	f1b8 0f00 	cmp.w	r8, #0
 8004520:	d099      	beq.n	8004456 <_strtol_l.constprop.0+0x1a>
 8004522:	2a00      	cmp	r2, #0
 8004524:	d1f6      	bne.n	8004514 <_strtol_l.constprop.0+0xd8>
 8004526:	f8c8 1000 	str.w	r1, [r8]
 800452a:	e794      	b.n	8004456 <_strtol_l.constprop.0+0x1a>
 800452c:	08005003 	.word	0x08005003

08004530 <strtol>:
 8004530:	4613      	mov	r3, r2
 8004532:	460a      	mov	r2, r1
 8004534:	4601      	mov	r1, r0
 8004536:	4802      	ldr	r0, [pc, #8]	@ (8004540 <strtol+0x10>)
 8004538:	6800      	ldr	r0, [r0, #0]
 800453a:	f7ff bf7f 	b.w	800443c <_strtol_l.constprop.0>
 800453e:	bf00      	nop
 8004540:	20000014 	.word	0x20000014

08004544 <_vsiprintf_r>:
 8004544:	b500      	push	{lr}
 8004546:	b09b      	sub	sp, #108	@ 0x6c
 8004548:	9100      	str	r1, [sp, #0]
 800454a:	9104      	str	r1, [sp, #16]
 800454c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004550:	9105      	str	r1, [sp, #20]
 8004552:	9102      	str	r1, [sp, #8]
 8004554:	4905      	ldr	r1, [pc, #20]	@ (800456c <_vsiprintf_r+0x28>)
 8004556:	9103      	str	r1, [sp, #12]
 8004558:	4669      	mov	r1, sp
 800455a:	f000 f9ab 	bl	80048b4 <_svfiprintf_r>
 800455e:	2200      	movs	r2, #0
 8004560:	9b00      	ldr	r3, [sp, #0]
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	b01b      	add	sp, #108	@ 0x6c
 8004566:	f85d fb04 	ldr.w	pc, [sp], #4
 800456a:	bf00      	nop
 800456c:	ffff0208 	.word	0xffff0208

08004570 <vsiprintf>:
 8004570:	4613      	mov	r3, r2
 8004572:	460a      	mov	r2, r1
 8004574:	4601      	mov	r1, r0
 8004576:	4802      	ldr	r0, [pc, #8]	@ (8004580 <vsiprintf+0x10>)
 8004578:	6800      	ldr	r0, [r0, #0]
 800457a:	f7ff bfe3 	b.w	8004544 <_vsiprintf_r>
 800457e:	bf00      	nop
 8004580:	20000014 	.word	0x20000014

08004584 <memset>:
 8004584:	4603      	mov	r3, r0
 8004586:	4402      	add	r2, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	f803 1b01 	strb.w	r1, [r3], #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>

08004594 <strncmp>:
 8004594:	b510      	push	{r4, lr}
 8004596:	b16a      	cbz	r2, 80045b4 <strncmp+0x20>
 8004598:	3901      	subs	r1, #1
 800459a:	1884      	adds	r4, r0, r2
 800459c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d103      	bne.n	80045b0 <strncmp+0x1c>
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d001      	beq.n	80045b0 <strncmp+0x1c>
 80045ac:	2a00      	cmp	r2, #0
 80045ae:	d1f5      	bne.n	800459c <strncmp+0x8>
 80045b0:	1ad0      	subs	r0, r2, r3
 80045b2:	bd10      	pop	{r4, pc}
 80045b4:	4610      	mov	r0, r2
 80045b6:	e7fc      	b.n	80045b2 <strncmp+0x1e>

080045b8 <__errno>:
 80045b8:	4b01      	ldr	r3, [pc, #4]	@ (80045c0 <__errno+0x8>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000014 	.word	0x20000014

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	2600      	movs	r6, #0
 80045c8:	4d0c      	ldr	r5, [pc, #48]	@ (80045fc <__libc_init_array+0x38>)
 80045ca:	4c0d      	ldr	r4, [pc, #52]	@ (8004600 <__libc_init_array+0x3c>)
 80045cc:	1b64      	subs	r4, r4, r5
 80045ce:	10a4      	asrs	r4, r4, #2
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	f000 fc78 	bl	8004ec8 <_init>
 80045d8:	2600      	movs	r6, #0
 80045da:	4d0a      	ldr	r5, [pc, #40]	@ (8004604 <__libc_init_array+0x40>)
 80045dc:	4c0a      	ldr	r4, [pc, #40]	@ (8004608 <__libc_init_array+0x44>)
 80045de:	1b64      	subs	r4, r4, r5
 80045e0:	10a4      	asrs	r4, r4, #2
 80045e2:	42a6      	cmp	r6, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ec:	4798      	blx	r3
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f6:	4798      	blx	r3
 80045f8:	3601      	adds	r6, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	08005140 	.word	0x08005140
 8004600:	08005140 	.word	0x08005140
 8004604:	08005140 	.word	0x08005140
 8004608:	08005144 	.word	0x08005144

0800460c <__retarget_lock_acquire_recursive>:
 800460c:	4770      	bx	lr

0800460e <__retarget_lock_release_recursive>:
 800460e:	4770      	bx	lr

08004610 <_free_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4605      	mov	r5, r0
 8004614:	2900      	cmp	r1, #0
 8004616:	d040      	beq.n	800469a <_free_r+0x8a>
 8004618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461c:	1f0c      	subs	r4, r1, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	bfb8      	it	lt
 8004622:	18e4      	addlt	r4, r4, r3
 8004624:	f000 f8de 	bl	80047e4 <__malloc_lock>
 8004628:	4a1c      	ldr	r2, [pc, #112]	@ (800469c <_free_r+0x8c>)
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	b933      	cbnz	r3, 800463c <_free_r+0x2c>
 800462e:	6063      	str	r3, [r4, #4]
 8004630:	6014      	str	r4, [r2, #0]
 8004632:	4628      	mov	r0, r5
 8004634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004638:	f000 b8da 	b.w	80047f0 <__malloc_unlock>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d908      	bls.n	8004652 <_free_r+0x42>
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	1821      	adds	r1, r4, r0
 8004644:	428b      	cmp	r3, r1
 8004646:	bf01      	itttt	eq
 8004648:	6819      	ldreq	r1, [r3, #0]
 800464a:	685b      	ldreq	r3, [r3, #4]
 800464c:	1809      	addeq	r1, r1, r0
 800464e:	6021      	streq	r1, [r4, #0]
 8004650:	e7ed      	b.n	800462e <_free_r+0x1e>
 8004652:	461a      	mov	r2, r3
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	b10b      	cbz	r3, 800465c <_free_r+0x4c>
 8004658:	42a3      	cmp	r3, r4
 800465a:	d9fa      	bls.n	8004652 <_free_r+0x42>
 800465c:	6811      	ldr	r1, [r2, #0]
 800465e:	1850      	adds	r0, r2, r1
 8004660:	42a0      	cmp	r0, r4
 8004662:	d10b      	bne.n	800467c <_free_r+0x6c>
 8004664:	6820      	ldr	r0, [r4, #0]
 8004666:	4401      	add	r1, r0
 8004668:	1850      	adds	r0, r2, r1
 800466a:	4283      	cmp	r3, r0
 800466c:	6011      	str	r1, [r2, #0]
 800466e:	d1e0      	bne.n	8004632 <_free_r+0x22>
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4408      	add	r0, r1
 8004676:	6010      	str	r0, [r2, #0]
 8004678:	6053      	str	r3, [r2, #4]
 800467a:	e7da      	b.n	8004632 <_free_r+0x22>
 800467c:	d902      	bls.n	8004684 <_free_r+0x74>
 800467e:	230c      	movs	r3, #12
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	e7d6      	b.n	8004632 <_free_r+0x22>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	1821      	adds	r1, r4, r0
 8004688:	428b      	cmp	r3, r1
 800468a:	bf01      	itttt	eq
 800468c:	6819      	ldreq	r1, [r3, #0]
 800468e:	685b      	ldreq	r3, [r3, #4]
 8004690:	1809      	addeq	r1, r1, r0
 8004692:	6021      	streq	r1, [r4, #0]
 8004694:	6063      	str	r3, [r4, #4]
 8004696:	6054      	str	r4, [r2, #4]
 8004698:	e7cb      	b.n	8004632 <_free_r+0x22>
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	200003a0 	.word	0x200003a0

080046a0 <sbrk_aligned>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	4e0f      	ldr	r6, [pc, #60]	@ (80046e0 <sbrk_aligned+0x40>)
 80046a4:	460c      	mov	r4, r1
 80046a6:	6831      	ldr	r1, [r6, #0]
 80046a8:	4605      	mov	r5, r0
 80046aa:	b911      	cbnz	r1, 80046b2 <sbrk_aligned+0x12>
 80046ac:	f000 fbaa 	bl	8004e04 <_sbrk_r>
 80046b0:	6030      	str	r0, [r6, #0]
 80046b2:	4621      	mov	r1, r4
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 fba5 	bl	8004e04 <_sbrk_r>
 80046ba:	1c43      	adds	r3, r0, #1
 80046bc:	d103      	bne.n	80046c6 <sbrk_aligned+0x26>
 80046be:	f04f 34ff 	mov.w	r4, #4294967295
 80046c2:	4620      	mov	r0, r4
 80046c4:	bd70      	pop	{r4, r5, r6, pc}
 80046c6:	1cc4      	adds	r4, r0, #3
 80046c8:	f024 0403 	bic.w	r4, r4, #3
 80046cc:	42a0      	cmp	r0, r4
 80046ce:	d0f8      	beq.n	80046c2 <sbrk_aligned+0x22>
 80046d0:	1a21      	subs	r1, r4, r0
 80046d2:	4628      	mov	r0, r5
 80046d4:	f000 fb96 	bl	8004e04 <_sbrk_r>
 80046d8:	3001      	adds	r0, #1
 80046da:	d1f2      	bne.n	80046c2 <sbrk_aligned+0x22>
 80046dc:	e7ef      	b.n	80046be <sbrk_aligned+0x1e>
 80046de:	bf00      	nop
 80046e0:	2000039c 	.word	0x2000039c

080046e4 <_malloc_r>:
 80046e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046e8:	1ccd      	adds	r5, r1, #3
 80046ea:	f025 0503 	bic.w	r5, r5, #3
 80046ee:	3508      	adds	r5, #8
 80046f0:	2d0c      	cmp	r5, #12
 80046f2:	bf38      	it	cc
 80046f4:	250c      	movcc	r5, #12
 80046f6:	2d00      	cmp	r5, #0
 80046f8:	4606      	mov	r6, r0
 80046fa:	db01      	blt.n	8004700 <_malloc_r+0x1c>
 80046fc:	42a9      	cmp	r1, r5
 80046fe:	d904      	bls.n	800470a <_malloc_r+0x26>
 8004700:	230c      	movs	r3, #12
 8004702:	6033      	str	r3, [r6, #0]
 8004704:	2000      	movs	r0, #0
 8004706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800470a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047e0 <_malloc_r+0xfc>
 800470e:	f000 f869 	bl	80047e4 <__malloc_lock>
 8004712:	f8d8 3000 	ldr.w	r3, [r8]
 8004716:	461c      	mov	r4, r3
 8004718:	bb44      	cbnz	r4, 800476c <_malloc_r+0x88>
 800471a:	4629      	mov	r1, r5
 800471c:	4630      	mov	r0, r6
 800471e:	f7ff ffbf 	bl	80046a0 <sbrk_aligned>
 8004722:	1c43      	adds	r3, r0, #1
 8004724:	4604      	mov	r4, r0
 8004726:	d158      	bne.n	80047da <_malloc_r+0xf6>
 8004728:	f8d8 4000 	ldr.w	r4, [r8]
 800472c:	4627      	mov	r7, r4
 800472e:	2f00      	cmp	r7, #0
 8004730:	d143      	bne.n	80047ba <_malloc_r+0xd6>
 8004732:	2c00      	cmp	r4, #0
 8004734:	d04b      	beq.n	80047ce <_malloc_r+0xea>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	4639      	mov	r1, r7
 800473a:	4630      	mov	r0, r6
 800473c:	eb04 0903 	add.w	r9, r4, r3
 8004740:	f000 fb60 	bl	8004e04 <_sbrk_r>
 8004744:	4581      	cmp	r9, r0
 8004746:	d142      	bne.n	80047ce <_malloc_r+0xea>
 8004748:	6821      	ldr	r1, [r4, #0]
 800474a:	4630      	mov	r0, r6
 800474c:	1a6d      	subs	r5, r5, r1
 800474e:	4629      	mov	r1, r5
 8004750:	f7ff ffa6 	bl	80046a0 <sbrk_aligned>
 8004754:	3001      	adds	r0, #1
 8004756:	d03a      	beq.n	80047ce <_malloc_r+0xea>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	442b      	add	r3, r5
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	f8d8 3000 	ldr.w	r3, [r8]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	bb62      	cbnz	r2, 80047c0 <_malloc_r+0xdc>
 8004766:	f8c8 7000 	str.w	r7, [r8]
 800476a:	e00f      	b.n	800478c <_malloc_r+0xa8>
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	1b52      	subs	r2, r2, r5
 8004770:	d420      	bmi.n	80047b4 <_malloc_r+0xd0>
 8004772:	2a0b      	cmp	r2, #11
 8004774:	d917      	bls.n	80047a6 <_malloc_r+0xc2>
 8004776:	1961      	adds	r1, r4, r5
 8004778:	42a3      	cmp	r3, r4
 800477a:	6025      	str	r5, [r4, #0]
 800477c:	bf18      	it	ne
 800477e:	6059      	strne	r1, [r3, #4]
 8004780:	6863      	ldr	r3, [r4, #4]
 8004782:	bf08      	it	eq
 8004784:	f8c8 1000 	streq.w	r1, [r8]
 8004788:	5162      	str	r2, [r4, r5]
 800478a:	604b      	str	r3, [r1, #4]
 800478c:	4630      	mov	r0, r6
 800478e:	f000 f82f 	bl	80047f0 <__malloc_unlock>
 8004792:	f104 000b 	add.w	r0, r4, #11
 8004796:	1d23      	adds	r3, r4, #4
 8004798:	f020 0007 	bic.w	r0, r0, #7
 800479c:	1ac2      	subs	r2, r0, r3
 800479e:	bf1c      	itt	ne
 80047a0:	1a1b      	subne	r3, r3, r0
 80047a2:	50a3      	strne	r3, [r4, r2]
 80047a4:	e7af      	b.n	8004706 <_malloc_r+0x22>
 80047a6:	6862      	ldr	r2, [r4, #4]
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	bf0c      	ite	eq
 80047ac:	f8c8 2000 	streq.w	r2, [r8]
 80047b0:	605a      	strne	r2, [r3, #4]
 80047b2:	e7eb      	b.n	800478c <_malloc_r+0xa8>
 80047b4:	4623      	mov	r3, r4
 80047b6:	6864      	ldr	r4, [r4, #4]
 80047b8:	e7ae      	b.n	8004718 <_malloc_r+0x34>
 80047ba:	463c      	mov	r4, r7
 80047bc:	687f      	ldr	r7, [r7, #4]
 80047be:	e7b6      	b.n	800472e <_malloc_r+0x4a>
 80047c0:	461a      	mov	r2, r3
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	d1fb      	bne.n	80047c0 <_malloc_r+0xdc>
 80047c8:	2300      	movs	r3, #0
 80047ca:	6053      	str	r3, [r2, #4]
 80047cc:	e7de      	b.n	800478c <_malloc_r+0xa8>
 80047ce:	230c      	movs	r3, #12
 80047d0:	4630      	mov	r0, r6
 80047d2:	6033      	str	r3, [r6, #0]
 80047d4:	f000 f80c 	bl	80047f0 <__malloc_unlock>
 80047d8:	e794      	b.n	8004704 <_malloc_r+0x20>
 80047da:	6005      	str	r5, [r0, #0]
 80047dc:	e7d6      	b.n	800478c <_malloc_r+0xa8>
 80047de:	bf00      	nop
 80047e0:	200003a0 	.word	0x200003a0

080047e4 <__malloc_lock>:
 80047e4:	4801      	ldr	r0, [pc, #4]	@ (80047ec <__malloc_lock+0x8>)
 80047e6:	f7ff bf11 	b.w	800460c <__retarget_lock_acquire_recursive>
 80047ea:	bf00      	nop
 80047ec:	20000398 	.word	0x20000398

080047f0 <__malloc_unlock>:
 80047f0:	4801      	ldr	r0, [pc, #4]	@ (80047f8 <__malloc_unlock+0x8>)
 80047f2:	f7ff bf0c 	b.w	800460e <__retarget_lock_release_recursive>
 80047f6:	bf00      	nop
 80047f8:	20000398 	.word	0x20000398

080047fc <__ssputs_r>:
 80047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	461f      	mov	r7, r3
 8004802:	688e      	ldr	r6, [r1, #8]
 8004804:	4682      	mov	sl, r0
 8004806:	42be      	cmp	r6, r7
 8004808:	460c      	mov	r4, r1
 800480a:	4690      	mov	r8, r2
 800480c:	680b      	ldr	r3, [r1, #0]
 800480e:	d82d      	bhi.n	800486c <__ssputs_r+0x70>
 8004810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004814:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004818:	d026      	beq.n	8004868 <__ssputs_r+0x6c>
 800481a:	6965      	ldr	r5, [r4, #20]
 800481c:	6909      	ldr	r1, [r1, #16]
 800481e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004822:	eba3 0901 	sub.w	r9, r3, r1
 8004826:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800482a:	1c7b      	adds	r3, r7, #1
 800482c:	444b      	add	r3, r9
 800482e:	106d      	asrs	r5, r5, #1
 8004830:	429d      	cmp	r5, r3
 8004832:	bf38      	it	cc
 8004834:	461d      	movcc	r5, r3
 8004836:	0553      	lsls	r3, r2, #21
 8004838:	d527      	bpl.n	800488a <__ssputs_r+0x8e>
 800483a:	4629      	mov	r1, r5
 800483c:	f7ff ff52 	bl	80046e4 <_malloc_r>
 8004840:	4606      	mov	r6, r0
 8004842:	b360      	cbz	r0, 800489e <__ssputs_r+0xa2>
 8004844:	464a      	mov	r2, r9
 8004846:	6921      	ldr	r1, [r4, #16]
 8004848:	f000 fafa 	bl	8004e40 <memcpy>
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004856:	81a3      	strh	r3, [r4, #12]
 8004858:	6126      	str	r6, [r4, #16]
 800485a:	444e      	add	r6, r9
 800485c:	6026      	str	r6, [r4, #0]
 800485e:	463e      	mov	r6, r7
 8004860:	6165      	str	r5, [r4, #20]
 8004862:	eba5 0509 	sub.w	r5, r5, r9
 8004866:	60a5      	str	r5, [r4, #8]
 8004868:	42be      	cmp	r6, r7
 800486a:	d900      	bls.n	800486e <__ssputs_r+0x72>
 800486c:	463e      	mov	r6, r7
 800486e:	4632      	mov	r2, r6
 8004870:	4641      	mov	r1, r8
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	f000 faac 	bl	8004dd0 <memmove>
 8004878:	2000      	movs	r0, #0
 800487a:	68a3      	ldr	r3, [r4, #8]
 800487c:	1b9b      	subs	r3, r3, r6
 800487e:	60a3      	str	r3, [r4, #8]
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	4433      	add	r3, r6
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488a:	462a      	mov	r2, r5
 800488c:	f000 fae6 	bl	8004e5c <_realloc_r>
 8004890:	4606      	mov	r6, r0
 8004892:	2800      	cmp	r0, #0
 8004894:	d1e0      	bne.n	8004858 <__ssputs_r+0x5c>
 8004896:	4650      	mov	r0, sl
 8004898:	6921      	ldr	r1, [r4, #16]
 800489a:	f7ff feb9 	bl	8004610 <_free_r>
 800489e:	230c      	movs	r3, #12
 80048a0:	f8ca 3000 	str.w	r3, [sl]
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	f04f 30ff 	mov.w	r0, #4294967295
 80048aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ae:	81a3      	strh	r3, [r4, #12]
 80048b0:	e7e9      	b.n	8004886 <__ssputs_r+0x8a>
	...

080048b4 <_svfiprintf_r>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	4698      	mov	r8, r3
 80048ba:	898b      	ldrh	r3, [r1, #12]
 80048bc:	4607      	mov	r7, r0
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	460d      	mov	r5, r1
 80048c2:	4614      	mov	r4, r2
 80048c4:	b09d      	sub	sp, #116	@ 0x74
 80048c6:	d510      	bpl.n	80048ea <_svfiprintf_r+0x36>
 80048c8:	690b      	ldr	r3, [r1, #16]
 80048ca:	b973      	cbnz	r3, 80048ea <_svfiprintf_r+0x36>
 80048cc:	2140      	movs	r1, #64	@ 0x40
 80048ce:	f7ff ff09 	bl	80046e4 <_malloc_r>
 80048d2:	6028      	str	r0, [r5, #0]
 80048d4:	6128      	str	r0, [r5, #16]
 80048d6:	b930      	cbnz	r0, 80048e6 <_svfiprintf_r+0x32>
 80048d8:	230c      	movs	r3, #12
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	b01d      	add	sp, #116	@ 0x74
 80048e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	2340      	movs	r3, #64	@ 0x40
 80048e8:	616b      	str	r3, [r5, #20]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ee:	2320      	movs	r3, #32
 80048f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048f4:	2330      	movs	r3, #48	@ 0x30
 80048f6:	f04f 0901 	mov.w	r9, #1
 80048fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80048fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004a98 <_svfiprintf_r+0x1e4>
 8004902:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004906:	4623      	mov	r3, r4
 8004908:	469a      	mov	sl, r3
 800490a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800490e:	b10a      	cbz	r2, 8004914 <_svfiprintf_r+0x60>
 8004910:	2a25      	cmp	r2, #37	@ 0x25
 8004912:	d1f9      	bne.n	8004908 <_svfiprintf_r+0x54>
 8004914:	ebba 0b04 	subs.w	fp, sl, r4
 8004918:	d00b      	beq.n	8004932 <_svfiprintf_r+0x7e>
 800491a:	465b      	mov	r3, fp
 800491c:	4622      	mov	r2, r4
 800491e:	4629      	mov	r1, r5
 8004920:	4638      	mov	r0, r7
 8004922:	f7ff ff6b 	bl	80047fc <__ssputs_r>
 8004926:	3001      	adds	r0, #1
 8004928:	f000 80a7 	beq.w	8004a7a <_svfiprintf_r+0x1c6>
 800492c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800492e:	445a      	add	r2, fp
 8004930:	9209      	str	r2, [sp, #36]	@ 0x24
 8004932:	f89a 3000 	ldrb.w	r3, [sl]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 809f 	beq.w	8004a7a <_svfiprintf_r+0x1c6>
 800493c:	2300      	movs	r3, #0
 800493e:	f04f 32ff 	mov.w	r2, #4294967295
 8004942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004946:	f10a 0a01 	add.w	sl, sl, #1
 800494a:	9304      	str	r3, [sp, #16]
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004952:	931a      	str	r3, [sp, #104]	@ 0x68
 8004954:	4654      	mov	r4, sl
 8004956:	2205      	movs	r2, #5
 8004958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495c:	484e      	ldr	r0, [pc, #312]	@ (8004a98 <_svfiprintf_r+0x1e4>)
 800495e:	f000 fa61 	bl	8004e24 <memchr>
 8004962:	9a04      	ldr	r2, [sp, #16]
 8004964:	b9d8      	cbnz	r0, 800499e <_svfiprintf_r+0xea>
 8004966:	06d0      	lsls	r0, r2, #27
 8004968:	bf44      	itt	mi
 800496a:	2320      	movmi	r3, #32
 800496c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004970:	0711      	lsls	r1, r2, #28
 8004972:	bf44      	itt	mi
 8004974:	232b      	movmi	r3, #43	@ 0x2b
 8004976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800497a:	f89a 3000 	ldrb.w	r3, [sl]
 800497e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004980:	d015      	beq.n	80049ae <_svfiprintf_r+0xfa>
 8004982:	4654      	mov	r4, sl
 8004984:	2000      	movs	r0, #0
 8004986:	f04f 0c0a 	mov.w	ip, #10
 800498a:	9a07      	ldr	r2, [sp, #28]
 800498c:	4621      	mov	r1, r4
 800498e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004992:	3b30      	subs	r3, #48	@ 0x30
 8004994:	2b09      	cmp	r3, #9
 8004996:	d94b      	bls.n	8004a30 <_svfiprintf_r+0x17c>
 8004998:	b1b0      	cbz	r0, 80049c8 <_svfiprintf_r+0x114>
 800499a:	9207      	str	r2, [sp, #28]
 800499c:	e014      	b.n	80049c8 <_svfiprintf_r+0x114>
 800499e:	eba0 0308 	sub.w	r3, r0, r8
 80049a2:	fa09 f303 	lsl.w	r3, r9, r3
 80049a6:	4313      	orrs	r3, r2
 80049a8:	46a2      	mov	sl, r4
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	e7d2      	b.n	8004954 <_svfiprintf_r+0xa0>
 80049ae:	9b03      	ldr	r3, [sp, #12]
 80049b0:	1d19      	adds	r1, r3, #4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	9103      	str	r1, [sp, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bfbb      	ittet	lt
 80049ba:	425b      	neglt	r3, r3
 80049bc:	f042 0202 	orrlt.w	r2, r2, #2
 80049c0:	9307      	strge	r3, [sp, #28]
 80049c2:	9307      	strlt	r3, [sp, #28]
 80049c4:	bfb8      	it	lt
 80049c6:	9204      	strlt	r2, [sp, #16]
 80049c8:	7823      	ldrb	r3, [r4, #0]
 80049ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80049cc:	d10a      	bne.n	80049e4 <_svfiprintf_r+0x130>
 80049ce:	7863      	ldrb	r3, [r4, #1]
 80049d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d2:	d132      	bne.n	8004a3a <_svfiprintf_r+0x186>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	3402      	adds	r4, #2
 80049d8:	1d1a      	adds	r2, r3, #4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	9203      	str	r2, [sp, #12]
 80049de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049e2:	9305      	str	r3, [sp, #20]
 80049e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004a9c <_svfiprintf_r+0x1e8>
 80049e8:	2203      	movs	r2, #3
 80049ea:	4650      	mov	r0, sl
 80049ec:	7821      	ldrb	r1, [r4, #0]
 80049ee:	f000 fa19 	bl	8004e24 <memchr>
 80049f2:	b138      	cbz	r0, 8004a04 <_svfiprintf_r+0x150>
 80049f4:	2240      	movs	r2, #64	@ 0x40
 80049f6:	9b04      	ldr	r3, [sp, #16]
 80049f8:	eba0 000a 	sub.w	r0, r0, sl
 80049fc:	4082      	lsls	r2, r0
 80049fe:	4313      	orrs	r3, r2
 8004a00:	3401      	adds	r4, #1
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a08:	2206      	movs	r2, #6
 8004a0a:	4825      	ldr	r0, [pc, #148]	@ (8004aa0 <_svfiprintf_r+0x1ec>)
 8004a0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a10:	f000 fa08 	bl	8004e24 <memchr>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d036      	beq.n	8004a86 <_svfiprintf_r+0x1d2>
 8004a18:	4b22      	ldr	r3, [pc, #136]	@ (8004aa4 <_svfiprintf_r+0x1f0>)
 8004a1a:	bb1b      	cbnz	r3, 8004a64 <_svfiprintf_r+0x1b0>
 8004a1c:	9b03      	ldr	r3, [sp, #12]
 8004a1e:	3307      	adds	r3, #7
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	3308      	adds	r3, #8
 8004a26:	9303      	str	r3, [sp, #12]
 8004a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a2a:	4433      	add	r3, r6
 8004a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a2e:	e76a      	b.n	8004906 <_svfiprintf_r+0x52>
 8004a30:	460c      	mov	r4, r1
 8004a32:	2001      	movs	r0, #1
 8004a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a38:	e7a8      	b.n	800498c <_svfiprintf_r+0xd8>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f04f 0c0a 	mov.w	ip, #10
 8004a40:	4619      	mov	r1, r3
 8004a42:	3401      	adds	r4, #1
 8004a44:	9305      	str	r3, [sp, #20]
 8004a46:	4620      	mov	r0, r4
 8004a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4c:	3a30      	subs	r2, #48	@ 0x30
 8004a4e:	2a09      	cmp	r2, #9
 8004a50:	d903      	bls.n	8004a5a <_svfiprintf_r+0x1a6>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0c6      	beq.n	80049e4 <_svfiprintf_r+0x130>
 8004a56:	9105      	str	r1, [sp, #20]
 8004a58:	e7c4      	b.n	80049e4 <_svfiprintf_r+0x130>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a62:	e7f0      	b.n	8004a46 <_svfiprintf_r+0x192>
 8004a64:	ab03      	add	r3, sp, #12
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	462a      	mov	r2, r5
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <_svfiprintf_r+0x1f4>)
 8004a6e:	a904      	add	r1, sp, #16
 8004a70:	f3af 8000 	nop.w
 8004a74:	1c42      	adds	r2, r0, #1
 8004a76:	4606      	mov	r6, r0
 8004a78:	d1d6      	bne.n	8004a28 <_svfiprintf_r+0x174>
 8004a7a:	89ab      	ldrh	r3, [r5, #12]
 8004a7c:	065b      	lsls	r3, r3, #25
 8004a7e:	f53f af2d 	bmi.w	80048dc <_svfiprintf_r+0x28>
 8004a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a84:	e72c      	b.n	80048e0 <_svfiprintf_r+0x2c>
 8004a86:	ab03      	add	r3, sp, #12
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <_svfiprintf_r+0x1f4>)
 8004a90:	a904      	add	r1, sp, #16
 8004a92:	f000 f87d 	bl	8004b90 <_printf_i>
 8004a96:	e7ed      	b.n	8004a74 <_svfiprintf_r+0x1c0>
 8004a98:	08005103 	.word	0x08005103
 8004a9c:	08005109 	.word	0x08005109
 8004aa0:	0800510d 	.word	0x0800510d
 8004aa4:	00000000 	.word	0x00000000
 8004aa8:	080047fd 	.word	0x080047fd

08004aac <_printf_common>:
 8004aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab0:	4616      	mov	r6, r2
 8004ab2:	4698      	mov	r8, r3
 8004ab4:	688a      	ldr	r2, [r1, #8]
 8004ab6:	690b      	ldr	r3, [r1, #16]
 8004ab8:	4607      	mov	r7, r0
 8004aba:	4293      	cmp	r3, r2
 8004abc:	bfb8      	it	lt
 8004abe:	4613      	movlt	r3, r2
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004acc:	b10a      	cbz	r2, 8004ad2 <_printf_common+0x26>
 8004ace:	3301      	adds	r3, #1
 8004ad0:	6033      	str	r3, [r6, #0]
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	0699      	lsls	r1, r3, #26
 8004ad6:	bf42      	ittt	mi
 8004ad8:	6833      	ldrmi	r3, [r6, #0]
 8004ada:	3302      	addmi	r3, #2
 8004adc:	6033      	strmi	r3, [r6, #0]
 8004ade:	6825      	ldr	r5, [r4, #0]
 8004ae0:	f015 0506 	ands.w	r5, r5, #6
 8004ae4:	d106      	bne.n	8004af4 <_printf_common+0x48>
 8004ae6:	f104 0a19 	add.w	sl, r4, #25
 8004aea:	68e3      	ldr	r3, [r4, #12]
 8004aec:	6832      	ldr	r2, [r6, #0]
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	42ab      	cmp	r3, r5
 8004af2:	dc2b      	bgt.n	8004b4c <_printf_common+0xa0>
 8004af4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	3b00      	subs	r3, #0
 8004afc:	bf18      	it	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	0692      	lsls	r2, r2, #26
 8004b02:	d430      	bmi.n	8004b66 <_printf_common+0xba>
 8004b04:	4641      	mov	r1, r8
 8004b06:	4638      	mov	r0, r7
 8004b08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b0c:	47c8      	blx	r9
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d023      	beq.n	8004b5a <_printf_common+0xae>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	6922      	ldr	r2, [r4, #16]
 8004b16:	f003 0306 	and.w	r3, r3, #6
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	bf14      	ite	ne
 8004b1e:	2500      	movne	r5, #0
 8004b20:	6833      	ldreq	r3, [r6, #0]
 8004b22:	f04f 0600 	mov.w	r6, #0
 8004b26:	bf08      	it	eq
 8004b28:	68e5      	ldreq	r5, [r4, #12]
 8004b2a:	f104 041a 	add.w	r4, r4, #26
 8004b2e:	bf08      	it	eq
 8004b30:	1aed      	subeq	r5, r5, r3
 8004b32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b36:	bf08      	it	eq
 8004b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bfc4      	itt	gt
 8004b40:	1a9b      	subgt	r3, r3, r2
 8004b42:	18ed      	addgt	r5, r5, r3
 8004b44:	42b5      	cmp	r5, r6
 8004b46:	d11a      	bne.n	8004b7e <_printf_common+0xd2>
 8004b48:	2000      	movs	r0, #0
 8004b4a:	e008      	b.n	8004b5e <_printf_common+0xb2>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4652      	mov	r2, sl
 8004b50:	4641      	mov	r1, r8
 8004b52:	4638      	mov	r0, r7
 8004b54:	47c8      	blx	r9
 8004b56:	3001      	adds	r0, #1
 8004b58:	d103      	bne.n	8004b62 <_printf_common+0xb6>
 8004b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b62:	3501      	adds	r5, #1
 8004b64:	e7c1      	b.n	8004aea <_printf_common+0x3e>
 8004b66:	2030      	movs	r0, #48	@ 0x30
 8004b68:	18e1      	adds	r1, r4, r3
 8004b6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b74:	4422      	add	r2, r4
 8004b76:	3302      	adds	r3, #2
 8004b78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b7c:	e7c2      	b.n	8004b04 <_printf_common+0x58>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4622      	mov	r2, r4
 8004b82:	4641      	mov	r1, r8
 8004b84:	4638      	mov	r0, r7
 8004b86:	47c8      	blx	r9
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d0e6      	beq.n	8004b5a <_printf_common+0xae>
 8004b8c:	3601      	adds	r6, #1
 8004b8e:	e7d9      	b.n	8004b44 <_printf_common+0x98>

08004b90 <_printf_i>:
 8004b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	7e0f      	ldrb	r7, [r1, #24]
 8004b96:	4691      	mov	r9, r2
 8004b98:	2f78      	cmp	r7, #120	@ 0x78
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	469a      	mov	sl, r3
 8004ba0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ba2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ba6:	d807      	bhi.n	8004bb8 <_printf_i+0x28>
 8004ba8:	2f62      	cmp	r7, #98	@ 0x62
 8004baa:	d80a      	bhi.n	8004bc2 <_printf_i+0x32>
 8004bac:	2f00      	cmp	r7, #0
 8004bae:	f000 80d3 	beq.w	8004d58 <_printf_i+0x1c8>
 8004bb2:	2f58      	cmp	r7, #88	@ 0x58
 8004bb4:	f000 80ba 	beq.w	8004d2c <_printf_i+0x19c>
 8004bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bc0:	e03a      	b.n	8004c38 <_printf_i+0xa8>
 8004bc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bc6:	2b15      	cmp	r3, #21
 8004bc8:	d8f6      	bhi.n	8004bb8 <_printf_i+0x28>
 8004bca:	a101      	add	r1, pc, #4	@ (adr r1, 8004bd0 <_printf_i+0x40>)
 8004bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bd0:	08004c29 	.word	0x08004c29
 8004bd4:	08004c3d 	.word	0x08004c3d
 8004bd8:	08004bb9 	.word	0x08004bb9
 8004bdc:	08004bb9 	.word	0x08004bb9
 8004be0:	08004bb9 	.word	0x08004bb9
 8004be4:	08004bb9 	.word	0x08004bb9
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004bb9 	.word	0x08004bb9
 8004bf0:	08004bb9 	.word	0x08004bb9
 8004bf4:	08004bb9 	.word	0x08004bb9
 8004bf8:	08004bb9 	.word	0x08004bb9
 8004bfc:	08004d3f 	.word	0x08004d3f
 8004c00:	08004c67 	.word	0x08004c67
 8004c04:	08004cf9 	.word	0x08004cf9
 8004c08:	08004bb9 	.word	0x08004bb9
 8004c0c:	08004bb9 	.word	0x08004bb9
 8004c10:	08004d61 	.word	0x08004d61
 8004c14:	08004bb9 	.word	0x08004bb9
 8004c18:	08004c67 	.word	0x08004c67
 8004c1c:	08004bb9 	.word	0x08004bb9
 8004c20:	08004bb9 	.word	0x08004bb9
 8004c24:	08004d01 	.word	0x08004d01
 8004c28:	6833      	ldr	r3, [r6, #0]
 8004c2a:	1d1a      	adds	r2, r3, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6032      	str	r2, [r6, #0]
 8004c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e09e      	b.n	8004d7a <_printf_i+0x1ea>
 8004c3c:	6833      	ldr	r3, [r6, #0]
 8004c3e:	6820      	ldr	r0, [r4, #0]
 8004c40:	1d19      	adds	r1, r3, #4
 8004c42:	6031      	str	r1, [r6, #0]
 8004c44:	0606      	lsls	r6, r0, #24
 8004c46:	d501      	bpl.n	8004c4c <_printf_i+0xbc>
 8004c48:	681d      	ldr	r5, [r3, #0]
 8004c4a:	e003      	b.n	8004c54 <_printf_i+0xc4>
 8004c4c:	0645      	lsls	r5, r0, #25
 8004c4e:	d5fb      	bpl.n	8004c48 <_printf_i+0xb8>
 8004c50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	da03      	bge.n	8004c60 <_printf_i+0xd0>
 8004c58:	232d      	movs	r3, #45	@ 0x2d
 8004c5a:	426d      	negs	r5, r5
 8004c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c60:	230a      	movs	r3, #10
 8004c62:	4859      	ldr	r0, [pc, #356]	@ (8004dc8 <_printf_i+0x238>)
 8004c64:	e011      	b.n	8004c8a <_printf_i+0xfa>
 8004c66:	6821      	ldr	r1, [r4, #0]
 8004c68:	6833      	ldr	r3, [r6, #0]
 8004c6a:	0608      	lsls	r0, r1, #24
 8004c6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c70:	d402      	bmi.n	8004c78 <_printf_i+0xe8>
 8004c72:	0649      	lsls	r1, r1, #25
 8004c74:	bf48      	it	mi
 8004c76:	b2ad      	uxthmi	r5, r5
 8004c78:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c7a:	6033      	str	r3, [r6, #0]
 8004c7c:	bf14      	ite	ne
 8004c7e:	230a      	movne	r3, #10
 8004c80:	2308      	moveq	r3, #8
 8004c82:	4851      	ldr	r0, [pc, #324]	@ (8004dc8 <_printf_i+0x238>)
 8004c84:	2100      	movs	r1, #0
 8004c86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c8a:	6866      	ldr	r6, [r4, #4]
 8004c8c:	2e00      	cmp	r6, #0
 8004c8e:	bfa8      	it	ge
 8004c90:	6821      	ldrge	r1, [r4, #0]
 8004c92:	60a6      	str	r6, [r4, #8]
 8004c94:	bfa4      	itt	ge
 8004c96:	f021 0104 	bicge.w	r1, r1, #4
 8004c9a:	6021      	strge	r1, [r4, #0]
 8004c9c:	b90d      	cbnz	r5, 8004ca2 <_printf_i+0x112>
 8004c9e:	2e00      	cmp	r6, #0
 8004ca0:	d04b      	beq.n	8004d3a <_printf_i+0x1aa>
 8004ca2:	4616      	mov	r6, r2
 8004ca4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ca8:	fb03 5711 	mls	r7, r3, r1, r5
 8004cac:	5dc7      	ldrb	r7, [r0, r7]
 8004cae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cb2:	462f      	mov	r7, r5
 8004cb4:	42bb      	cmp	r3, r7
 8004cb6:	460d      	mov	r5, r1
 8004cb8:	d9f4      	bls.n	8004ca4 <_printf_i+0x114>
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d10b      	bne.n	8004cd6 <_printf_i+0x146>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	07df      	lsls	r7, r3, #31
 8004cc2:	d508      	bpl.n	8004cd6 <_printf_i+0x146>
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	6861      	ldr	r1, [r4, #4]
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	bfde      	ittt	le
 8004ccc:	2330      	movle	r3, #48	@ 0x30
 8004cce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cd6:	1b92      	subs	r2, r2, r6
 8004cd8:	6122      	str	r2, [r4, #16]
 8004cda:	464b      	mov	r3, r9
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4640      	mov	r0, r8
 8004ce0:	f8cd a000 	str.w	sl, [sp]
 8004ce4:	aa03      	add	r2, sp, #12
 8004ce6:	f7ff fee1 	bl	8004aac <_printf_common>
 8004cea:	3001      	adds	r0, #1
 8004cec:	d14a      	bne.n	8004d84 <_printf_i+0x1f4>
 8004cee:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf2:	b004      	add	sp, #16
 8004cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	f043 0320 	orr.w	r3, r3, #32
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	2778      	movs	r7, #120	@ 0x78
 8004d02:	4832      	ldr	r0, [pc, #200]	@ (8004dcc <_printf_i+0x23c>)
 8004d04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	6831      	ldr	r1, [r6, #0]
 8004d0c:	061f      	lsls	r7, r3, #24
 8004d0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d12:	d402      	bmi.n	8004d1a <_printf_i+0x18a>
 8004d14:	065f      	lsls	r7, r3, #25
 8004d16:	bf48      	it	mi
 8004d18:	b2ad      	uxthmi	r5, r5
 8004d1a:	6031      	str	r1, [r6, #0]
 8004d1c:	07d9      	lsls	r1, r3, #31
 8004d1e:	bf44      	itt	mi
 8004d20:	f043 0320 	orrmi.w	r3, r3, #32
 8004d24:	6023      	strmi	r3, [r4, #0]
 8004d26:	b11d      	cbz	r5, 8004d30 <_printf_i+0x1a0>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	e7ab      	b.n	8004c84 <_printf_i+0xf4>
 8004d2c:	4826      	ldr	r0, [pc, #152]	@ (8004dc8 <_printf_i+0x238>)
 8004d2e:	e7e9      	b.n	8004d04 <_printf_i+0x174>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	f023 0320 	bic.w	r3, r3, #32
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	e7f6      	b.n	8004d28 <_printf_i+0x198>
 8004d3a:	4616      	mov	r6, r2
 8004d3c:	e7bd      	b.n	8004cba <_printf_i+0x12a>
 8004d3e:	6833      	ldr	r3, [r6, #0]
 8004d40:	6825      	ldr	r5, [r4, #0]
 8004d42:	1d18      	adds	r0, r3, #4
 8004d44:	6961      	ldr	r1, [r4, #20]
 8004d46:	6030      	str	r0, [r6, #0]
 8004d48:	062e      	lsls	r6, r5, #24
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	d501      	bpl.n	8004d52 <_printf_i+0x1c2>
 8004d4e:	6019      	str	r1, [r3, #0]
 8004d50:	e002      	b.n	8004d58 <_printf_i+0x1c8>
 8004d52:	0668      	lsls	r0, r5, #25
 8004d54:	d5fb      	bpl.n	8004d4e <_printf_i+0x1be>
 8004d56:	8019      	strh	r1, [r3, #0]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	4616      	mov	r6, r2
 8004d5c:	6123      	str	r3, [r4, #16]
 8004d5e:	e7bc      	b.n	8004cda <_printf_i+0x14a>
 8004d60:	6833      	ldr	r3, [r6, #0]
 8004d62:	2100      	movs	r1, #0
 8004d64:	1d1a      	adds	r2, r3, #4
 8004d66:	6032      	str	r2, [r6, #0]
 8004d68:	681e      	ldr	r6, [r3, #0]
 8004d6a:	6862      	ldr	r2, [r4, #4]
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 f859 	bl	8004e24 <memchr>
 8004d72:	b108      	cbz	r0, 8004d78 <_printf_i+0x1e8>
 8004d74:	1b80      	subs	r0, r0, r6
 8004d76:	6060      	str	r0, [r4, #4]
 8004d78:	6863      	ldr	r3, [r4, #4]
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d82:	e7aa      	b.n	8004cda <_printf_i+0x14a>
 8004d84:	4632      	mov	r2, r6
 8004d86:	4649      	mov	r1, r9
 8004d88:	4640      	mov	r0, r8
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	47d0      	blx	sl
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d0ad      	beq.n	8004cee <_printf_i+0x15e>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	079b      	lsls	r3, r3, #30
 8004d96:	d413      	bmi.n	8004dc0 <_printf_i+0x230>
 8004d98:	68e0      	ldr	r0, [r4, #12]
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	4298      	cmp	r0, r3
 8004d9e:	bfb8      	it	lt
 8004da0:	4618      	movlt	r0, r3
 8004da2:	e7a6      	b.n	8004cf2 <_printf_i+0x162>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4632      	mov	r2, r6
 8004da8:	4649      	mov	r1, r9
 8004daa:	4640      	mov	r0, r8
 8004dac:	47d0      	blx	sl
 8004dae:	3001      	adds	r0, #1
 8004db0:	d09d      	beq.n	8004cee <_printf_i+0x15e>
 8004db2:	3501      	adds	r5, #1
 8004db4:	68e3      	ldr	r3, [r4, #12]
 8004db6:	9903      	ldr	r1, [sp, #12]
 8004db8:	1a5b      	subs	r3, r3, r1
 8004dba:	42ab      	cmp	r3, r5
 8004dbc:	dcf2      	bgt.n	8004da4 <_printf_i+0x214>
 8004dbe:	e7eb      	b.n	8004d98 <_printf_i+0x208>
 8004dc0:	2500      	movs	r5, #0
 8004dc2:	f104 0619 	add.w	r6, r4, #25
 8004dc6:	e7f5      	b.n	8004db4 <_printf_i+0x224>
 8004dc8:	08005114 	.word	0x08005114
 8004dcc:	08005125 	.word	0x08005125

08004dd0 <memmove>:
 8004dd0:	4288      	cmp	r0, r1
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	eb01 0402 	add.w	r4, r1, r2
 8004dd8:	d902      	bls.n	8004de0 <memmove+0x10>
 8004dda:	4284      	cmp	r4, r0
 8004ddc:	4623      	mov	r3, r4
 8004dde:	d807      	bhi.n	8004df0 <memmove+0x20>
 8004de0:	1e43      	subs	r3, r0, #1
 8004de2:	42a1      	cmp	r1, r4
 8004de4:	d008      	beq.n	8004df8 <memmove+0x28>
 8004de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dee:	e7f8      	b.n	8004de2 <memmove+0x12>
 8004df0:	4601      	mov	r1, r0
 8004df2:	4402      	add	r2, r0
 8004df4:	428a      	cmp	r2, r1
 8004df6:	d100      	bne.n	8004dfa <memmove+0x2a>
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e02:	e7f7      	b.n	8004df4 <memmove+0x24>

08004e04 <_sbrk_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	2300      	movs	r3, #0
 8004e08:	4d05      	ldr	r5, [pc, #20]	@ (8004e20 <_sbrk_r+0x1c>)
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	f7fc fa12 	bl	8001238 <_sbrk>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_sbrk_r+0x1a>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_sbrk_r+0x1a>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20000394 	.word	0x20000394

08004e24 <memchr>:
 8004e24:	4603      	mov	r3, r0
 8004e26:	b510      	push	{r4, lr}
 8004e28:	b2c9      	uxtb	r1, r1
 8004e2a:	4402      	add	r2, r0
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	d101      	bne.n	8004e36 <memchr+0x12>
 8004e32:	2000      	movs	r0, #0
 8004e34:	e003      	b.n	8004e3e <memchr+0x1a>
 8004e36:	7804      	ldrb	r4, [r0, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	428c      	cmp	r4, r1
 8004e3c:	d1f6      	bne.n	8004e2c <memchr+0x8>
 8004e3e:	bd10      	pop	{r4, pc}

08004e40 <memcpy>:
 8004e40:	440a      	add	r2, r1
 8004e42:	4291      	cmp	r1, r2
 8004e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e48:	d100      	bne.n	8004e4c <memcpy+0xc>
 8004e4a:	4770      	bx	lr
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e52:	4291      	cmp	r1, r2
 8004e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e58:	d1f9      	bne.n	8004e4e <memcpy+0xe>
 8004e5a:	bd10      	pop	{r4, pc}

08004e5c <_realloc_r>:
 8004e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e60:	4680      	mov	r8, r0
 8004e62:	4615      	mov	r5, r2
 8004e64:	460c      	mov	r4, r1
 8004e66:	b921      	cbnz	r1, 8004e72 <_realloc_r+0x16>
 8004e68:	4611      	mov	r1, r2
 8004e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6e:	f7ff bc39 	b.w	80046e4 <_malloc_r>
 8004e72:	b92a      	cbnz	r2, 8004e80 <_realloc_r+0x24>
 8004e74:	f7ff fbcc 	bl	8004610 <_free_r>
 8004e78:	2400      	movs	r4, #0
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e80:	f000 f81a 	bl	8004eb8 <_malloc_usable_size_r>
 8004e84:	4285      	cmp	r5, r0
 8004e86:	4606      	mov	r6, r0
 8004e88:	d802      	bhi.n	8004e90 <_realloc_r+0x34>
 8004e8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e8e:	d8f4      	bhi.n	8004e7a <_realloc_r+0x1e>
 8004e90:	4629      	mov	r1, r5
 8004e92:	4640      	mov	r0, r8
 8004e94:	f7ff fc26 	bl	80046e4 <_malloc_r>
 8004e98:	4607      	mov	r7, r0
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d0ec      	beq.n	8004e78 <_realloc_r+0x1c>
 8004e9e:	42b5      	cmp	r5, r6
 8004ea0:	462a      	mov	r2, r5
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	bf28      	it	cs
 8004ea6:	4632      	movcs	r2, r6
 8004ea8:	f7ff ffca 	bl	8004e40 <memcpy>
 8004eac:	4621      	mov	r1, r4
 8004eae:	4640      	mov	r0, r8
 8004eb0:	f7ff fbae 	bl	8004610 <_free_r>
 8004eb4:	463c      	mov	r4, r7
 8004eb6:	e7e0      	b.n	8004e7a <_realloc_r+0x1e>

08004eb8 <_malloc_usable_size_r>:
 8004eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ebc:	1f18      	subs	r0, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bfbc      	itt	lt
 8004ec2:	580b      	ldrlt	r3, [r1, r0]
 8004ec4:	18c0      	addlt	r0, r0, r3
 8004ec6:	4770      	bx	lr

08004ec8 <_init>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	bf00      	nop
 8004ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ece:	bc08      	pop	{r3}
 8004ed0:	469e      	mov	lr, r3
 8004ed2:	4770      	bx	lr

08004ed4 <_fini>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	bf00      	nop
 8004ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eda:	bc08      	pop	{r3}
 8004edc:	469e      	mov	lr, r3
 8004ede:	4770      	bx	lr
